{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n  var out = encoding_1.fromRfc3339(dateTimeString);\n  var nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n  var nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n  out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n  return out;\n}\n\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\n\nfunction toRfc3339WithNanoseconds(dateTime) {\n  var _a, _b;\n\n  var millisecondIso = dateTime.toISOString();\n  var nanoseconds = (_b = (_a = dateTime.nanoseconds) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n  return \"\".concat(millisecondIso.slice(0, -1)).concat(nanoseconds.padStart(6, \"0\"), \"Z\");\n}\n\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\n\nfunction fromSeconds(seconds) {\n  var nanos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var checkedNanos = new math_1.Uint32(nanos).toNumber();\n\n  if (checkedNanos > 999999999) {\n    throw new Error(\"Nano seconds must not exceed 999999999\");\n  }\n\n  var out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n  out.nanoseconds = checkedNanos % 1000000;\n  return out;\n}\n\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\n\nfunction toSeconds(date) {\n  var _a;\n\n  return {\n    seconds: Math.floor(date.getTime() / 1000),\n    nanos: date.getTime() % 1000 * 1000000 + ((_a = date.nanoseconds) !== null && _a !== void 0 ? _a : 0)\n  };\n}\n\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\n\nvar DateTime = /*#__PURE__*/function () {\n  function DateTime() {\n    _classCallCheck(this, DateTime);\n  }\n\n  _createClass(DateTime, null, [{\n    key: \"decode\",\n\n    /** @deprecated Use fromRfc3339WithNanoseconds instead */\n    value: function decode(dateTimeString) {\n      return fromRfc3339WithNanoseconds(dateTimeString);\n    }\n    /** @deprecated Use toRfc3339WithNanoseconds instead */\n\n  }, {\n    key: \"encode\",\n    value: function encode(dateTime) {\n      return toRfc3339WithNanoseconds(dateTime);\n    }\n  }]);\n\n  return DateTime;\n}();\n\nexports.DateTime = DateTime;","map":null,"metadata":{},"sourceType":"script"}