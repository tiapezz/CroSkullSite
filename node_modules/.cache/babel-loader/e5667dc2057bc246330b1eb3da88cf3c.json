{"ast":null,"code":"var _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface\n\n\nvar JsonRpcEngineMiddlewareSubprovider = /*#__PURE__*/function (_Subprovider) {\n  \"use strict\";\n\n  _inherits(JsonRpcEngineMiddlewareSubprovider, _Subprovider);\n\n  // take a constructorFn to call once we have a reference to the engine\n  function JsonRpcEngineMiddlewareSubprovider(constructorFn) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcEngineMiddlewareSubprovider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JsonRpcEngineMiddlewareSubprovider).call(this));\n    if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');\n    _this._constructorFn = constructorFn;\n    return _this;\n  } // this is called once the subprovider has been added to the provider engine\n\n\n  _createClass(JsonRpcEngineMiddlewareSubprovider, [{\n    key: \"setEngine\",\n    value: function setEngine(engine) {\n      if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');\n      var blockTracker = engine._blockTracker;\n\n      var middleware = this._constructorFn({\n        engine: engine,\n        provider: engine,\n        blockTracker: blockTracker\n      });\n\n      if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');\n      if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');\n      this.middleware = middleware;\n    }\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(req, provEngNext, provEngEnd) {\n      var res = {\n        id: req.id\n      };\n      this.middleware(req, res, middlewareNext, middlewareEnd);\n\n      function middlewareNext(handler) {\n        provEngNext(function (err, result, cb) {\n          // update response object with result or error\n          if (err) {\n            delete res.result;\n            res.error = {\n              message: err.message || err\n            };\n          } else {\n            res.result = result;\n          } // call middleware's next handler (even if error)\n\n\n          if (handler) {\n            handler(cb);\n          } else {\n            cb();\n          }\n        });\n      }\n\n      function middlewareEnd(err) {\n        if (err) return provEngEnd(err);\n        provEngEnd(null, res.result);\n      }\n    }\n  }]);\n\n  return JsonRpcEngineMiddlewareSubprovider;\n}(Subprovider);\n\nmodule.exports = JsonRpcEngineMiddlewareSubprovider;","map":null,"metadata":{},"sourceType":"script"}