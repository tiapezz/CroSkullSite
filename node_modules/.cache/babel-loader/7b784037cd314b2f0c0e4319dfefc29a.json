{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProofOps = exports.ProofOp = exports.DominoOp = exports.ValueOp = exports.Proof = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nexports.protobufPackage = \"tendermint.crypto\";\nvar baseProof = {\n  total: long_1.default.ZERO,\n  index: long_1.default.ZERO\n};\nexports.Proof = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (!message.total.isZero()) {\n      writer.uint32(8).int64(message.total);\n    }\n\n    if (!message.index.isZero()) {\n      writer.uint32(16).int64(message.index);\n    }\n\n    if (message.leafHash.length !== 0) {\n      writer.uint32(26).bytes(message.leafHash);\n    }\n\n    var _iterator = _createForOfIteratorHelper(message.aunts),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var v = _step.value;\n        writer.uint32(34).bytes(v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseProof);\n    message.aunts = [];\n    message.leafHash = new Uint8Array();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.total = reader.int64();\n          break;\n\n        case 2:\n          message.index = reader.int64();\n          break;\n\n        case 3:\n          message.leafHash = reader.bytes();\n          break;\n\n        case 4:\n          message.aunts.push(reader.bytes());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseProof);\n    message.aunts = [];\n    message.leafHash = new Uint8Array();\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = long_1.default.fromString(object.total);\n    } else {\n      message.total = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = long_1.default.fromString(object.index);\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    if (object.leafHash !== undefined && object.leafHash !== null) {\n      message.leafHash = bytesFromBase64(object.leafHash);\n    }\n\n    if (object.aunts !== undefined && object.aunts !== null) {\n      var _iterator2 = _createForOfIteratorHelper(object.aunts),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var e = _step2.value;\n          message.aunts.push(bytesFromBase64(e));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.total !== undefined && (obj.total = (message.total || long_1.default.ZERO).toString());\n    message.index !== undefined && (obj.index = (message.index || long_1.default.ZERO).toString());\n    message.leafHash !== undefined && (obj.leafHash = base64FromBytes(message.leafHash !== undefined ? message.leafHash : new Uint8Array()));\n\n    if (message.aunts) {\n      obj.aunts = message.aunts.map(function (e) {\n        return base64FromBytes(e !== undefined ? e : new Uint8Array());\n      });\n    } else {\n      obj.aunts = [];\n    }\n\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n\n    var message = Object.assign({}, baseProof);\n\n    if (object.total !== undefined && object.total !== null) {\n      message.total = object.total;\n    } else {\n      message.total = long_1.default.ZERO;\n    }\n\n    if (object.index !== undefined && object.index !== null) {\n      message.index = object.index;\n    } else {\n      message.index = long_1.default.ZERO;\n    }\n\n    message.leafHash = (_a = object.leafHash) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.aunts = [];\n\n    if (object.aunts !== undefined && object.aunts !== null) {\n      var _iterator3 = _createForOfIteratorHelper(object.aunts),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var e = _step3.value;\n          message.aunts.push(e);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    return message;\n  }\n};\nvar baseValueOp = {};\nexports.ValueOp = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n\n    if (message.proof !== undefined) {\n      exports.Proof.encode(message.proof, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseValueOp);\n    message.key = new Uint8Array();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n\n        case 2:\n          message.proof = exports.Proof.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseValueOp);\n    message.key = new Uint8Array();\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = exports.Proof.fromJSON(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.proof !== undefined && (obj.proof = message.proof ? exports.Proof.toJSON(message.proof) : undefined);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n\n    var message = Object.assign({}, baseValueOp);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n\n    if (object.proof !== undefined && object.proof !== null) {\n      message.proof = exports.Proof.fromPartial(object.proof);\n    } else {\n      message.proof = undefined;\n    }\n\n    return message;\n  }\n};\nvar baseDominoOp = {\n  key: \"\",\n  input: \"\",\n  output: \"\"\n};\nexports.DominoOp = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.key !== \"\") {\n      writer.uint32(10).string(message.key);\n    }\n\n    if (message.input !== \"\") {\n      writer.uint32(18).string(message.input);\n    }\n\n    if (message.output !== \"\") {\n      writer.uint32(26).string(message.output);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseDominoOp);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.string();\n          break;\n\n        case 2:\n          message.input = reader.string();\n          break;\n\n        case 3:\n          message.output = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseDominoOp);\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = String(object.key);\n    } else {\n      message.key = \"\";\n    }\n\n    if (object.input !== undefined && object.input !== null) {\n      message.input = String(object.input);\n    } else {\n      message.input = \"\";\n    }\n\n    if (object.output !== undefined && object.output !== null) {\n      message.output = String(object.output);\n    } else {\n      message.output = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.key !== undefined && (obj.key = message.key);\n    message.input !== undefined && (obj.input = message.input);\n    message.output !== undefined && (obj.output = message.output);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n\n    var message = Object.assign({}, baseDominoOp);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : \"\";\n    message.input = (_b = object.input) !== null && _b !== void 0 ? _b : \"\";\n    message.output = (_c = object.output) !== null && _c !== void 0 ? _c : \"\";\n    return message;\n  }\n};\nvar baseProofOp = {\n  type: \"\"\n};\nexports.ProofOp = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.type !== \"\") {\n      writer.uint32(10).string(message.type);\n    }\n\n    if (message.key.length !== 0) {\n      writer.uint32(18).bytes(message.key);\n    }\n\n    if (message.data.length !== 0) {\n      writer.uint32(26).bytes(message.data);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseProofOp);\n    message.key = new Uint8Array();\n    message.data = new Uint8Array();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.type = reader.string();\n          break;\n\n        case 2:\n          message.key = reader.bytes();\n          break;\n\n        case 3:\n          message.data = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseProofOp);\n    message.key = new Uint8Array();\n    message.data = new Uint8Array();\n\n    if (object.type !== undefined && object.type !== null) {\n      message.type = String(object.type);\n    } else {\n      message.type = \"\";\n    }\n\n    if (object.key !== undefined && object.key !== null) {\n      message.key = bytesFromBase64(object.key);\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = bytesFromBase64(object.data);\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.type !== undefined && (obj.type = message.type);\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.data !== undefined && (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c;\n\n    var message = Object.assign({}, baseProofOp);\n    message.type = (_a = object.type) !== null && _a !== void 0 ? _a : \"\";\n    message.key = (_b = object.key) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array();\n    return message;\n  }\n};\nvar baseProofOps = {};\nexports.ProofOps = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    var _iterator4 = _createForOfIteratorHelper(message.ops),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var v = _step4.value;\n        exports.ProofOp.encode(v, writer.uint32(10).fork()).ldelim();\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.ops.push(exports.ProofOp.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    if (object.ops !== undefined && object.ops !== null) {\n      var _iterator5 = _createForOfIteratorHelper(object.ops),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var e = _step5.value;\n          message.ops.push(exports.ProofOp.fromJSON(e));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n\n    if (message.ops) {\n      obj.ops = message.ops.map(function (e) {\n        return e ? exports.ProofOp.toJSON(e) : undefined;\n      });\n    } else {\n      obj.ops = [];\n    }\n\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var message = Object.assign({}, baseProofOps);\n    message.ops = [];\n\n    if (object.ops !== undefined && object.ops !== null) {\n      var _iterator6 = _createForOfIteratorHelper(object.ops),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var e = _step6.value;\n          message.ops.push(exports.ProofOp.fromPartial(e));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n\n    return message;\n  }\n};\n\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n}();\n\nvar atob = globalThis.atob || function (b64) {\n  return globalThis.Buffer.from(b64, \"base64\").toString(\"binary\");\n};\n\nfunction bytesFromBase64(b64) {\n  var bin = atob(b64);\n  var arr = new Uint8Array(bin.length);\n\n  for (var i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nvar btoa = globalThis.btoa || function (bin) {\n  return globalThis.Buffer.from(bin, \"binary\").toString(\"base64\");\n};\n\nfunction base64FromBytes(arr) {\n  var bin = [];\n\n  var _iterator7 = _createForOfIteratorHelper(arr),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var byte = _step7.value;\n      bin.push(String.fromCharCode(byte));\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":null,"metadata":{},"sourceType":"script"}