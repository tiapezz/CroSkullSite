{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipld-block');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/block/put')>}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options,\n          _multihash$decode,\n          name,\n          length,\n          cid,\n          _multihash$decode2,\n          _name,\n          _length,\n          controller,\n          signal,\n          res,\n          response,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (Block.isBlock(data)) {\n                _multihash$decode = multihash.decode(data.cid.multihash), name = _multihash$decode.name, length = _multihash$decode.length;\n                options = _objectSpread({}, options, {\n                  format: data.cid.codec,\n                  mhtype: name,\n                  mhlen: length,\n                  version: data.cid.version\n                }); // @ts-ignore - data is typed as block so TS complains about\n                // Uint8Array assignment.\n\n                data = data.data;\n              } else if (options.cid) {\n                cid = new CID(options.cid);\n                _multihash$decode2 = multihash.decode(cid.multihash), _name = _multihash$decode2.name, _length = _multihash$decode2.length;\n                options = _objectSpread({}, options, {\n                  format: cid.codec,\n                  mhtype: _name,\n                  mhlen: _length,\n                  version: cid.version\n                });\n                delete options.cid;\n              } // allow aborting requests on body errors\n\n\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.prev = 4;\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 10;\n              return multipartRequest(data, controller, options.headers);\n\n            case 10:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 14;\n              return _context.t0.post.call(_context.t0, 'block/put', _context.t4);\n\n            case 14:\n              response = _context.sent;\n              _context.next = 17;\n              return response.json();\n\n            case 17:\n              res = _context.sent;\n              _context.next = 29;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t5 = _context[\"catch\"](4);\n\n              if (!(options.format === 'dag-pb')) {\n                _context.next = 26;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread({}, options, {\n                format: 'protobuf'\n              })));\n\n            case 26:\n              if (!(options.format === 'dag-cbor')) {\n                _context.next = 28;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread({}, options, {\n                format: 'cbor'\n              })));\n\n            case 28:\n              throw _context.t5;\n\n            case 29:\n              return _context.abrupt(\"return\", new Block(\n              /** @type {Uint8Array} */\n              data, new CID(res.Key)));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 20]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}