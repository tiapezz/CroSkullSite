{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nvar modeToString = require('./mode-to-string');\n\nfunction multipartRequest() {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var abortController = arguments.length > 1 ? arguments[1] : undefined;\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var parts, formData, index, total, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parts = [];\n          formData = new FormData();\n          index = 0;\n          total = 0;\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 6;\n          _iterator = _asyncIterator(normaliseInput(source));\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 10:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 14:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 30;\n            break;\n          }\n\n          _value2 = _value, content = _value2.content, path = _value2.path, mode = _value2.mode, mtime = _value2.mtime;\n          fileSuffix = '';\n          type = content ? 'file' : 'dir';\n\n          if (index > 0) {\n            fileSuffix = \"-\".concat(index);\n          }\n\n          fieldName = type + fileSuffix;\n          qs = [];\n\n          if (mode !== null && mode !== undefined) {\n            qs.push(\"mode=\".concat(modeToString(mode)));\n          }\n\n          if (mtime != null) {\n            secs = mtime.secs, nsecs = mtime.nsecs;\n            qs.push(\"mtime=\".concat(secs));\n\n            if (nsecs != null) {\n              qs.push(\"mtime-nsecs=\".concat(nsecs));\n            }\n          }\n\n          if (qs.length) {\n            fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n          }\n\n          if (content) {\n            formData.set(fieldName, content, encodeURIComponent(path));\n            end = total + content.size;\n            parts.push({\n              name: path,\n              start: total,\n              end: end\n            });\n            total = end;\n          } else {\n            formData.set(fieldName, new File([''], encodeURIComponent(path), {\n              type: 'application/x-directory'\n            }));\n          }\n\n          index++;\n\n        case 27:\n          _iteratorNormalCompletion = true;\n          _context.next = 8;\n          break;\n\n        case 30:\n          _context.next = 36;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t0 = _context[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 36:\n          _context.prev = 36;\n          _context.prev = 37;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 41;\n            break;\n          }\n\n          _context.next = 41;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 41:\n          _context.prev = 41;\n\n          if (!_didIteratorError) {\n            _context.next = 44;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 44:\n          return _context.finish(41);\n\n        case 45:\n          return _context.finish(36);\n\n        case 46:\n          return _context.abrupt(\"return\", {\n            total: total,\n            parts: parts,\n            headers: headers,\n            body: formData\n          });\n\n        case 47:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[6, 32, 36, 46], [37,, 41, 45]], Promise);\n}\n\nmodule.exports = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}