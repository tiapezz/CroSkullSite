{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').ImplementsMethod<'query', import('ipfs-core/src/components/dht')>}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/query', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: new CID(\"\".concat(peerId))\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 25;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n              message.responses = (message.responses || []).map(function (_ref) {\n                var ID = _ref.ID,\n                    Addrs = _ref.Addrs;\n                return {\n                  id: ID,\n                  addrs: (Addrs || []).map(function (a) {\n                    return multiaddr(a);\n                  })\n                };\n              });\n              _context.next = 22;\n              return message;\n\n            case 22:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 25:\n              _context.next = 31;\n              break;\n\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 31:\n              _context.prev = 31;\n              _context.prev = 32;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 36;\n                break;\n              }\n\n              _context.next = 36;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 36:\n              _context.prev = 36;\n\n              if (!_didIteratorError) {\n                _context.next = 39;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 39:\n              return _context.finish(36);\n\n            case 40:\n              return _context.finish(31);\n\n            case 41:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 27, 31, 41], [32,, 36, 40]]);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  return query;\n});","map":null,"metadata":{},"sourceType":"script"}