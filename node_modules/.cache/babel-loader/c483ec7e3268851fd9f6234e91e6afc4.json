{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Marketplace from \"./components/Marketplace/Marketplace\";\nimport AccountDetails from \"./components/AccountDetails/AccountDetails\";\nimport CroskullAdventure from \"./components/CroskullAdventure/CroskullAdventure\";\nimport Merchant from \"./components/Merchant/Merchant\";\nimport Analytics from \"./components/Analytics/Analytics\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Notifier from \"./components/Notifier/Notifier\";\nimport Tavern from \"./components/Tavern/Tavern\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { useDispatch } from \"react-redux\";\nimport { playSound } from \"./redux/data/dataActions\";\nimport { ethers } from 'ethers';\nimport store from \"./redux/store\";\nimport Raffle from \"./components/Raffle/Raffle\";\nimport Bank from \"./components/Bank/Bank\";\nimport BgMusic from \"./utils/bg-music.mp3\";\nimport ClickSound from \"./sounds/click-sound.mp3\";\nimport \"./App.css\";\nvar provider, contract, stakingContract, ethProvider;\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.setProvider = function () {\n      var _provider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (_provider) {\n        provider = _provider;\n      } else if (!provider) {\n        provider = window.ethereum;\n      }\n    };\n\n    _this.getNFTData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$state, croSkullContract, stakingContract, accountAddress, receivedFilter, transferedFilter, inStakeFilter, receivedEvents, transferedEvents, inStakeTokens, received, transfered, final;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, croSkullContract = _this$state.croSkullContract, stakingContract = _this$state.stakingContract, accountAddress = _this$state.accountAddress;\n              receivedFilter = croSkullContract.filters.Transfer(null, accountAddress);\n              transferedFilter = croSkullContract.filters.Transfer(accountAddress);\n              inStakeFilter = stakingContract.filters.Stake(accountAddress);\n              _context.next = 6;\n              return croSkullContract.queryFilter(receivedFilter);\n\n            case 6:\n              receivedEvents = _context.sent;\n              _context.next = 9;\n              return croSkullContract.queryFilter(transferedFilter);\n\n            case 9:\n              transferedEvents = _context.sent;\n              _context.next = 12;\n              return stakingContract.getTokensIds();\n\n            case 12:\n              inStakeTokens = _context.sent;\n              received = [];\n              transfered = [];\n              receivedEvents.map(function (event) {\n                var topics = event.decode(event.data, event.topics);\n                var tokenId = topics.tokenId.toString();\n                console.log(tokenId); //if( ! received.includes(tokenId) )\n\n                if (received[tokenId]) {\n                  received[tokenId]++;\n                } else {\n                  received[tokenId] = 1;\n                }\n              });\n              transferedEvents.map(function (event) {\n                var topics = event.decode(event.data, event.topics);\n                var tokenId = topics.tokenId.toString();\n\n                if (transfered[tokenId]) {\n                  transfered[tokenId]++;\n                } else {\n                  transfered[tokenId] = 1;\n                }\n              });\n              final = [];\n              received.forEach(function (nTrasfer, tokenId) {\n                if (nTrasfer > transfered[tokenId] || nTrasfer && !transfered[tokenId]) {\n                  final.push(tokenId);\n                }\n              }); //let sfiltred = received.filter( x => ! transfered.includes(x))\n\n              final = final.filter(function (x) {\n                return !inStakeTokens.includes(x);\n              });\n\n              _this.setState({\n                croSkulls: final,\n                croSkullsStaked: inStakeTokens\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.setMetaData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var croSkulls, traits, traitsTypes, boyLength;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              croSkulls = _this.state.croSkulls;\n\n              if (croSkulls.length !== 0) {\n                traits = [];\n                traitsTypes = [];\n\n                if (croSkulls.length.length !== 0) {\n                  boyLength = croSkulls.length;\n                  croSkulls.forEach(function (cryptoboy, iBoy) {\n                    //loop cryptoboy\n                    if (cryptoboy.metaData) {\n                      var traitsLength = cryptoboy.metaData.attributes.length;\n                      cryptoboy.metaData.attributes.forEach(function (trait, iTraits) {\n                        // loop tratti\n                        var trait_type = trait.trait_type,\n                            value = trait.value;\n                        var type = trait_type.replace(' ', '-');\n                        var uniqueType = true;\n                        traitsTypes.forEach(function (existType, i) {\n                          if (existType === type) uniqueType = false;\n                        });\n                        if (uniqueType) traitsTypes.push(type);\n                        if (traits[type] === undefined) traits[type] = [];\n                        var unique = true;\n                        traits[type].forEach(function (existValue) {\n                          if (existValue === value) unique = false;\n                        });\n                        if (unique) traits[type].push(value);\n\n                        if (boyLength === iBoy + 1 && traitsLength === iTraits + 1) {\n                          _this.setState({\n                            traits: traits\n                          });\n\n                          _this.setState({\n                            traitsTypes: traitsTypes\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n\n                console.log('traits:' + _this.state.traits);\n                console.log('traitsType:' + _this.state.traitsTypes);\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleStatusNFTFilter = function (ev) {\n      var _this$state2 = _this.state,\n          croSkulls = _this$state2.croSkulls,\n          accountAddress = _this$state2.accountAddress;\n      var value = ev.value;\n      var newMarketplaceView = [];\n\n      switch (value) {\n        case 'all':\n          newMarketplaceView = croSkulls;\n          break;\n\n        case 'inSale':\n          croSkulls.forEach(function (croSkull, i) {\n            if (croSkull.forSale) newMarketplaceView.push(croSkull);\n          });\n          break;\n\n        case 'notInSale':\n          croSkulls.forEach(function (croSkull, i) {\n            if (!croSkull.forSale) newMarketplaceView.push(croSkull);\n          });\n          break;\n\n        case 'owned':\n          croSkulls.forEach(function (croSkull, i) {\n            if (croSkull.currentOwner === accountAddress) newMarketplaceView.push(croSkull);\n          });\n          break;\n      }\n\n      _this.setState({\n        marketplaceView: newMarketplaceView\n      });\n    };\n\n    _this.handleFilterBar = function (ev) {\n      var _this$state3 = _this.state,\n          croSkulls = _this$state3.croSkulls,\n          activeFilters = _this$state3.activeFilters;\n      var value = ev.value.split('_');\n      var trait = value[0];\n      value = value[1].replace('-', ' ');\n      var newFilters = activeFilters;\n\n      if (!newFilters.length > 0) {\n        newFilters.push({\n          trait_type: trait,\n          value: value\n        });\n      } else {\n        var exist = false;\n        newFilters.forEach(function (filter, i) {\n          //controllo i filtri attivi\n          if (exist) return; //se esiste già esco\n\n          if (filter.trait_type === trait) {\n            // tipo tratto uguale \n            if (filter.value != value) {\n              // valore tratto diverso \n              newFilters[i] = {\n                trait_type: trait,\n                value: value\n              };\n              exist = true;\n            }\n\n            if (filter.value === value) {\n              // valoe tratto uguale\n              exist = true;\n            }\n          }\n        });\n        if (!exist) newFilters.push({\n          trait_type: trait,\n          value: value\n        });\n      }\n\n      var newView = [];\n      croSkulls.map(function (croSkull, i) {\n        //crypto boy 1\n        if (croSkull.metaData) {\n          var filterValid = true;\n          newFilters.forEach(function (filter) {\n            //filtro 1\n            if (!filterValid) return;\n            var traitValid = false;\n            croSkull.metaData.attributes.forEach(function (forTrait) {\n              // tratto 1\n              if (traitValid) return;\n\n              if (forTrait.trait_type === filter.trait_type && forTrait.value === filter.value || filter.value === 'none') {\n                //tratto valido\n                traitValid = true;\n                return;\n              }\n            });\n            filterValid = traitValid;\n          });\n          if (filterValid) newView.push(croSkull); // aggiungo il tratto\n        }\n      });\n\n      _this.setState({\n        marketplaceView: newView\n      });\n\n      _this.setState({\n        activeFilters: newFilters\n      });\n    };\n\n    _this.handleOrderChange = function () {\n      var ev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          numToEth = _assertThisInitialize.numToEth;\n\n      var order = ev != null ? ev.value : _this.state.order;\n      var marketplaceView = _this.state.marketplaceView;\n\n      if (order === 'ASC') {\n        marketplaceView.sort(function (a, b) {\n          a = parseInt(numToEth(a.price));\n          b = parseInt(numToEth(b.price));\n          return a - b;\n        });\n      } else {\n        marketplaceView.sort(function (a, b) {\n          a = parseInt(numToEth(a.price));\n          b = parseInt(numToEth(b.price));\n          return a - b;\n        }).reverse();\n      }\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.subscribe = function () {\n      store.subscribe(function () {\n        _this.setState({\n          blockchain: store.getState().blockchain\n        });\n      });\n    };\n\n    _this.state = {\n      blockchain: 0,\n      //reward©\n      traits: [],\n      traitsTypes: [],\n      order: 'ASC',\n      marketplaceView: [],\n      activeFilters: [],\n      activeNFTStatus: 'all'\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n      var bgSound = new Audio(BgMusic);\n      bgSound.loop = true;\n      bgSound.volume = 0.1;\n      bgSound.play();\n      var clickSound = new Audio(ClickSound);\n      clickSound.volume = 0.1;\n      document.addEventListener('click', function () {\n        clickSound.currentTime = 0;\n        clickSound.play();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.setMetaData;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Notifier, {\n        data: store.getState().data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HashRouter, {\n        basename: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        render: function render(_ref3) {\n          var location = _ref3.location;\n          return /*#__PURE__*/React.createElement(TransitionGroup, {\n            className: \"container-fluid \".concat(location.pathname.replace('/', '')),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(CSSTransition, {\n            key: location.pathname,\n            classNames: \"fade\",\n            timeout: 500,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Switch, {\n            location: location,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Route, {\n            path: \"/\",\n            exact: true,\n            render: function render() {\n              return /*#__PURE__*/React.createElement(AccountDetails, {\n                accountAddress: _this2.state.accountAddress,\n                accountBalance: _this2.state.accountBalance,\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/marketplace\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Marketplace, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/adventure\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(CroskullAdventure, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/tavern\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Tavern, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/merchant\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Merchant, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/analytics\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Analytics, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/raffle\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Raffle, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/bank\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Bank, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 25\n            }\n          }))));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //export default connect(mapStateToProps)(App);\n\nvar formatEther = function formatEther(bn) {\n  return ethers.utils.formatEther(bn);\n};\n\nvar formatUnits = function formatUnits(value, unit) {\n  return ethers.utils.formatUnits(value, unit);\n};\n\nvar getAddress = function getAddress(address) {\n  return ethers.utils.getAddress(address);\n}; //preparing modal","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/App.js"],"names":["React","Component","HashRouter","Route","Switch","Marketplace","AccountDetails","CroskullAdventure","Merchant","Analytics","Navbar","Notifier","Tavern","TransitionGroup","CSSTransition","useDispatch","playSound","ethers","store","Raffle","Bank","BgMusic","ClickSound","provider","contract","stakingContract","ethProvider","App","props","setProvider","_provider","window","ethereum","getNFTData","state","croSkullContract","accountAddress","receivedFilter","filters","Transfer","transferedFilter","inStakeFilter","Stake","queryFilter","receivedEvents","transferedEvents","getTokensIds","inStakeTokens","received","transfered","map","event","topics","decode","data","tokenId","toString","console","log","final","forEach","nTrasfer","push","filter","x","includes","setState","croSkulls","croSkullsStaked","setMetaData","length","traits","traitsTypes","boyLength","cryptoboy","iBoy","metaData","traitsLength","attributes","trait","iTraits","trait_type","value","type","replace","uniqueType","existType","i","undefined","unique","existValue","handleStatusNFTFilter","ev","newMarketplaceView","croSkull","forSale","currentOwner","marketplaceView","handleFilterBar","activeFilters","split","newFilters","exist","newView","filterValid","traitValid","forTrait","handleOrderChange","numToEth","order","sort","a","b","parseInt","price","reverse","subscribe","blockchain","getState","activeNFTStatus","bgSound","Audio","loop","volume","play","clickSound","document","addEventListener","currentTime","location","pathname","accountBalance","formatEther","bn","utils","formatUnits","unit","getAddress","address"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport Marketplace from \"./components/Marketplace/Marketplace\";\r\nimport AccountDetails from \"./components/AccountDetails/AccountDetails\";\r\nimport CroskullAdventure from \"./components/CroskullAdventure/CroskullAdventure\";\r\nimport Merchant from \"./components/Merchant/Merchant\";\r\nimport Analytics from \"./components/Analytics/Analytics\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Notifier from \"./components/Notifier/Notifier\";\r\nimport Tavern from \"./components/Tavern/Tavern\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { playSound } from \"./redux/data/dataActions\";\r\nimport { ethers } from 'ethers';\r\nimport store from \"./redux/store\";\r\nimport Raffle from \"./components/Raffle/Raffle\";\r\nimport Bank from \"./components/Bank/Bank\";\r\nimport BgMusic from \"./utils/bg-music.mp3\";\r\nimport ClickSound from \"./sounds/click-sound.mp3\"\r\nimport \"./App.css\";\r\n\r\nlet provider, contract, stakingContract, ethProvider;\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blockchain: 0,\r\n      //reward©\r\n\r\n      traits: [],\r\n      traitsTypes: [],\r\n      order: 'ASC',\r\n      marketplaceView: [],\r\n      activeFilters: [],\r\n      activeNFTStatus: 'all',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.subscribe()\r\n    let bgSound = new Audio( BgMusic )\r\n    bgSound.loop = true\r\n    bgSound.volume = 0.1\r\n    bgSound.play()\r\n    let clickSound = new Audio(ClickSound)\r\n    clickSound.volume = 0.1\r\n    document.addEventListener('click', () => {\r\n      clickSound.currentTime = 0\r\n      clickSound.play()\r\n    })\r\n  }\r\n\r\n  setProvider = (_provider = false) => {\r\n    if (_provider) {\r\n      provider = _provider;\r\n    } else if (!provider) {\r\n      provider = window.ethereum\r\n    }\r\n  }\r\n\r\n\r\n  getNFTData = async () => {\r\n    let { croSkullContract, stakingContract, accountAddress } = this.state\r\n    let receivedFilter = croSkullContract.filters.Transfer(null, accountAddress)\r\n    let transferedFilter = croSkullContract.filters.Transfer(accountAddress)\r\n    let inStakeFilter = stakingContract.filters.Stake(accountAddress)\r\n\r\n    let receivedEvents = await croSkullContract.queryFilter(receivedFilter)\r\n    let transferedEvents = await croSkullContract.queryFilter(transferedFilter)\r\n\r\n    let inStakeTokens = await stakingContract.getTokensIds()\r\n\r\n    let received = [];\r\n    let transfered = [];\r\n    receivedEvents.map(event => {\r\n      let topics = event.decode(event.data, event.topics)\r\n      let tokenId = topics.tokenId.toString()\r\n      console.log(tokenId)\r\n      //if( ! received.includes(tokenId) )\r\n      if (received[tokenId]) {\r\n        received[tokenId]++\r\n      } else {\r\n        received[tokenId] = 1\r\n      }\r\n    })\r\n    transferedEvents.map(event => {\r\n      let topics = event.decode(event.data, event.topics)\r\n      let tokenId = topics.tokenId.toString()\r\n      if (transfered[tokenId]) {\r\n        transfered[tokenId]++\r\n      } else {\r\n        transfered[tokenId] = 1\r\n      }\r\n    })\r\n    let final = []\r\n    received.forEach((nTrasfer, tokenId) => {\r\n      if (nTrasfer > transfered[tokenId] || nTrasfer && !transfered[tokenId]) {\r\n        final.push(tokenId)\r\n      }\r\n    })\r\n    //let sfiltred = received.filter( x => ! transfered.includes(x))\r\n    final = final.filter(x => !inStakeTokens.includes(x))\r\n    this.setState({\r\n      croSkulls: final,\r\n      croSkullsStaked: inStakeTokens\r\n    })\r\n  }\r\n\r\n   setMetaData = async () => {\r\n    const { croSkulls } = this.state\r\n    if (croSkulls.length !== 0) {\r\n      let traits = []\r\n      let traitsTypes = []\r\n      if (croSkulls.length.length !== 0) {\r\n        let boyLength = croSkulls.length\r\n        croSkulls.forEach((cryptoboy, iBoy) => { //loop cryptoboy\r\n          if (cryptoboy.metaData) {\r\n            let traitsLength = cryptoboy.metaData.attributes.length\r\n            cryptoboy.metaData.attributes.forEach((trait, iTraits) => { // loop tratti\r\n\r\n              let { trait_type, value } = trait\r\n              let type = trait_type.replace(' ', '-')\r\n              let uniqueType = true\r\n\r\n              traitsTypes.forEach((existType, i) => {\r\n                if (existType === type)\r\n                  uniqueType = false\r\n              })\r\n\r\n              if (uniqueType)\r\n                traitsTypes.push(type)\r\n\r\n              if (traits[type] === undefined)\r\n                traits[type] = []\r\n\r\n              let unique = true\r\n              traits[type].forEach(existValue => {\r\n                if (existValue === value)\r\n                  unique = false\r\n              })\r\n\r\n              if (unique)\r\n                traits[type].push(value)\r\n\r\n\r\n\r\n              if (boyLength === (iBoy + 1) && traitsLength === (iTraits + 1)) {\r\n                this.setState({ traits });\r\n                this.setState({ traitsTypes });\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n      console.log('traits:'+this.state.traits)\r\n      console.log('traitsType:'+this.state.traitsTypes)\r\n    }\r\n  };\r\n\r\n  handleStatusNFTFilter = (ev) => {\r\n    let { croSkulls, accountAddress } = this.state;\r\n    let value = ev.value\r\n    let newMarketplaceView = [];\r\n    switch (value) {\r\n      case 'all':\r\n        newMarketplaceView = croSkulls\r\n        break;\r\n      case 'inSale':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (croSkull.forSale)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n      case 'notInSale':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (!croSkull.forSale)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n      case 'owned':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (croSkull.currentOwner === accountAddress)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n    }\r\n    this.setState({ marketplaceView: newMarketplaceView })\r\n\r\n\r\n  }\r\n\r\n  handleFilterBar = (ev) => {\r\n    const { croSkulls, activeFilters } = this.state;\r\n    let value = ev.value.split('_')\r\n\r\n    let trait = value[0]\r\n\r\n    value = value[1].replace('-', ' ')\r\n\r\n    let newFilters = activeFilters\r\n    if (!newFilters.length > 0) {\r\n      newFilters.push({ trait_type: trait, value: value })\r\n    } else {\r\n      let exist = false\r\n      newFilters.forEach((filter, i) => { //controllo i filtri attivi\r\n        if (exist) return; //se esiste già esco\r\n        if (filter.trait_type === trait) { // tipo tratto uguale \r\n          if (filter.value != value) { // valore tratto diverso \r\n\r\n            newFilters[i] = { trait_type: trait, value: value }\r\n            exist = true\r\n          }\r\n          if (filter.value === value) { // valoe tratto uguale\r\n            exist = true\r\n          }\r\n        }\r\n      })\r\n      if (!exist)\r\n        newFilters.push({ trait_type: trait, value: value })\r\n    }\r\n\r\n\r\n    let newView = [];\r\n    croSkulls.map((croSkull, i) => { //crypto boy 1\r\n      if (croSkull.metaData) {\r\n        let filterValid = true\r\n        newFilters.forEach(filter => { //filtro 1\r\n          if (!filterValid) return\r\n          let traitValid = false\r\n          croSkull.metaData.attributes.forEach(forTrait => { // tratto 1\r\n            if (traitValid) return\r\n\r\n            if ((forTrait.trait_type === filter.trait_type) && (forTrait.value === filter.value) || (filter.value === 'none')) { //tratto valido\r\n              traitValid = true\r\n              return\r\n            }\r\n          })\r\n          filterValid = traitValid\r\n        })\r\n        if (filterValid)\r\n          newView.push(croSkull) // aggiungo il tratto\r\n      }\r\n    })\r\n\r\n\r\n    this.setState({ marketplaceView: newView })\r\n    this.setState({ activeFilters: newFilters })\r\n  }\r\n\r\n  handleOrderChange = (ev = null) => {\r\n\r\n    const { numToEth } = this\r\n    let order = ev != null ? ev.value : this.state.order\r\n    const { marketplaceView } = this.state;\r\n    if (order === 'ASC') {\r\n      marketplaceView.sort((a, b) => {\r\n        a = parseInt(numToEth(a.price))\r\n        b = parseInt(numToEth(b.price))\r\n        return (a - b)\r\n      })\r\n    } else {\r\n      marketplaceView.sort((a, b) => {\r\n        a = parseInt(numToEth(a.price))\r\n        b = parseInt(numToEth(b.price))\r\n        return (a - b)\r\n      }).reverse()\r\n    }\r\n    this.setState({ order })\r\n  }\r\n\r\n  subscribe = () => {\r\n    store.subscribe(() => {\r\n      this.setState({\r\n        blockchain: store.getState().blockchain\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    this.setMetaData;\r\n    return (\r\n      <div className=\"main\">\r\n        <Notifier data={store.getState().data} />\r\n        {(\r\n          <>\r\n            <HashRouter\r\n              basename=\"/\">\r\n              <Navbar />\r\n              <Route\r\n                render={({ location }) => (\r\n                  <TransitionGroup className={`container-fluid ${location.pathname.replace('/', '')}`}>\r\n                    <CSSTransition\r\n                      key={location.pathname}\r\n                      classNames=\"fade\"\r\n                      timeout={500}\r\n                    >\r\n                      <Switch\r\n                        location={location}\r\n                      >\r\n                        <Route\r\n                          path=\"/\"\r\n                          exact\r\n                          render={() => (\r\n                            <AccountDetails\r\n                              accountAddress={this.state.accountAddress}\r\n                              accountBalance={this.state.accountBalance}\r\n                            />\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/marketplace\"\r\n                          render={() => (\r\n                            <Marketplace></Marketplace>\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/adventure\"\r\n                          render={() => (\r\n                            <CroskullAdventure></CroskullAdventure>\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/tavern\"\r\n                          render={() => (\r\n                            <Tavern />\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/merchant\"\r\n                          render={() => (\r\n                            <Merchant />\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/analytics\"\r\n                          render={() => (\r\n                            <Analytics />\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/raffle\"\r\n                          render={() => (\r\n                            <Raffle />\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/bank\"\r\n                          render={() => (\r\n                            <Bank />\r\n                          )}\r\n                        />\r\n                      </Switch>\r\n                    </CSSTransition>\r\n                  </TransitionGroup>\r\n                )} />\r\n            </HashRouter>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default connect(mapStateToProps)(App);\r\n\r\n\r\nconst formatEther = bn => ethers.utils.formatEther(bn)\r\nconst formatUnits = (value, unit) => ethers.utils.formatUnits(value, unit)\r\nconst getAddress = address => ethers.utils.getAddress(address)\r\n//preparing modal\r\n"]},"metadata":{},"sourceType":"module"}