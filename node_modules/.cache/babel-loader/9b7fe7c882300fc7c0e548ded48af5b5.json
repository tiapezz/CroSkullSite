{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar normaliseInput = require('ipfs-core-utils/src/pins/normalise-input');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          _value3,\n          path,\n          recursive,\n          metadata,\n          res,\n          _iteratorNormalCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          _value2,\n          pin,\n          _iterator3,\n          _step3,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput(source));\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 73;\n                break;\n              }\n\n              _value3 = _value, path = _value3.path, recursive = _value3.recursive, metadata = _value3.metadata;\n              _context.next = 16;\n              return _awaitAsyncGenerator(api.post('pin/add', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({}, options, {\n                  arg: path,\n                  recursive: recursive,\n                  metadata: metadata ? JSON.stringify(metadata) : undefined,\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 16:\n              res = _context.sent;\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context.prev = 19;\n              _iterator2 = _asyncIterator(res.ndjson());\n\n            case 21:\n              _context.next = 23;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 23:\n              _step2 = _context.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context.next = 27;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 27:\n              _value2 = _context.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context.next = 54;\n                break;\n              }\n\n              pin = _value2;\n\n              if (!pin.Pins) {\n                _context.next = 49;\n                break;\n              }\n\n              // non-streaming response\n              _iterator3 = _createForOfIteratorHelper(pin.Pins);\n              _context.prev = 32;\n\n              _iterator3.s();\n\n            case 34:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 40;\n                break;\n              }\n\n              cid = _step3.value;\n              _context.next = 38;\n              return new CID(cid);\n\n            case 38:\n              _context.next = 34;\n              break;\n\n            case 40:\n              _context.next = 45;\n              break;\n\n            case 42:\n              _context.prev = 42;\n              _context.t0 = _context[\"catch\"](32);\n\n              _iterator3.e(_context.t0);\n\n            case 45:\n              _context.prev = 45;\n\n              _iterator3.f();\n\n              return _context.finish(45);\n\n            case 48:\n              return _context.abrupt(\"continue\", 51);\n\n            case 49:\n              _context.next = 51;\n              return new CID(pin);\n\n            case 51:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 21;\n              break;\n\n            case 54:\n              _context.next = 60;\n              break;\n\n            case 56:\n              _context.prev = 56;\n              _context.t1 = _context[\"catch\"](19);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 60:\n              _context.prev = 60;\n              _context.prev = 61;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context.next = 65;\n                break;\n              }\n\n              _context.next = 65;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 65:\n              _context.prev = 65;\n\n              if (!_didIteratorError2) {\n                _context.next = 68;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 68:\n              return _context.finish(65);\n\n            case 69:\n              return _context.finish(60);\n\n            case 70:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 73:\n              _context.next = 79;\n              break;\n\n            case 75:\n              _context.prev = 75;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n\n            case 79:\n              _context.prev = 79;\n              _context.prev = 80;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 84;\n                break;\n              }\n\n              _context.next = 84;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 84:\n              _context.prev = 84;\n\n              if (!_didIteratorError) {\n                _context.next = 87;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 87:\n              return _context.finish(84);\n\n            case 88:\n              return _context.finish(79);\n\n            case 89:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 75, 79, 89], [19, 56, 60, 70], [32, 42, 45, 48], [61,, 65, 69], [80,, 84, 88]]);\n    }));\n\n    function addAll(_x) {\n      return _addAll.apply(this, arguments);\n    }\n\n    return addAll;\n  }();\n});","map":null,"metadata":{},"sourceType":"script"}