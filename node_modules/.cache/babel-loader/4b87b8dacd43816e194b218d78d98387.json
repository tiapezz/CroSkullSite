{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupAuthExtension = void 0;\n\nvar query_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/query\");\n\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\n\nvar utils_1 = require(\"./utils\");\n\nfunction setupAuthExtension(base) {\n  var rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    auth: {\n      account: function () {\n        var _account = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n          var _yield$queryService$A, account;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Account({\n                    address: address\n                  });\n\n                case 2:\n                  _yield$queryService$A = _context.sent;\n                  account = _yield$queryService$A.account;\n                  return _context.abrupt(\"return\", account !== null && account !== void 0 ? account : null);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function account(_x) {\n          return _account.apply(this, arguments);\n        }\n\n        return account;\n      }(),\n      verified: {\n        account: function () {\n          var _account2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n            var key, responseData;\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L29-L32\n                    key = Uint8Array.from([0x01].concat(_toConsumableArray(utils_1.toAccAddress(address))));\n                    _context2.next = 3;\n                    return base.queryVerified(\"acc\", key);\n\n                  case 3:\n                    responseData = _context2.sent;\n\n                    if (!(responseData.length === 0)) {\n                      _context2.next = 6;\n                      break;\n                    }\n\n                    return _context2.abrupt(\"return\", null);\n\n                  case 6:\n                    return _context2.abrupt(\"return\", any_1.Any.decode(responseData));\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function account(_x2) {\n            return _account2.apply(this, arguments);\n          }\n\n          return account;\n        }()\n      }\n    }\n  };\n}\n\nexports.setupAuthExtension = setupAuthExtension;","map":null,"metadata":{},"sourceType":"script"}