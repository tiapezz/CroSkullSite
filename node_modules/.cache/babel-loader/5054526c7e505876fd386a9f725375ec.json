{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n// constants\nimport { ethers } from 'ethers'; // log\n\nimport CroSkullsAmbassador from \"../../abis/CroSkullsAmbassador.json\";\nimport CroSkulls from \"../../abis/CroSkulls.json\";\nimport StakingArtifacts from \"../../abis/croSkullStaking.json\";\nimport Grave from \"../../abis/Grave.json\";\nimport Description from \"../../abis/nftDescription.json\";\nimport BluePotion from \"../../abis/CroSkullsBluePotions.json\";\nimport RedPotion from \"../../abis/CroSkullsRedPotions.json\";\nimport PetEggs from \"../../abis/petEggs.json\";\nimport Souls from \"../../abis/Souls.json\";\nimport Raffle from \"../../abis/SkullsRaffle.json\";\nimport Bank from \"../../abis/SkullsBank.json\";\nimport Farm from \"../../abis/SkullsFarm.json\";\nimport { sendNotification, getSkullsData, cleanData } from \"../data/dataActions\";\nvar chainId = \"0x19\" || \"0x152\"; //testnet - 3\n\nvar networkId = 25; //25 || 5777; //25 production, 338 testnet3, 5777 ganache local env\n\nvar stakingAddress = StakingArtifacts.networks[networkId].address;\nvar graveAddress = Grave.networks[networkId].address;\nvar ContractAddress = CroSkulls.networks[networkId].address; //CroSkulls.networks[networkId].address ||;\n\nvar descriptionAddress = Description.networks[networkId].address;\nvar petEggsAddress = PetEggs.networks[networkId].address;\nvar soulsAddress = Souls.networks[networkId].address;\nvar blueAddress = BluePotion.networks[networkId].address;\nvar redAddress = RedPotion.networks[networkId].address;\nvar raffleAddress = Raffle.networks[networkId].address;\nvar bankAddress = Bank.networks[networkId].address;\nvar farmAddress = Farm.networks[networkId].address;\nvar lpPairAddress = \"0x4672D3D945700cc3BDf4a2b6704e429d567DC52c\";\nvar ebisusAddress = \"0x7a3CdB2364f92369a602CAE81167d0679087e6a3\";\nvar ebisusAbi = [\"function makePurchase(uint256 _id) public payable\"];\nvar lpPairAbi = [\"function balanceOf(address account) public external view returns(uint256)\", \"function approve(address spender, uint256 amount) external returns (bool)\", \"function allowance(address owner, address spender) external view returns (uint256)\", \"function totalSupply() external view returns (uint256)\", \"function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)\"]; //const ContractAddress = CroSkulls.networks[networkId].address;\n\nvar connectRequest = function connectRequest() {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nvar cleanBlockchain = function cleanBlockchain() {\n  return {\n    type: \"CLEAN_BLOCKCHAIN\"\n  };\n};\n\nvar connectSuccess = function connectSuccess(payload) {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar connectFailed = function connectFailed(payload) {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nvar updateAccountRequest = function updateAccountRequest(payload) {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nvar contractNotDetected = function contractNotDetected() {\n  return {\n    type: \"CONTRACT_NOT_DETECTED\"\n  };\n};\n\nvar noAccount = function noAccount() {\n  return {\n    type: \"CONTRACT_NOT_DETECTED\"\n  };\n};\n\nvar requestDisconnect = function requestDisconnect() {\n  return {\n    type: \"DISCONNECT\"\n  };\n};\n\nexport var wishboneError = function wishboneError() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(sendNotification({\n                title: \"Wishbones Error\",\n                message: \"wishbones must be a multiple of 10\",\n                type: \"danger\"\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var disconnect = function disconnect() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(requestDisconnect());\n              dispatch(cleanData());\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var connect = function connect() {\n  var ethProvider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var signer, croSkullsContract, croSkullsStaking, croSkullsGrave, croPotionBlue, croPotionRed, croSkullsFarm, croSkullsDescription, croSkullsPetEggs, croSkullsSouls, croSkullsBank, croRaffle, ebisusMarketplace, lpPair, accounts, accountAddress, accountBalance;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch(connectRequest());\n\n              if (ethProvider) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 4;\n              return ethers.getDefaultProvider('https://gateway.nebkas.ro');\n\n            case 4:\n              ethProvider = _context3.sent;\n              _context3.next = 7;\n              return ethProvider.getNetwork();\n\n            case 7:\n              dispatch(handleProviderChanges(ethProvider));\n\n              if (!(ethProvider.provider.chainId == chainId || ethProvider.provider.chainId == networkId)) {\n                _context3.next = 41;\n                break;\n              }\n\n              signer = ethProvider.getSigner();\n              croSkullsContract = new ethers.Contract(ContractAddress, CroSkulls.abi, signer ? signer : false);\n              croSkullsStaking = new ethers.Contract(stakingAddress, StakingArtifacts.abi, signer ? signer : false);\n              croSkullsGrave = new ethers.Contract(graveAddress, Grave.abi, signer ? signer : false);\n              croPotionBlue = new ethers.Contract(blueAddress, BluePotion.abi, signer ? signer : false);\n              croPotionRed = new ethers.Contract(redAddress, RedPotion.abi, signer ? signer : false);\n              croSkullsFarm = new ethers.Contract(farmAddress, Farm.abi, signer ? signer : false);\n              croSkullsDescription = new ethers.Contract(descriptionAddress, Description.abi, signer ? signer : false);\n              croSkullsPetEggs = new ethers.Contract(petEggsAddress, PetEggs.abi, signer ? signer : false);\n              croSkullsSouls = new ethers.Contract(soulsAddress, Souls.abi, signer ? signer : false);\n              croSkullsBank = new ethers.Contract(bankAddress, Bank.abi, signer ? signer : false);\n              croRaffle = new ethers.Contract(raffleAddress, Raffle.abi, signer ? signer : false);\n              ebisusMarketplace = new ethers.Contract(ebisusAddress, ebisusAbi, signer ? signer : false);\n              lpPair = new ethers.Contract(lpPairAddress, lpPairAbi, signer ? signer : false);\n              _context3.next = 25;\n              return ethProvider.provider.request({\n                method: 'eth_accounts'\n              });\n\n            case 25:\n              accounts = _context3.sent;\n\n              if (!(accounts.length === 0)) {\n                _context3.next = 30;\n                break;\n              }\n\n              dispatch(noAccount());\n              _context3.next = 39;\n              break;\n\n            case 30:\n              accountAddress = accounts[0];\n              dispatch(sendNotification({\n                title: \"Welcome Back\",\n                message: \"\".concat(accountAddress),\n                type: \"default\"\n              }));\n              _context3.next = 34;\n              return ethProvider.getBalance(accountAddress);\n\n            case 34:\n              _context3.next = 36;\n              return _context3.sent.toString();\n\n            case 36:\n              accountBalance = _context3.sent;\n              dispatch(connectSuccess({\n                accountAddress: accountAddress,\n                accountBalance: accountBalance,\n                ethProvider: ethProvider,\n                croSkullsContract: croSkullsContract,\n                croSkullsStaking: croSkullsStaking,\n                croSkullsGrave: croSkullsGrave,\n                croSkullsDescription: croSkullsDescription,\n                croSkullsPetEggs: croSkullsPetEggs,\n                croSkullsSouls: croSkullsSouls,\n                croSkullsBank: croSkullsBank,\n                croPotionBlue: croPotionBlue,\n                croPotionRed: croPotionRed,\n                croSkullsFarm: croSkullsFarm,\n                croRaffle: croRaffle,\n                lpPair: lpPair,\n                ebisusMarketplace: ebisusMarketplace\n              }));\n              dispatch(getSkullsData());\n\n            case 39:\n              _context3.next = 43;\n              break;\n\n            case 41:\n              dispatch(contractNotDetected());\n              ethProvider.provider.request({\n                \"id\": 1,\n                \"jsonrpc\": \"2.0\",\n                \"method\": \"wallet_switchEthereumChain\",\n                \"params\": [{\n                  \"chainId\": chainId\n                }]\n              });\n\n            case 43:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var handleProviderChanges = function handleProviderChanges(ethProvider) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              ethProvider.provider.on('accountsChanged', function (accounts) {\n                dispatch(cleanData());\n                dispatch(connect(ethProvider));\n              });\n              ethProvider.provider.on('chainChanged', function (_chainId) {\n                dispatch(connect(ethProvider));\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/blockchain/blockchainActions.js"],"names":["ethers","CroSkullsAmbassador","CroSkulls","StakingArtifacts","Grave","Description","BluePotion","RedPotion","PetEggs","Souls","Raffle","Bank","Farm","sendNotification","getSkullsData","cleanData","chainId","networkId","stakingAddress","networks","address","graveAddress","ContractAddress","descriptionAddress","petEggsAddress","soulsAddress","blueAddress","redAddress","raffleAddress","bankAddress","farmAddress","lpPairAddress","ebisusAddress","ebisusAbi","lpPairAbi","connectRequest","type","cleanBlockchain","connectSuccess","payload","connectFailed","updateAccountRequest","contractNotDetected","noAccount","requestDisconnect","wishboneError","dispatch","title","message","disconnect","connect","ethProvider","getDefaultProvider","getNetwork","handleProviderChanges","provider","signer","getSigner","croSkullsContract","Contract","abi","croSkullsStaking","croSkullsGrave","croPotionBlue","croPotionRed","croSkullsFarm","croSkullsDescription","croSkullsPetEggs","croSkullsSouls","croSkullsBank","croRaffle","ebisusMarketplace","lpPair","request","method","accounts","length","accountAddress","getBalance","toString","accountBalance","on","_chainId"],"mappings":"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","sourcesContent":["// constants\r\nimport {\r\n    ethers\r\n} from 'ethers';\r\n// log\r\nimport CroSkullsAmbassador from \"../../abis/CroSkullsAmbassador.json\";\r\nimport CroSkulls from \"../../abis/CroSkulls.json\";\r\nimport StakingArtifacts from \"../../abis/croSkullStaking.json\";\r\nimport Grave from \"../../abis/Grave.json\";\r\nimport Description from \"../../abis/nftDescription.json\";\r\nimport BluePotion from \"../../abis/CroSkullsBluePotions.json\";\r\nimport RedPotion from \"../../abis/CroSkullsRedPotions.json\";\r\nimport PetEggs from \"../../abis/petEggs.json\";\r\nimport Souls from \"../../abis/Souls.json\";\r\nimport Raffle from \"../../abis/SkullsRaffle.json\";\r\nimport Bank from \"../../abis/SkullsBank.json\";\r\nimport Farm from \"../../abis/SkullsFarm.json\";\r\nimport {\r\n  sendNotification, getSkullsData, cleanData\r\n} from \"../data/dataActions\";\r\nconst chainId =  \"0x19\" || \"0x152\"; //testnet - 3\r\nconst networkId =  25; //25 || 5777; //25 production, 338 testnet3, 5777 ganache local env\r\nconst stakingAddress = StakingArtifacts.networks[networkId].address;\r\nconst graveAddress = Grave.networks[networkId].address;\r\nconst ContractAddress = CroSkulls.networks[networkId].address //CroSkulls.networks[networkId].address ||;\r\nconst descriptionAddress =  Description.networks[networkId].address;\r\nconst petEggsAddress = PetEggs.networks[networkId].address;\r\nconst soulsAddress = Souls.networks[networkId].address;\r\nconst blueAddress = BluePotion.networks[networkId].address;\r\nconst redAddress = RedPotion.networks[networkId].address;\r\nconst raffleAddress = Raffle.networks[networkId].address;\r\nconst bankAddress = Bank.networks[networkId].address;\r\nconst farmAddress = Farm.networks[networkId].address;\r\nconst lpPairAddress = \"0x4672D3D945700cc3BDf4a2b6704e429d567DC52c\";\r\nconst ebisusAddress = \"0x7a3CdB2364f92369a602CAE81167d0679087e6a3\";\r\n\r\nconst ebisusAbi = [\r\n    \"function makePurchase(uint256 _id) public payable\"\r\n];\r\n\r\nconst lpPairAbi = [\r\n    \"function balanceOf(address account) public external view returns(uint256)\",\r\n    \"function approve(address spender, uint256 amount) external returns (bool)\",\r\n    \"function allowance(address owner, address spender) external view returns (uint256)\",\r\n    \"function totalSupply() external view returns (uint256)\",\r\n    \"function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)\"\r\n];\r\n\r\n//const ContractAddress = CroSkulls.networks[networkId].address;\r\n\r\nconst connectRequest = () => {\r\n    return {\r\n        type: \"CONNECTION_REQUEST\",\r\n    };\r\n};\r\n\r\nconst cleanBlockchain = () => {\r\n    return {\r\n        type: \"CLEAN_BLOCKCHAIN\",\r\n    };\r\n}\r\n\r\nconst connectSuccess = (payload) => {\r\n    return {\r\n        type: \"CONNECTION_SUCCESS\",\r\n        payload: payload,\r\n    };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n    return {\r\n        type: \"CONNECTION_FAILED\",\r\n        payload: payload,\r\n    };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n    return {\r\n        type: \"UPDATE_ACCOUNT\",\r\n        payload: payload,\r\n    }\r\n}\r\n\r\nconst contractNotDetected = () => {\r\n    return {\r\n        type: \"CONTRACT_NOT_DETECTED\"\r\n    }\r\n}\r\n\r\nconst noAccount = () => {\r\n    return {\r\n        type: \"CONTRACT_NOT_DETECTED\"\r\n    }\r\n}\r\n\r\nconst requestDisconnect = () => {\r\n    return {\r\n        type: \"DISCONNECT\"\r\n    }\r\n}\r\n\r\nexport const wishboneError = () => {\r\n   \r\n    return async (dispatch) => {\r\n         dispatch(sendNotification({\r\n        title: `Wishbones Error`,\r\n        message: `wishbones must be a multiple of 10`,\r\n        type: \"danger\"\r\n    }))}\r\n}\r\n\r\nexport const disconnect = () => {\r\n    return async (dispatch) => {\r\n        dispatch(requestDisconnect())\r\n        dispatch(cleanData())\r\n    }\r\n}\r\n\r\nexport const connect = ( ethProvider = false) => {\r\n    return async (dispatch) => {\r\n        dispatch(connectRequest());\r\n        if( ! ethProvider ){\r\n            ethProvider = await ethers.getDefaultProvider('https://gateway.nebkas.ro')\r\n            await ethProvider.getNetwork()\r\n        }\r\n        dispatch(handleProviderChanges(ethProvider))\r\n        if (ethProvider.provider.chainId == chainId || ethProvider.provider.chainId == networkId ) {\r\n            let signer = ethProvider.getSigner()\r\n            let croSkullsContract = new ethers.Contract(ContractAddress, CroSkulls.abi, signer ? signer : false )\r\n            let croSkullsStaking = new ethers.Contract(stakingAddress, StakingArtifacts.abi, signer ? signer : false )\r\n            let croSkullsGrave = new ethers.Contract(graveAddress, Grave.abi, signer ? signer : false )\r\n            let croPotionBlue = new ethers.Contract(blueAddress, BluePotion.abi, signer ? signer : false )\r\n            let croPotionRed = new ethers.Contract(redAddress, RedPotion.abi, signer ? signer : false )\r\n            let croSkullsFarm = new ethers.Contract(farmAddress, Farm.abi, signer ? signer : false )\r\n            let croSkullsDescription = new ethers.Contract(descriptionAddress, Description.abi, signer ? signer : false )\r\n            let croSkullsPetEggs = new ethers.Contract(petEggsAddress, PetEggs.abi, signer ? signer : false )\r\n            let croSkullsSouls = new ethers.Contract(soulsAddress, Souls.abi, signer ? signer : false )\r\n            let croSkullsBank = new ethers.Contract(bankAddress, Bank.abi, signer ? signer : false )\r\n            let croRaffle = new ethers.Contract(raffleAddress, Raffle.abi, signer ? signer : false )\r\n            let ebisusMarketplace = new ethers.Contract(ebisusAddress, ebisusAbi, signer ? signer : false )\r\n            let lpPair = new ethers.Contract(lpPairAddress, lpPairAbi, signer ? signer : false )\r\n            let accounts = await ethProvider.provider.request({\r\n                method: 'eth_accounts',\r\n            })\r\n            \r\n            if (accounts.length === 0) {\r\n                dispatch(noAccount())\r\n            } else {\r\n                let accountAddress = accounts[0]\r\n                dispatch(sendNotification({\r\n                    title: `Welcome Back`,\r\n                    message: `${accountAddress}`,\r\n                    type: \"default\"\r\n                }))\r\n                let accountBalance = await ( await ethProvider.getBalance(accountAddress)).toString();\r\n                dispatch(connectSuccess({\r\n                    accountAddress,\r\n                    accountBalance,\r\n                    ethProvider,\r\n                    croSkullsContract,\r\n                    croSkullsStaking,\r\n                    croSkullsGrave,\r\n                    croSkullsDescription,\r\n                    croSkullsPetEggs,\r\n                    croSkullsSouls,\r\n                    croSkullsBank,\r\n                    croPotionBlue,\r\n                    croPotionRed,\r\n                    croSkullsFarm,\r\n                    croRaffle,\r\n                    lpPair,\r\n                    ebisusMarketplace\r\n                }))\r\n                dispatch(getSkullsData())\r\n            }\r\n            //await this.loadBlockchainData()\r\n        } else {\r\n            dispatch(contractNotDetected())\r\n            ethProvider.provider.request({\r\n                \"id\": 1,\r\n                \"jsonrpc\": \"2.0\",\r\n                \"method\": \"wallet_switchEthereumChain\",\r\n                \"params\": [\r\n                  {\r\n                    \"chainId\": chainId,\r\n                  }\r\n                ]\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const handleProviderChanges = (ethProvider) => {\r\n    return async (dispatch) => {\r\n        ethProvider.provider.on( 'accountsChanged', (accounts) => {\r\n            dispatch(cleanData())\r\n            dispatch(connect(ethProvider))\r\n        })\r\n        ethProvider.provider.on( 'chainChanged', (_chainId) => {\r\n                dispatch(connect(ethProvider))\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}