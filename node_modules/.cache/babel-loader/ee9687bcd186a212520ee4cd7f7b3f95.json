{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar multihash = require('multihashes');\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n/**\n * @param {import(\"./lib/core\").ClientOptions} options\n */\n\n\nfunction ipfsClient() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    shutdown: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  };\n}\n\nObject.assign(ipfsClient, {\n  CID: CID,\n  multiaddr: multiaddr,\n  multibase: multibase,\n  multicodec: multicodec,\n  multihash: multihash,\n  globSource: globSource,\n  urlSource: urlSource\n});\nmodule.exports = ipfsClient;\n/**\n * @typedef {Object} HttpOptions\n * @property {Headers | Record<string, string>} [headers] - An object or [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance that can be used to set custom HTTP headers. Note that this option can also be [configured globally](#custom-headers) via the constructor options.\n * @property {URLSearchParams | Record<string, string>} [searchParams] - An object or [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) instance that can be used to add additional query parameters to the query string sent with each request.\n *\n * @typedef {import('ipfs-core/src/utils').AbortOptions} AbortOptions}\n */\n\n/**\n * This is an utility type that can be used to derive type of the HTTP Client\n * API from the Core API. It takes type of the API factory (from ipfs-core),\n * derives API from it's return type and extends it last `options` parameter\n * with `HttpOptions`.\n *\n * This can be used to avoid (re)typing API interface when implementing it in\n * http client e.g you can annotate `ipfs.addAll` implementation with\n *\n * `@type {Implements<typeof import('ipfs-core/src/components/add-all')>}`\n *\n * **Caution**: This supports APIs with up to four parameters and last optional\n * `options` parameter, anything else will result to `never` type.\n *\n * @template {(config:any) => any} APIFactory\n * @typedef {APIWithExtraOptions<ReturnType<APIFactory>, HttpOptions>} Implements\n */\n\n/**\n * @template Key\n * @template {(config:any) => any} APIFactory\n * @typedef {import('./interface').APIMethodWithExtraOptions<ReturnType<APIFactory>, Key, HttpOptions>} ImplementsMethod\n */\n\n/**\n * @template API, Extra\n * @typedef {import('./interface').APIWithExtraOptions<API, Extra>} APIWithExtraOptions\n */","map":null,"metadata":{},"sourceType":"script"}