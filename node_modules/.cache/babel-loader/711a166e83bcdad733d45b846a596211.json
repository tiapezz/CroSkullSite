{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\n\nvar coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\n\nvar utils_2 = require(\"./utils\");\n\nfunction setupBankExtension(base) {\n  var rpc = utils_2.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: function () {\n        var _balance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address, denom) {\n          var _yield$queryService$B, balance;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Balance({\n                    address: address,\n                    denom: denom\n                  });\n\n                case 2:\n                  _yield$queryService$B = _context.sent;\n                  balance = _yield$queryService$B.balance;\n                  utils_1.assert(balance);\n                  return _context.abrupt(\"return\", balance);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function balance(_x, _x2) {\n          return _balance.apply(this, arguments);\n        }\n\n        return balance;\n      }(),\n      allBalances: function () {\n        var _allBalances = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n          var _yield$queryService$A, balances;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return queryService.AllBalances({\n                    address: address\n                  });\n\n                case 2:\n                  _yield$queryService$A = _context2.sent;\n                  balances = _yield$queryService$A.balances;\n                  return _context2.abrupt(\"return\", balances);\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function allBalances(_x3) {\n          return _allBalances.apply(this, arguments);\n        }\n\n        return allBalances;\n      }(),\n      totalSupply: function () {\n        var _totalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          var _yield$queryService$T, supply;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return queryService.TotalSupply({});\n\n                case 2:\n                  _yield$queryService$T = _context3.sent;\n                  supply = _yield$queryService$T.supply;\n                  return _context3.abrupt(\"return\", supply);\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        function totalSupply() {\n          return _totalSupply.apply(this, arguments);\n        }\n\n        return totalSupply;\n      }(),\n      supplyOf: function () {\n        var _supplyOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(denom) {\n          var _yield$queryService$S, amount;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return queryService.SupplyOf({\n                    denom: denom\n                  });\n\n                case 2:\n                  _yield$queryService$S = _context4.sent;\n                  amount = _yield$queryService$S.amount;\n                  utils_1.assert(amount);\n                  return _context4.abrupt(\"return\", amount);\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        function supplyOf(_x4) {\n          return _supplyOf.apply(this, arguments);\n        }\n\n        return supplyOf;\n      }(),\n      verified: {\n        balance: function () {\n          var _balance2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address, denom) {\n            var key, responseData;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    // balance key is a bit tricker, using some prefix stores\n                    // https://github.com/cosmwasm/cosmos-sdk/blob/80f7ff62f79777a487d0c7a53c64b0f7e43c47b9/x/bank/keeper/view.go#L74-L77\n                    // (\"balances\", binAddress, denom)\n                    // it seem like prefix stores just do a dumb concat with the keys (no tricks to avoid overlap)\n                    // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L61-L64\n                    // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L37-L43\n                    key = Uint8Array.from([].concat(_toConsumableArray(encoding_1.toAscii(\"balances\")), _toConsumableArray(utils_2.toAccAddress(address)), _toConsumableArray(encoding_1.toAscii(denom))));\n                    _context5.next = 3;\n                    return base.queryVerified(\"bank\", key);\n\n                  case 3:\n                    responseData = _context5.sent;\n                    return _context5.abrupt(\"return\", responseData.length ? coin_1.Coin.decode(responseData) : null);\n\n                  case 5:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function balance(_x5, _x6) {\n            return _balance2.apply(this, arguments);\n          }\n\n          return balance;\n        }()\n      }\n    }\n  };\n}\n\nexports.setupBankExtension = setupBankExtension;","map":null,"metadata":{},"sourceType":"script"}