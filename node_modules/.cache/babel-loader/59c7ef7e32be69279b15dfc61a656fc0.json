{"ast":null,"code":"var _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Mutex = require('async-mutex').Mutex;\n\nvar _require = require('json-rpc-engine'),\n    createAsyncMiddleware = _require.createAsyncMiddleware;\n\nvar createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nvar LogFilter = require('./log-filter.js');\n\nvar BlockFilter = require('./block-filter.js');\n\nvar TxFilter = require('./tx-filter.js');\n\nvar _require2 = require('./hexUtils'),\n    intToHex = _require2.intToHex,\n    hexToInt = _require2.hexToInt;\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n      provider = _ref.provider;\n  // create filter collection\n  var filterIndex = 0;\n  var filters = {}; // create update mutex\n\n  var mutex = new Mutex();\n  var waitForFree = mutexMiddlewareWrapper({\n    mutex: mutex\n  });\n  var middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  var filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n      var oldBlock, newBlock, releaseLock;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n\n              if (!(filters.length === 0)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.next = 5;\n              return mutex.acquire();\n\n            case 5:\n              releaseLock = _context2.sent;\n              _context2.prev = 6;\n              _context2.next = 9;\n              return Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filter) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return filter.update({\n                            oldBlock: oldBlock,\n                            newBlock: newBlock\n                          });\n\n                        case 3:\n                          _context.next = 8;\n                          break;\n\n                        case 5:\n                          _context.prev = 5;\n                          _context.t0 = _context[\"catch\"](0);\n                          // handle each error individually so filter update errors don't affect other filters\n                          console.error(_context.t0);\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[0, 5]]);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()));\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](6);\n              // log error so we don't skip the releaseLock\n              console.error(_context2.t0);\n\n            case 14:\n              // unlock update reads\n              releaseLock();\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 11]]);\n    }));\n\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = function () {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              filter = new LogFilter({\n                provider: provider,\n                params: params\n              });\n              _context3.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context3.sent;\n              return _context3.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _newLogFilter.apply(this, arguments);\n  }\n\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filter = new BlockFilter({\n                provider: provider\n              });\n              _context4.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context4.sent;\n              return _context4.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _newBlockFilter.apply(this, arguments);\n  }\n\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n\n\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              filter = new TxFilter({\n                provider: provider\n              });\n              _context5.next = 3;\n              return installFilter(filter);\n\n            case 3:\n              filterIndex = _context5.sent;\n              return _context5.abrupt(\"return\", filter);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n\n              if (filter) {\n                _context6.next = 4;\n                break;\n              }\n\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n\n            case 4:\n              results = filter.getChangesAndClear();\n              return _context6.abrupt(\"return\", results);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getFilterChanges.apply(this, arguments);\n  }\n\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n\n\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(filterIndexHex) {\n      var filterIndex, filter;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n\n              if (filter) {\n                _context7.next = 4;\n                break;\n              }\n\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n\n            case 4:\n              // only return results for log filters\n              if (filter.type === 'log') {\n                results = filter.getAllResults();\n              } else {\n                results = [];\n              }\n\n              return _context7.abrupt(\"return\", results);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _getFilterLogs.apply(this, arguments);\n  }\n\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n\n\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filterIndexHex) {\n      var filterIndex, filter, result;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              // check filter exists\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n              result = Boolean(filter); // uninstall filter\n\n              if (!result) {\n                _context8.next = 6;\n                break;\n              }\n\n              _context8.next = 6;\n              return uninstallFilter(filterIndex);\n\n            case 6:\n              return _context8.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n\n  function _installFilter() {\n    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filter) {\n      var prevFilterCount, currentBlock, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length; // install filter\n\n              _context9.next = 3;\n              return blockTracker.getLatestBlock();\n\n            case 3:\n              currentBlock = _context9.sent;\n              _context9.next = 6;\n              return filter.initialize({\n                currentBlock: currentBlock\n              });\n\n            case 6:\n              filterIndex++;\n              filters[filterIndex] = filter;\n              filter.id = filterIndex;\n              filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n              return _context9.abrupt(\"return\", filterIndex);\n\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _installFilter.apply(this, arguments);\n  }\n\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filterIndex) {\n      var prevFilterCount, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              delete filters[filterIndex]; // update block tracker subs\n\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _uninstallFilter.apply(this, arguments);\n  }\n\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var prevFilterCount;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              filters = {}; // update block tracker subs\n\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: 0\n              });\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n\n  function updateBlockTrackerSubs(_ref5) {\n    var prevFilterCount = _ref5.prevFilterCount,\n        newFilterCount = _ref5.newFilterCount;\n\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n    var filter,\n        result,\n        _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return createFilterFn.apply(void 0, _args12);\n\n          case 2:\n            filter = _context12.sent;\n            result = intToHex(filter.id);\n            return _context12.abrupt(\"return\", result);\n\n          case 5:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return asyncFn.apply(null, req.params);\n\n            case 2:\n              result = _context13.sent;\n              res.result = result;\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\n\nfunction mutexMiddlewareWrapper(_ref8) {\n  var mutex = _ref8.mutex;\n  return function (middleware) {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(req, res, next, end) {\n        var releaseLock;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return mutex.acquire();\n\n              case 2:\n                releaseLock = _context14.sent;\n                releaseLock();\n                middleware(req, res, next, end);\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\n\nfunction objValues(obj, fn) {\n  var values = [];\n\n  for (var key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"script"}