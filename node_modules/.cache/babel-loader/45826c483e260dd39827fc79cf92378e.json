{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\n\nvar channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\n\nvar query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\n\nvar query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\n\nvar query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\n\nvar tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar utils_1 = require(\"./utils\");\n\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(\"Unexpected client state type: \".concat(clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl));\n  }\n\n  return tendermint_1.ClientState.decode(clientState.value);\n}\n\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(\"Unexpected client state type: \".concat(clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl));\n  }\n\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\n\nfunction setupIbcExtension(base) {\n  var rpc = utils_1.createProtobufRpcClient(base); // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n\n  var channelQueryService = new query_2.QueryClientImpl(rpc);\n  var clientQueryService = new query_3.QueryClientImpl(rpc);\n  var connectionQueryService = new query_4.QueryClientImpl(rpc);\n  var transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: function () {\n          var _channel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(portId, channelId) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", channelQueryService.Channel({\n                      portId: portId,\n                      channelId: channelId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function channel(_x, _x2) {\n            return _channel.apply(this, arguments);\n          }\n\n          return channel;\n        }(),\n        channels: function () {\n          var _channels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", channelQueryService.Channels({\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function channels(_x3) {\n            return _channels.apply(this, arguments);\n          }\n\n          return channels;\n        }(),\n        allChannels: function () {\n          var _allChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            var _a, channels, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    channels = [];\n\n                  case 1:\n                    _context3.next = 3;\n                    return channelQueryService.Channels({\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context3.sent;\n                    channels.push.apply(channels, _toConsumableArray(response.channels));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context3.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context3.abrupt(\"return\", {\n                      channels: channels,\n                      height: response.height\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          function allChannels() {\n            return _allChannels.apply(this, arguments);\n          }\n\n          return allChannels;\n        }(),\n        connectionChannels: function () {\n          var _connectionChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    return _context4.abrupt(\"return\", channelQueryService.ConnectionChannels({\n                      connection: connection,\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          function connectionChannels(_x4, _x5) {\n            return _connectionChannels.apply(this, arguments);\n          }\n\n          return connectionChannels;\n        }(),\n        allConnectionChannels: function () {\n          var _allConnectionChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection) {\n            var _a, channels, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    channels = [];\n\n                  case 1:\n                    _context5.next = 3;\n                    return channelQueryService.ConnectionChannels({\n                      connection: connection,\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context5.sent;\n                    channels.push.apply(channels, _toConsumableArray(response.channels));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context5.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context5.abrupt(\"return\", {\n                      channels: channels,\n                      height: response.height\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function allConnectionChannels(_x6) {\n            return _allConnectionChannels.apply(this, arguments);\n          }\n\n          return allConnectionChannels;\n        }(),\n        clientState: function () {\n          var _clientState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(portId, channelId) {\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    return _context6.abrupt(\"return\", channelQueryService.ChannelClientState({\n                      portId: portId,\n                      channelId: channelId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function clientState(_x7, _x8) {\n            return _clientState.apply(this, arguments);\n          }\n\n          return clientState;\n        }(),\n        consensusState: function () {\n          var _consensusState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(portId, channelId, revisionNumber, revisionHeight) {\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    return _context7.abrupt(\"return\", channelQueryService.ChannelConsensusState({\n                      portId: portId,\n                      channelId: channelId,\n                      revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n                      revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          function consensusState(_x9, _x10, _x11, _x12) {\n            return _consensusState.apply(this, arguments);\n          }\n\n          return consensusState;\n        }(),\n        packetCommitment: function () {\n          var _packetCommitment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(portId, channelId, sequence) {\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    return _context8.abrupt(\"return\", channelQueryService.PacketCommitment({\n                      portId: portId,\n                      channelId: channelId,\n                      sequence: sequence\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          function packetCommitment(_x13, _x14, _x15) {\n            return _packetCommitment.apply(this, arguments);\n          }\n\n          return packetCommitment;\n        }(),\n        packetCommitments: function () {\n          var _packetCommitments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(portId, channelId, paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    return _context9.abrupt(\"return\", channelQueryService.PacketCommitments({\n                      channelId: channelId,\n                      portId: portId,\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee9);\n          }));\n\n          function packetCommitments(_x16, _x17, _x18) {\n            return _packetCommitments.apply(this, arguments);\n          }\n\n          return packetCommitments;\n        }(),\n        allPacketCommitments: function () {\n          var _allPacketCommitments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(portId, channelId) {\n            var _a, commitments, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    commitments = [];\n\n                  case 1:\n                    _context10.next = 3;\n                    return channelQueryService.PacketCommitments({\n                      channelId: channelId,\n                      portId: portId,\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context10.sent;\n                    commitments.push.apply(commitments, _toConsumableArray(response.commitments));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context10.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context10.abrupt(\"return\", {\n                      commitments: commitments,\n                      height: response.height\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _callee10);\n          }));\n\n          function allPacketCommitments(_x19, _x20) {\n            return _allPacketCommitments.apply(this, arguments);\n          }\n\n          return allPacketCommitments;\n        }(),\n        packetReceipt: function () {\n          var _packetReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(portId, channelId, sequence) {\n            return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    return _context11.abrupt(\"return\", channelQueryService.PacketReceipt({\n                      portId: portId,\n                      channelId: channelId,\n                      sequence: long_1.default.fromNumber(sequence, true)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee11);\n          }));\n\n          function packetReceipt(_x21, _x22, _x23) {\n            return _packetReceipt.apply(this, arguments);\n          }\n\n          return packetReceipt;\n        }(),\n        packetAcknowledgement: function () {\n          var _packetAcknowledgement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(portId, channelId, sequence) {\n            return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    return _context12.abrupt(\"return\", channelQueryService.PacketAcknowledgement({\n                      portId: portId,\n                      channelId: channelId,\n                      sequence: long_1.default.fromNumber(sequence, true)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _callee12);\n          }));\n\n          function packetAcknowledgement(_x24, _x25, _x26) {\n            return _packetAcknowledgement.apply(this, arguments);\n          }\n\n          return packetAcknowledgement;\n        }(),\n        packetAcknowledgements: function () {\n          var _packetAcknowledgements = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(portId, channelId, paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    return _context13.abrupt(\"return\", channelQueryService.PacketAcknowledgements({\n                      portId: portId,\n                      channelId: channelId,\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _callee13);\n          }));\n\n          function packetAcknowledgements(_x27, _x28, _x29) {\n            return _packetAcknowledgements.apply(this, arguments);\n          }\n\n          return packetAcknowledgements;\n        }(),\n        allPacketAcknowledgements: function () {\n          var _allPacketAcknowledgements = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(portId, channelId) {\n            var _a, acknowledgements, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    acknowledgements = [];\n\n                  case 1:\n                    _context14.next = 3;\n                    return channelQueryService.PacketAcknowledgements({\n                      channelId: channelId,\n                      portId: portId,\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context14.sent;\n                    acknowledgements.push.apply(acknowledgements, _toConsumableArray(response.acknowledgements));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context14.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context14.abrupt(\"return\", {\n                      acknowledgements: acknowledgements,\n                      height: response.height\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _callee14);\n          }));\n\n          function allPacketAcknowledgements(_x30, _x31) {\n            return _allPacketAcknowledgements.apply(this, arguments);\n          }\n\n          return allPacketAcknowledgements;\n        }(),\n        unreceivedPackets: function () {\n          var _unreceivedPackets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(portId, channelId, packetCommitmentSequences) {\n            return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    return _context15.abrupt(\"return\", channelQueryService.UnreceivedPackets({\n                      portId: portId,\n                      channelId: channelId,\n                      packetCommitmentSequences: packetCommitmentSequences.map(function (s) {\n                        return long_1.default.fromNumber(s, true);\n                      })\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _callee15);\n          }));\n\n          function unreceivedPackets(_x32, _x33, _x34) {\n            return _unreceivedPackets.apply(this, arguments);\n          }\n\n          return unreceivedPackets;\n        }(),\n        unreceivedAcks: function () {\n          var _unreceivedAcks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(portId, channelId, packetAckSequences) {\n            return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    return _context16.abrupt(\"return\", channelQueryService.UnreceivedAcks({\n                      portId: portId,\n                      channelId: channelId,\n                      packetAckSequences: packetAckSequences.map(function (s) {\n                        return long_1.default.fromNumber(s, true);\n                      })\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _callee16);\n          }));\n\n          function unreceivedAcks(_x35, _x36, _x37) {\n            return _unreceivedAcks.apply(this, arguments);\n          }\n\n          return unreceivedAcks;\n        }(),\n        nextSequenceReceive: function () {\n          var _nextSequenceReceive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(portId, channelId) {\n            return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    return _context17.abrupt(\"return\", channelQueryService.NextSequenceReceive({\n                      portId: portId,\n                      channelId: channelId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _callee17);\n          }));\n\n          function nextSequenceReceive(_x38, _x39) {\n            return _nextSequenceReceive.apply(this, arguments);\n          }\n\n          return nextSequenceReceive;\n        }()\n      },\n      client: {\n        state: function () {\n          var _state = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(clientId) {\n            return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    return _context18.abrupt(\"return\", clientQueryService.ClientState({\n                      clientId: clientId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            }, _callee18);\n          }));\n\n          function state(_x40) {\n            return _state.apply(this, arguments);\n          }\n\n          return state;\n        }(),\n        states: function () {\n          var _states = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n              while (1) {\n                switch (_context19.prev = _context19.next) {\n                  case 0:\n                    return _context19.abrupt(\"return\", clientQueryService.ClientStates({\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }\n            }, _callee19);\n          }));\n\n          function states(_x41) {\n            return _states.apply(this, arguments);\n          }\n\n          return states;\n        }(),\n        allStates: function () {\n          var _allStates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n            var _a, clientStates, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    clientStates = [];\n\n                  case 1:\n                    _context20.next = 3;\n                    return clientQueryService.ClientStates({\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context20.sent;\n                    clientStates.push.apply(clientStates, _toConsumableArray(response.clientStates));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context20.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context20.abrupt(\"return\", {\n                      clientStates: clientStates\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, _callee20);\n          }));\n\n          function allStates() {\n            return _allStates.apply(this, arguments);\n          }\n\n          return allStates;\n        }(),\n        consensusState: function () {\n          var _consensusState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(clientId, consensusHeight) {\n            return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n              while (1) {\n                switch (_context21.prev = _context21.next) {\n                  case 0:\n                    return _context21.abrupt(\"return\", clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n                      clientId: clientId,\n                      revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n                      latestHeight: consensusHeight === undefined\n                    })));\n\n                  case 1:\n                  case \"end\":\n                    return _context21.stop();\n                }\n              }\n            }, _callee21);\n          }));\n\n          function consensusState(_x42, _x43) {\n            return _consensusState2.apply(this, arguments);\n          }\n\n          return consensusState;\n        }(),\n        consensusStates: function () {\n          var _consensusStates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(clientId, paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n              while (1) {\n                switch (_context22.prev = _context22.next) {\n                  case 0:\n                    return _context22.abrupt(\"return\", clientQueryService.ConsensusStates({\n                      clientId: clientId,\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context22.stop();\n                }\n              }\n            }, _callee22);\n          }));\n\n          function consensusStates(_x44, _x45) {\n            return _consensusStates.apply(this, arguments);\n          }\n\n          return consensusStates;\n        }(),\n        allConsensusStates: function () {\n          var _allConsensusStates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(clientId) {\n            var _a, consensusStates, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n              while (1) {\n                switch (_context23.prev = _context23.next) {\n                  case 0:\n                    consensusStates = [];\n\n                  case 1:\n                    _context23.next = 3;\n                    return clientQueryService.ConsensusStates({\n                      clientId: clientId,\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context23.sent;\n                    consensusStates.push.apply(consensusStates, _toConsumableArray(response.consensusStates));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context23.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context23.abrupt(\"return\", {\n                      consensusStates: consensusStates\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context23.stop();\n                }\n              }\n            }, _callee23);\n          }));\n\n          function allConsensusStates(_x46) {\n            return _allConsensusStates.apply(this, arguments);\n          }\n\n          return allConsensusStates;\n        }(),\n        params: function () {\n          var _params = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n            return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n              while (1) {\n                switch (_context24.prev = _context24.next) {\n                  case 0:\n                    return _context24.abrupt(\"return\", clientQueryService.ClientParams({}));\n\n                  case 1:\n                  case \"end\":\n                    return _context24.stop();\n                }\n              }\n            }, _callee24);\n          }));\n\n          function params() {\n            return _params.apply(this, arguments);\n          }\n\n          return params;\n        }(),\n        stateTm: function () {\n          var _stateTm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(clientId) {\n            var response;\n            return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n              while (1) {\n                switch (_context25.prev = _context25.next) {\n                  case 0:\n                    _context25.next = 2;\n                    return clientQueryService.ClientState({\n                      clientId: clientId\n                    });\n\n                  case 2:\n                    response = _context25.sent;\n                    return _context25.abrupt(\"return\", decodeTendermintClientStateAny(response.clientState));\n\n                  case 4:\n                  case \"end\":\n                    return _context25.stop();\n                }\n              }\n            }, _callee25);\n          }));\n\n          function stateTm(_x47) {\n            return _stateTm.apply(this, arguments);\n          }\n\n          return stateTm;\n        }(),\n        statesTm: function () {\n          var _statesTm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(paginationKey) {\n            var _yield$clientQuerySer, clientStates;\n\n            return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n              while (1) {\n                switch (_context26.prev = _context26.next) {\n                  case 0:\n                    _context26.next = 2;\n                    return clientQueryService.ClientStates({\n                      pagination: utils_1.createPagination(paginationKey)\n                    });\n\n                  case 2:\n                    _yield$clientQuerySer = _context26.sent;\n                    clientStates = _yield$clientQuerySer.clientStates;\n                    return _context26.abrupt(\"return\", clientStates.map(function (_ref) {\n                      var clientState = _ref.clientState;\n                      return decodeTendermintClientStateAny(clientState);\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context26.stop();\n                }\n              }\n            }, _callee26);\n          }));\n\n          function statesTm(_x48) {\n            return _statesTm.apply(this, arguments);\n          }\n\n          return statesTm;\n        }(),\n        allStatesTm: function () {\n          var _allStatesTm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n            var _a, clientStates, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n              while (1) {\n                switch (_context27.prev = _context27.next) {\n                  case 0:\n                    clientStates = [];\n\n                  case 1:\n                    _context27.next = 3;\n                    return clientQueryService.ClientStates({\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context27.sent;\n                    clientStates.push.apply(clientStates, _toConsumableArray(response.clientStates));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context27.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context27.abrupt(\"return\", clientStates.map(function (_ref2) {\n                      var clientState = _ref2.clientState;\n                      return decodeTendermintClientStateAny(clientState);\n                    }));\n\n                  case 8:\n                  case \"end\":\n                    return _context27.stop();\n                }\n              }\n            }, _callee27);\n          }));\n\n          function allStatesTm() {\n            return _allStatesTm.apply(this, arguments);\n          }\n\n          return allStatesTm;\n        }(),\n        consensusStateTm: function () {\n          var _consensusStateTm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(clientId, consensusHeight) {\n            var response;\n            return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n              while (1) {\n                switch (_context28.prev = _context28.next) {\n                  case 0:\n                    _context28.next = 2;\n                    return clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n                      clientId: clientId,\n                      revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n                      revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n                      latestHeight: consensusHeight === undefined\n                    }));\n\n                  case 2:\n                    response = _context28.sent;\n                    return _context28.abrupt(\"return\", decodeTendermintConsensusStateAny(response.consensusState));\n\n                  case 4:\n                  case \"end\":\n                    return _context28.stop();\n                }\n              }\n            }, _callee28);\n          }));\n\n          function consensusStateTm(_x49, _x50) {\n            return _consensusStateTm.apply(this, arguments);\n          }\n\n          return consensusStateTm;\n        }()\n      },\n      connection: {\n        connection: function () {\n          var _connection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(connectionId) {\n            return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n              while (1) {\n                switch (_context29.prev = _context29.next) {\n                  case 0:\n                    return _context29.abrupt(\"return\", connectionQueryService.Connection({\n                      connectionId: connectionId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context29.stop();\n                }\n              }\n            }, _callee29);\n          }));\n\n          function connection(_x51) {\n            return _connection.apply(this, arguments);\n          }\n\n          return connection;\n        }(),\n        connections: function () {\n          var _connections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n              while (1) {\n                switch (_context30.prev = _context30.next) {\n                  case 0:\n                    return _context30.abrupt(\"return\", connectionQueryService.Connections({\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context30.stop();\n                }\n              }\n            }, _callee30);\n          }));\n\n          function connections(_x52) {\n            return _connections.apply(this, arguments);\n          }\n\n          return connections;\n        }(),\n        allConnections: function () {\n          var _allConnections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n            var _a, connections, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n              while (1) {\n                switch (_context31.prev = _context31.next) {\n                  case 0:\n                    connections = [];\n\n                  case 1:\n                    _context31.next = 3;\n                    return connectionQueryService.Connections({\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context31.sent;\n                    connections.push.apply(connections, _toConsumableArray(response.connections));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context31.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context31.abrupt(\"return\", {\n                      connections: connections,\n                      height: response.height\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context31.stop();\n                }\n              }\n            }, _callee31);\n          }));\n\n          function allConnections() {\n            return _allConnections.apply(this, arguments);\n          }\n\n          return allConnections;\n        }(),\n        clientConnections: function () {\n          var _clientConnections = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(clientId) {\n            return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n              while (1) {\n                switch (_context32.prev = _context32.next) {\n                  case 0:\n                    return _context32.abrupt(\"return\", connectionQueryService.ClientConnections({\n                      clientId: clientId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context32.stop();\n                }\n              }\n            }, _callee32);\n          }));\n\n          function clientConnections(_x53) {\n            return _clientConnections.apply(this, arguments);\n          }\n\n          return clientConnections;\n        }(),\n        clientState: function () {\n          var _clientState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(connectionId) {\n            return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n              while (1) {\n                switch (_context33.prev = _context33.next) {\n                  case 0:\n                    return _context33.abrupt(\"return\", connectionQueryService.ConnectionClientState({\n                      connectionId: connectionId\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context33.stop();\n                }\n              }\n            }, _callee33);\n          }));\n\n          function clientState(_x54) {\n            return _clientState2.apply(this, arguments);\n          }\n\n          return clientState;\n        }(),\n        consensusState: function () {\n          var _consensusState3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(connectionId, revisionHeight) {\n            return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n              while (1) {\n                switch (_context34.prev = _context34.next) {\n                  case 0:\n                    return _context34.abrupt(\"return\", connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n                      connectionId: connectionId,\n                      revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n                    })));\n\n                  case 1:\n                  case \"end\":\n                    return _context34.stop();\n                }\n              }\n            }, _callee34);\n          }));\n\n          function consensusState(_x55, _x56) {\n            return _consensusState3.apply(this, arguments);\n          }\n\n          return consensusState;\n        }()\n      },\n      transfer: {\n        denomTrace: function () {\n          var _denomTrace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(hash) {\n            return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n              while (1) {\n                switch (_context35.prev = _context35.next) {\n                  case 0:\n                    return _context35.abrupt(\"return\", transferQueryService.DenomTrace({\n                      hash: hash\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context35.stop();\n                }\n              }\n            }, _callee35);\n          }));\n\n          function denomTrace(_x57) {\n            return _denomTrace.apply(this, arguments);\n          }\n\n          return denomTrace;\n        }(),\n        denomTraces: function () {\n          var _denomTraces = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(paginationKey) {\n            return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n              while (1) {\n                switch (_context36.prev = _context36.next) {\n                  case 0:\n                    return _context36.abrupt(\"return\", transferQueryService.DenomTraces({\n                      pagination: utils_1.createPagination(paginationKey)\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context36.stop();\n                }\n              }\n            }, _callee36);\n          }));\n\n          function denomTraces(_x58) {\n            return _denomTraces.apply(this, arguments);\n          }\n\n          return denomTraces;\n        }(),\n        allDenomTraces: function () {\n          var _allDenomTraces = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n            var _a, denomTraces, response, key;\n\n            return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n              while (1) {\n                switch (_context37.prev = _context37.next) {\n                  case 0:\n                    denomTraces = [];\n\n                  case 1:\n                    _context37.next = 3;\n                    return transferQueryService.DenomTraces({\n                      pagination: utils_1.createPagination(key)\n                    });\n\n                  case 3:\n                    response = _context37.sent;\n                    denomTraces.push.apply(denomTraces, _toConsumableArray(response.denomTraces));\n                    key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n\n                  case 6:\n                    if (key && key.length) {\n                      _context37.next = 1;\n                      break;\n                    }\n\n                  case 7:\n                    return _context37.abrupt(\"return\", {\n                      denomTraces: denomTraces\n                    });\n\n                  case 8:\n                  case \"end\":\n                    return _context37.stop();\n                }\n              }\n            }, _callee37);\n          }));\n\n          function allDenomTraces() {\n            return _allDenomTraces.apply(this, arguments);\n          }\n\n          return allDenomTraces;\n        }(),\n        params: function () {\n          var _params2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n            return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n              while (1) {\n                switch (_context38.prev = _context38.next) {\n                  case 0:\n                    return _context38.abrupt(\"return\", transferQueryService.Params({}));\n\n                  case 1:\n                  case \"end\":\n                    return _context38.stop();\n                }\n              }\n            }, _callee38);\n          }));\n\n          function params() {\n            return _params2.apply(this, arguments);\n          }\n\n          return params;\n        }()\n      },\n      verified: {\n        channel: {\n          channel: function () {\n            var _channel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(portId, channelId) {\n              var key, responseData;\n              return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n                while (1) {\n                  switch (_context39.prev = _context39.next) {\n                    case 0:\n                      // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n                      // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n                      key = encoding_1.toAscii(\"channelEnds/ports/\".concat(portId, \"/channels/\").concat(channelId));\n                      _context39.next = 3;\n                      return base.queryVerified(\"ibc\", key);\n\n                    case 3:\n                      responseData = _context39.sent;\n                      return _context39.abrupt(\"return\", responseData.length ? channel_1.Channel.decode(responseData) : null);\n\n                    case 5:\n                    case \"end\":\n                      return _context39.stop();\n                  }\n                }\n              }, _callee39);\n            }));\n\n            function channel(_x59, _x60) {\n              return _channel2.apply(this, arguments);\n            }\n\n            return channel;\n          }(),\n          packetCommitment: function () {\n            var _packetCommitment2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(portId, channelId, sequence) {\n              var key, responseData;\n              return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n                while (1) {\n                  switch (_context40.prev = _context40.next) {\n                    case 0:\n                      // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n                      // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n                      key = encoding_1.toAscii(\"commitments/ports/\".concat(portId, \"/channels/\").concat(channelId, \"/packets/\").concat(sequence));\n                      _context40.next = 3;\n                      return base.queryVerified(\"ibc\", key);\n\n                    case 3:\n                      responseData = _context40.sent;\n                      return _context40.abrupt(\"return\", responseData);\n\n                    case 5:\n                    case \"end\":\n                      return _context40.stop();\n                  }\n                }\n              }, _callee40);\n            }));\n\n            function packetCommitment(_x61, _x62, _x63) {\n              return _packetCommitment2.apply(this, arguments);\n            }\n\n            return packetCommitment;\n          }(),\n          packetAcknowledgement: function () {\n            var _packetAcknowledgement2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(portId, channelId, sequence) {\n              var key, responseData;\n              return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n                while (1) {\n                  switch (_context41.prev = _context41.next) {\n                    case 0:\n                      // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n                      // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n                      key = encoding_1.toAscii(\"acks/ports/\".concat(portId, \"/channels/\").concat(channelId, \"/acknowledgements/\").concat(sequence));\n                      _context41.next = 3;\n                      return base.queryVerified(\"ibc\", key);\n\n                    case 3:\n                      responseData = _context41.sent;\n                      return _context41.abrupt(\"return\", responseData);\n\n                    case 5:\n                    case \"end\":\n                      return _context41.stop();\n                  }\n                }\n              }, _callee41);\n            }));\n\n            function packetAcknowledgement(_x64, _x65, _x66) {\n              return _packetAcknowledgement2.apply(this, arguments);\n            }\n\n            return packetAcknowledgement;\n          }(),\n          nextSequenceReceive: function () {\n            var _nextSequenceReceive2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(portId, channelId) {\n              var key, responseData;\n              return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n                while (1) {\n                  switch (_context42.prev = _context42.next) {\n                    case 0:\n                      // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n                      // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n                      key = encoding_1.toAscii(\"seqAcks/ports/\".concat(portId, \"/channels/\").concat(channelId, \"/nextSequenceAck\"));\n                      _context42.next = 3;\n                      return base.queryVerified(\"ibc\", key);\n\n                    case 3:\n                      responseData = _context42.sent;\n                      return _context42.abrupt(\"return\", responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null);\n\n                    case 5:\n                    case \"end\":\n                      return _context42.stop();\n                  }\n                }\n              }, _callee42);\n            }));\n\n            function nextSequenceReceive(_x67, _x68) {\n              return _nextSequenceReceive2.apply(this, arguments);\n            }\n\n            return nextSequenceReceive;\n          }()\n        }\n      }\n    }\n  };\n}\n\nexports.setupIbcExtension = setupIbcExtension;","map":null,"metadata":{},"sourceType":"script"}