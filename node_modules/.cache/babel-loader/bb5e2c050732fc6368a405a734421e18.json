{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar crypto_1 = require(\"@cosmjs/crypto\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\n\n\nvar DirectSecp256k1Wallet = /*#__PURE__*/function () {\n  function DirectSecp256k1Wallet(privkey, pubkey, prefix) {\n    _classCallCheck(this, DirectSecp256k1Wallet);\n\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n\n\n  _createClass(DirectSecp256k1Wallet, [{\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", [{\n                  algo: \"secp256k1\",\n                  address: this.address,\n                  pubkey: this.pubkey\n                }]);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n  }, {\n    key: \"signDirect\",\n    value: function () {\n      var _signDirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address, signDoc) {\n        var signBytes, hashedMessage, signature, signatureBytes, stdSignature;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                signBytes = signing_1.makeSignBytes(signDoc);\n\n                if (!(address !== this.address)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Address \".concat(address, \" not found in wallet\"));\n\n              case 3:\n                hashedMessage = crypto_1.sha256(signBytes);\n                _context2.next = 6;\n                return crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n\n              case 6:\n                signature = _context2.sent;\n                signatureBytes = new Uint8Array([].concat(_toConsumableArray(signature.r(32)), _toConsumableArray(signature.s(32))));\n                stdSignature = amino_1.encodeSecp256k1Signature(this.pubkey, signatureBytes);\n                return _context2.abrupt(\"return\", {\n                  signed: signDoc,\n                  signature: stdSignature\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function signDirect(_x, _x2) {\n        return _signDirect.apply(this, arguments);\n      }\n\n      return signDirect;\n    }()\n  }, {\n    key: \"address\",\n    get: function get() {\n      return encoding_1.Bech32.encode(this.prefix, amino_1.rawSecp256k1PubkeyToRawAddress(this.pubkey));\n    }\n  }], [{\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(privkey) {\n        var prefix,\n            uncompressed,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                prefix = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : \"cosmos\";\n                _context3.next = 3;\n                return crypto_1.Secp256k1.makeKeypair(privkey);\n\n              case 3:\n                uncompressed = _context3.sent.pubkey;\n                return _context3.abrupt(\"return\", new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromKey(_x3) {\n        return _fromKey.apply(this, arguments);\n      }\n\n      return fromKey;\n    }()\n  }]);\n\n  return DirectSecp256k1Wallet;\n}();\n\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":null,"metadata":{},"sourceType":"script"}