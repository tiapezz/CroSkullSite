{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bip39 = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar bip39 = __importStar(require(\"bip39\"));\n\nvar englishmnemonic_1 = require(\"./englishmnemonic\");\n\nvar Bip39 = /*#__PURE__*/function () {\n  function Bip39() {\n    _classCallCheck(this, Bip39);\n  }\n\n  _createClass(Bip39, null, [{\n    key: \"encode\",\n\n    /**\n     * Encodes raw entropy of length 16, 20, 24, 28 or 32 bytes as an English mnemonic between 12 and 24 words.\n     *\n     * | Entropy            | Words |\n     * |--------------------|-------|\n     * | 128 bit (16 bytes) |    12 |\n     * | 160 bit (20 bytes) |    15 |\n     * | 192 bit (24 bytes) |    18 |\n     * | 224 bit (28 bytes) |    21 |\n     * | 256 bit (32 bytes) |    24 |\n     *\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic\n     * @param entropy The entropy to be encoded. This must be cryptographically secure.\n     */\n    value: function encode(entropy) {\n      var allowedEntropyLengths = [16, 20, 24, 28, 32];\n\n      if (allowedEntropyLengths.indexOf(entropy.length) === -1) {\n        throw new Error(\"invalid input length\");\n      }\n\n      return new englishmnemonic_1.EnglishMnemonic(bip39.entropyToMnemonic(encoding_1.toHex(entropy)));\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(mnemonic) {\n      return encoding_1.fromHex(bip39.mnemonicToEntropy(mnemonic.toString()));\n    }\n  }, {\n    key: \"mnemonicToSeed\",\n    value: function () {\n      var _mnemonicToSeed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(mnemonic, password) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = Uint8Array;\n                _context.next = 3;\n                return bip39.mnemonicToSeed(mnemonic.toString(), password);\n\n              case 3:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", new _context.t0(_context.t1));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function mnemonicToSeed(_x, _x2) {\n        return _mnemonicToSeed.apply(this, arguments);\n      }\n\n      return mnemonicToSeed;\n    }()\n  }]);\n\n  return Bip39;\n}();\n\nexports.Bip39 = Bip39;","map":null,"metadata":{},"sourceType":"script"}