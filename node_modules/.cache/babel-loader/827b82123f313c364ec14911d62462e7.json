{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { ethers } from 'ethers';\nimport store from \"./redux/store\";\nimport Home from \"./components/Home/Home\";\nimport Graveyard from \"./components/Graveyard/Graveyard\";\nimport ClickSound from \"./sounds/click-sound.mp3\";\nimport \"./App.css\";\nvar provider, contract, stakingContract, ethProvider;\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.setProvider = function () {\n      var _provider = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (_provider) {\n        provider = _provider;\n      } else if (!provider) {\n        provider = window.ethereum;\n      }\n    };\n\n    _this.getNFTData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$state, croSkullContract, stakingContract, accountAddress, receivedFilter, transferedFilter, inStakeFilter, receivedEvents, transferedEvents, inStakeTokens, received, transfered, final;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, croSkullContract = _this$state.croSkullContract, stakingContract = _this$state.stakingContract, accountAddress = _this$state.accountAddress;\n              receivedFilter = croSkullContract.filters.Transfer(null, accountAddress);\n              transferedFilter = croSkullContract.filters.Transfer(accountAddress);\n              inStakeFilter = stakingContract.filters.Stake(accountAddress);\n              _context.next = 6;\n              return croSkullContract.queryFilter(receivedFilter);\n\n            case 6:\n              receivedEvents = _context.sent;\n              _context.next = 9;\n              return croSkullContract.queryFilter(transferedFilter);\n\n            case 9:\n              transferedEvents = _context.sent;\n              _context.next = 12;\n              return stakingContract.getTokensIds();\n\n            case 12:\n              inStakeTokens = _context.sent;\n              received = [];\n              transfered = [];\n              receivedEvents.map(function (event) {\n                var topics = event.decode(event.data, event.topics);\n                var tokenId = topics.tokenId.toString();\n                console.log(tokenId); //if( ! received.includes(tokenId) )\n\n                if (received[tokenId]) {\n                  received[tokenId]++;\n                } else {\n                  received[tokenId] = 1;\n                }\n              });\n              transferedEvents.map(function (event) {\n                var topics = event.decode(event.data, event.topics);\n                var tokenId = topics.tokenId.toString();\n\n                if (transfered[tokenId]) {\n                  transfered[tokenId]++;\n                } else {\n                  transfered[tokenId] = 1;\n                }\n              });\n              final = [];\n              received.forEach(function (nTrasfer, tokenId) {\n                if (nTrasfer > transfered[tokenId] || nTrasfer && !transfered[tokenId]) {\n                  final.push(tokenId);\n                }\n              }); //let sfiltred = received.filter( x => ! transfered.includes(x))\n\n              final = final.filter(function (x) {\n                return !inStakeTokens.includes(x);\n              });\n\n              _this.setState({\n                croSkulls: final,\n                croSkullsStaked: inStakeTokens\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.setMetaData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.handleStatusNFTFilter = function (ev) {\n      var _this$state2 = _this.state,\n          croSkulls = _this$state2.croSkulls,\n          accountAddress = _this$state2.accountAddress;\n      var value = ev.value;\n      var newMarketplaceView = [];\n\n      switch (value) {\n        case 'all':\n          newMarketplaceView = croSkulls;\n          break;\n\n        case 'inSale':\n          croSkulls.forEach(function (croSkull, i) {\n            if (croSkull.forSale) newMarketplaceView.push(croSkull);\n          });\n          break;\n\n        case 'notInSale':\n          croSkulls.forEach(function (croSkull, i) {\n            if (!croSkull.forSale) newMarketplaceView.push(croSkull);\n          });\n          break;\n\n        case 'owned':\n          croSkulls.forEach(function (croSkull, i) {\n            if (croSkull.currentOwner === accountAddress) newMarketplaceView.push(croSkull);\n          });\n          break;\n      }\n\n      _this.setState({\n        marketplaceView: newMarketplaceView\n      });\n    };\n\n    _this.handleFilterBar = function (ev) {\n      var _this$state3 = _this.state,\n          croSkulls = _this$state3.croSkulls,\n          activeFilters = _this$state3.activeFilters;\n      var value = ev.value.split('_');\n      var trait = value[0];\n      value = value[1].replace('-', ' ');\n      var newFilters = activeFilters;\n\n      if (!newFilters.length > 0) {\n        newFilters.push({\n          trait_type: trait,\n          value: value\n        });\n      } else {\n        var exist = false;\n        newFilters.forEach(function (filter, i) {\n          //controllo i filtri attivi\n          if (exist) return; //se esiste giÃ  esco\n\n          if (filter.trait_type === trait) {\n            // tipo tratto uguale \n            if (filter.value != value) {\n              // valore tratto diverso \n              newFilters[i] = {\n                trait_type: trait,\n                value: value\n              };\n              exist = true;\n            }\n\n            if (filter.value === value) {\n              // valoe tratto uguale\n              exist = true;\n            }\n          }\n        });\n        if (!exist) newFilters.push({\n          trait_type: trait,\n          value: value\n        });\n      }\n\n      var newView = [];\n      croSkulls.map(function (croSkull, i) {\n        //crypto boy 1\n        if (croSkull.metaData) {\n          var filterValid = true;\n          newFilters.forEach(function (filter) {\n            //filtro 1\n            if (!filterValid) return;\n            var traitValid = false;\n            croSkull.metaData.attributes.forEach(function (forTrait) {\n              // tratto 1\n              if (traitValid) return;\n\n              if (forTrait.trait_type === filter.trait_type && forTrait.value === filter.value || filter.value === 'none') {\n                //tratto valido\n                traitValid = true;\n                return;\n              }\n            });\n            filterValid = traitValid;\n          });\n          if (filterValid) newView.push(croSkull); // aggiungo il tratto\n        }\n      });\n\n      _this.setState({\n        marketplaceView: newView\n      });\n\n      _this.setState({\n        activeFilters: newFilters\n      });\n    };\n\n    _this.handleOrderChange = function () {\n      var ev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          numToEth = _assertThisInitialize.numToEth;\n\n      var order = ev != null ? ev.value : _this.state.order;\n      var marketplaceView = _this.state.marketplaceView;\n\n      if (order === 'ASC') {\n        marketplaceView.sort(function (a, b) {\n          a = parseInt(numToEth(a.price));\n          b = parseInt(numToEth(b.price));\n          return a - b;\n        });\n      } else {\n        marketplaceView.sort(function (a, b) {\n          a = parseInt(numToEth(a.price));\n          b = parseInt(numToEth(b.price));\n          return a - b;\n        }).reverse();\n      }\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.subscribe = function () {\n      store.subscribe(function () {\n        _this.setState({\n          blockchain: store.getState().blockchain\n        });\n      });\n    };\n\n    _this.state = {\n      blockchain: 0,\n      //rewardÂ©\n      traits: [],\n      traitsTypes: [],\n      order: 'ASC',\n      marketplaceView: [],\n      activeFilters: [],\n      activeNFTStatus: 'all'\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n      var clickSound = new Audio(ClickSound);\n      clickSound.volume = 0.1;\n      document.addEventListener('click', function () {\n        clickSound.currentTime = 0;\n        clickSound.play();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HashRouter, {\n        basename: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        render: function render(_ref3) {\n          var location = _ref3.location;\n          return /*#__PURE__*/React.createElement(TransitionGroup, {\n            className: \"container-fluid \".concat(location.pathname.replace('/', '')),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(CSSTransition, {\n            key: location.pathname,\n            classNames: \"fade\",\n            timeout: 500,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Switch, {\n            location: location,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Route, {\n            path: \"/\",\n            exact: true,\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Home, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/graveyard\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Graveyard, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 25\n            }\n          }))));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //export default connect(mapStateToProps)(App);\n\nvar formatEther = function formatEther(bn) {\n  return ethers.utils.formatEther(bn);\n};\n\nvar formatUnits = function formatUnits(value, unit) {\n  return ethers.utils.formatUnits(value, unit);\n};\n\nvar getAddress = function getAddress(address) {\n  return ethers.utils.getAddress(address);\n}; //preparing modal","map":{"version":3,"sources":["F:/Mattia/Visual studio/ProjectCroSkull/CroSkullSite/src/App.js"],"names":["React","Component","HashRouter","Route","Switch","TransitionGroup","CSSTransition","ethers","store","Home","Graveyard","ClickSound","provider","contract","stakingContract","ethProvider","App","props","setProvider","_provider","window","ethereum","getNFTData","state","croSkullContract","accountAddress","receivedFilter","filters","Transfer","transferedFilter","inStakeFilter","Stake","queryFilter","receivedEvents","transferedEvents","getTokensIds","inStakeTokens","received","transfered","map","event","topics","decode","data","tokenId","toString","console","log","final","forEach","nTrasfer","push","filter","x","includes","setState","croSkulls","croSkullsStaked","setMetaData","handleStatusNFTFilter","ev","value","newMarketplaceView","croSkull","i","forSale","currentOwner","marketplaceView","handleFilterBar","activeFilters","split","trait","replace","newFilters","length","trait_type","exist","newView","metaData","filterValid","traitValid","attributes","forTrait","handleOrderChange","numToEth","order","sort","a","b","parseInt","price","reverse","subscribe","blockchain","getState","traits","traitsTypes","activeNFTStatus","clickSound","Audio","volume","document","addEventListener","currentTime","play","location","pathname","formatEther","bn","utils","formatUnits","unit","getAddress","address"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { ethers } from 'ethers';\r\nimport store from \"./redux/store\";\r\n\r\nimport Home from \"./components/Home/Home\";\r\n\r\nimport Graveyard from \"./components/Graveyard/Graveyard\";\r\nimport ClickSound from \"./sounds/click-sound.mp3\"\r\nimport \"./App.css\";\r\n\r\nlet provider, contract, stakingContract, ethProvider;\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      blockchain: 0,\r\n      //rewardÂ©\r\n\r\n      traits: [],\r\n      traitsTypes: [],\r\n      order: 'ASC',\r\n      marketplaceView: [],\r\n      activeFilters: [],\r\n      activeNFTStatus: 'all',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.subscribe()\r\n    let clickSound = new Audio(ClickSound)\r\n    clickSound.volume = 0.1\r\n    document.addEventListener('click', () => {\r\n      clickSound.currentTime = 0\r\n      clickSound.play()\r\n    })\r\n  }\r\n\r\n  setProvider = (_provider = false) => {\r\n    if (_provider) {\r\n      provider = _provider;\r\n    } else if (!provider) {\r\n      provider = window.ethereum\r\n    }\r\n  }\r\n\r\n\r\n  getNFTData = async () => {\r\n    let { croSkullContract, stakingContract, accountAddress } = this.state\r\n    let receivedFilter = croSkullContract.filters.Transfer(null, accountAddress)\r\n    let transferedFilter = croSkullContract.filters.Transfer(accountAddress)\r\n    let inStakeFilter = stakingContract.filters.Stake(accountAddress)\r\n\r\n    let receivedEvents = await croSkullContract.queryFilter(receivedFilter)\r\n    let transferedEvents = await croSkullContract.queryFilter(transferedFilter)\r\n\r\n    let inStakeTokens = await stakingContract.getTokensIds()\r\n\r\n    let received = [];\r\n    let transfered = [];\r\n    receivedEvents.map(event => {\r\n      let topics = event.decode(event.data, event.topics)\r\n      let tokenId = topics.tokenId.toString()\r\n      console.log(tokenId)\r\n      //if( ! received.includes(tokenId) )\r\n      if (received[tokenId]) {\r\n        received[tokenId]++\r\n      } else {\r\n        received[tokenId] = 1\r\n      }\r\n    })\r\n    transferedEvents.map(event => {\r\n      let topics = event.decode(event.data, event.topics)\r\n      let tokenId = topics.tokenId.toString()\r\n      if (transfered[tokenId]) {\r\n        transfered[tokenId]++\r\n      } else {\r\n        transfered[tokenId] = 1\r\n      }\r\n    })\r\n    let final = []\r\n    received.forEach((nTrasfer, tokenId) => {\r\n      if (nTrasfer > transfered[tokenId] || nTrasfer && !transfered[tokenId]) {\r\n        final.push(tokenId)\r\n      }\r\n    })\r\n    //let sfiltred = received.filter( x => ! transfered.includes(x))\r\n    final = final.filter(x => !inStakeTokens.includes(x))\r\n    this.setState({\r\n      croSkulls: final,\r\n      croSkullsStaked: inStakeTokens\r\n    })\r\n  }\r\n\r\n   setMetaData = async () => {\r\n    /*\r\n    const { croSkulls } = this.state\r\n    console.log('qua'+croSkulls)\r\n    if (croSkulls.length !== 0) {\r\n      let traits = []\r\n      let traitsTypes = []\r\n      if (croSkulls.length.length !== 0) {\r\n        let boyLength = croSkulls.length\r\n        croSkulls.forEach((cryptoboy, iBoy) => { //loop cryptoboy\r\n          if (cryptoboy.metaData) {\r\n            let traitsLength = cryptoboy.metaData.attributes.length\r\n            cryptoboy.metaData.attributes.forEach((trait, iTraits) => { // loop tratti\r\n\r\n              let { trait_type, value } = trait\r\n              let type = trait_type.replace(' ', '-')\r\n              let uniqueType = true\r\n\r\n              traitsTypes.forEach((existType, i) => {\r\n                if (existType === type)\r\n                  uniqueType = false\r\n              })\r\n\r\n              if (uniqueType)\r\n                traitsTypes.push(type)\r\n\r\n              if (traits[type] === undefined)\r\n                traits[type] = []\r\n\r\n              let unique = true\r\n              traits[type].forEach(existValue => {\r\n                if (existValue === value)\r\n                  unique = false\r\n              })\r\n\r\n              if (unique)\r\n                traits[type].push(value)\r\n\r\n\r\n\r\n              if (boyLength === (iBoy + 1) && traitsLength === (iTraits + 1)) {\r\n                this.setState({ traits });\r\n                this.setState({ traitsTypes });\r\n              }\r\n            })\r\n          }\r\n        })\r\n      }\r\n      console.log('traits:'+this.state.traits)\r\n      console.log('traitsType:'+this.state.traitsTypes)\r\n    }*/\r\n  };\r\n\r\n  handleStatusNFTFilter = (ev) => {\r\n    let { croSkulls, accountAddress } = this.state;\r\n    let value = ev.value\r\n    let newMarketplaceView = [];\r\n    switch (value) {\r\n      case 'all':\r\n        newMarketplaceView = croSkulls\r\n        break;\r\n      case 'inSale':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (croSkull.forSale)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n      case 'notInSale':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (!croSkull.forSale)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n      case 'owned':\r\n        croSkulls.forEach((croSkull, i) => {\r\n          if (croSkull.currentOwner === accountAddress)\r\n            newMarketplaceView.push(croSkull)\r\n        })\r\n        break;\r\n    }\r\n    this.setState({ marketplaceView: newMarketplaceView })\r\n\r\n\r\n  }\r\n\r\n  handleFilterBar = (ev) => {\r\n    const { croSkulls, activeFilters } = this.state;\r\n    let value = ev.value.split('_')\r\n\r\n    let trait = value[0]\r\n\r\n    value = value[1].replace('-', ' ')\r\n\r\n    let newFilters = activeFilters\r\n    if (!newFilters.length > 0) {\r\n      newFilters.push({ trait_type: trait, value: value })\r\n    } else {\r\n      let exist = false\r\n      newFilters.forEach((filter, i) => { //controllo i filtri attivi\r\n        if (exist) return; //se esiste giÃ  esco\r\n        if (filter.trait_type === trait) { // tipo tratto uguale \r\n          if (filter.value != value) { // valore tratto diverso \r\n\r\n            newFilters[i] = { trait_type: trait, value: value }\r\n            exist = true\r\n          }\r\n          if (filter.value === value) { // valoe tratto uguale\r\n            exist = true\r\n          }\r\n        }\r\n      })\r\n      if (!exist)\r\n        newFilters.push({ trait_type: trait, value: value })\r\n    }\r\n\r\n\r\n    let newView = [];\r\n    croSkulls.map((croSkull, i) => { //crypto boy 1\r\n      if (croSkull.metaData) {\r\n        let filterValid = true\r\n        newFilters.forEach(filter => { //filtro 1\r\n          if (!filterValid) return\r\n          let traitValid = false\r\n          croSkull.metaData.attributes.forEach(forTrait => { // tratto 1\r\n            if (traitValid) return\r\n\r\n            if ((forTrait.trait_type === filter.trait_type) && (forTrait.value === filter.value) || (filter.value === 'none')) { //tratto valido\r\n              traitValid = true\r\n              return\r\n            }\r\n          })\r\n          filterValid = traitValid\r\n        })\r\n        if (filterValid)\r\n          newView.push(croSkull) // aggiungo il tratto\r\n      }\r\n    })\r\n\r\n\r\n    this.setState({ marketplaceView: newView })\r\n    this.setState({ activeFilters: newFilters })\r\n  }\r\n\r\n  handleOrderChange = (ev = null) => {\r\n\r\n    const { numToEth } = this\r\n    let order = ev != null ? ev.value : this.state.order\r\n    const { marketplaceView } = this.state;\r\n    if (order === 'ASC') {\r\n      marketplaceView.sort((a, b) => {\r\n        a = parseInt(numToEth(a.price))\r\n        b = parseInt(numToEth(b.price))\r\n        return (a - b)\r\n      })\r\n    } else {\r\n      marketplaceView.sort((a, b) => {\r\n        a = parseInt(numToEth(a.price))\r\n        b = parseInt(numToEth(b.price))\r\n        return (a - b)\r\n      }).reverse()\r\n    }\r\n    this.setState({ order })\r\n  }\r\n\r\n  subscribe = () => {\r\n    store.subscribe(() => {\r\n      this.setState({\r\n        blockchain: store.getState().blockchain\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        {(\r\n          <>\r\n            <HashRouter\r\n              basename=\"/\">\r\n              <Route\r\n                render={({ location }) => (\r\n                  <TransitionGroup className={`container-fluid ${location.pathname.replace('/', '')}`}>\r\n                    <CSSTransition\r\n                      key={location.pathname}\r\n                      classNames=\"fade\"\r\n                      timeout={500}\r\n                    >\r\n                      <Switch\r\n                        location={location}\r\n                      >\r\n                        <Route\r\n                          path=\"/\"\r\n                          exact\r\n                          render={() => (\r\n                            <Home></Home>\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/graveyard\"\r\n                          render={() => (\r\n                            <Graveyard />\r\n                          )}\r\n                        />\r\n                      </Switch>\r\n                    </CSSTransition>\r\n                  </TransitionGroup>\r\n                )} />\r\n            </HashRouter>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default connect(mapStateToProps)(App);\r\n\r\n\r\nconst formatEther = bn => ethers.utils.formatEther(bn)\r\nconst formatUnits = (value, unit) => ethers.utils.formatUnits(value, unit)\r\nconst getAddress = address => ethers.utils.getAddress(address)\r\n//preparing modal\r\n"]},"metadata":{},"sourceType":"module"}