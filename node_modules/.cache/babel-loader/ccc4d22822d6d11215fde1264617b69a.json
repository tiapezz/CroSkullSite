{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return api.post('swarm/peers', {\n              timeout: options.timeout,\n              signal: options.signal,\n              searchParams: toUrlSearchParams(options),\n              headers: options.headers\n            });\n\n          case 3:\n            _context.next = 5;\n            return _context.sent.json();\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", (res.Peers || []).map(function (peer) {\n              var info = {};\n\n              try {\n                info.addr = multiaddr(peer.Addr);\n                info.peer = peer.Peer;\n              } catch (error) {\n                info.error = error;\n                info.rawPeerInfo = peer;\n              }\n\n              if (peer.Muxer) {\n                info.muxer = peer.Muxer;\n              }\n\n              if (peer.Latency) {\n                info.latency = peer.Latency;\n              }\n\n              if (peer.Streams) {\n                info.streams = peer.Streams;\n              }\n\n              if (peer.Direction != null) {\n                info.direction = peer.Direction;\n              }\n\n              return info;\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n});","map":null,"metadata":{},"sourceType":"script"}