{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar raw = require('ipld-raw');\n\nvar multicodec = require('multicodec');\n\nvar noop = function noop() {};\n/**\n * @typedef {import('cids')} CID\n */\n\n/**\n * Return an object containing supported IPLD Formats\n *\n * @param {object} [options] - IPLD options passed to the http client constructor\n * @param {Array} [options.formats] - A list of IPLD Formats to use\n * @param {Function} [options.loadFormat] - An async function that can load a format when passed a codec number\n * @returns {Function}\n */\n\n\nmodule.exports = function () {\n  var _configuredFormats;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$formats = _ref.formats,\n      formats = _ref$formats === void 0 ? [] : _ref$formats,\n      _ref$loadFormat = _ref.loadFormat,\n      loadFormat = _ref$loadFormat === void 0 ? noop : _ref$loadFormat;\n\n  formats = formats || [];\n  loadFormat = loadFormat || noop;\n  var configuredFormats = (_configuredFormats = {}, _defineProperty(_configuredFormats, multicodec.DAG_PB, dagPB), _defineProperty(_configuredFormats, multicodec.DAG_CBOR, dagCBOR), _defineProperty(_configuredFormats, multicodec.RAW, raw), _configuredFormats);\n  formats.forEach(function (format) {\n    configuredFormats[format.codec] = format;\n  });\n  /**\n   * Attempts to load an IPLD format for the passed CID\n   *\n   * @param {import('multicodec').CodecName} codec - The code to load the format for\n   * @returns {Promise<object>} - An IPLD format\n   */\n\n  var loadResolver = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(codec) {\n      var number, format;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // @ts-ignore - codec is a string and not a CodecName\n              number = multicodec.getNumber(codec);\n              _context.t0 = configuredFormats[number];\n\n              if (_context.t0) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return loadFormat(codec);\n\n            case 5:\n              _context.t0 = _context.sent;\n\n            case 6:\n              format = _context.t0;\n\n              if (format) {\n                _context.next = 9;\n                break;\n              }\n\n              throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(codec, \"\\\"\")), {\n                missingMulticodec: codec\n              });\n\n            case 9:\n              return _context.abrupt(\"return\", format);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadResolver(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return loadResolver;\n};","map":null,"metadata":{},"sourceType":"script"}