{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueueingStreamingSocket = exports.ConnectionStatus = void 0;\n\nvar stream_1 = require(\"@cosmjs/stream\");\n\nvar xstream_1 = require(\"xstream\");\n\nvar streamingsocket_1 = require(\"./streamingsocket\");\n\nvar ConnectionStatus;\n\n(function (ConnectionStatus) {\n  ConnectionStatus[ConnectionStatus[\"Unconnected\"] = 0] = \"Unconnected\";\n  ConnectionStatus[ConnectionStatus[\"Connecting\"] = 1] = \"Connecting\";\n  ConnectionStatus[ConnectionStatus[\"Connected\"] = 2] = \"Connected\";\n  ConnectionStatus[ConnectionStatus[\"Disconnected\"] = 3] = \"Disconnected\";\n})(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));\n/**\n * A wrapper around StreamingSocket that can queue requests.\n */\n\n\nvar QueueingStreamingSocket = /*#__PURE__*/function () {\n  function QueueingStreamingSocket(url) {\n    var _this = this;\n\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n    var reconnectedHandler = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, QueueingStreamingSocket);\n\n    this.queue = [];\n    this.isProcessingQueue = false;\n    this.url = url;\n    this.timeout = timeout;\n    this.reconnectedHandler = reconnectedHandler;\n    var eventProducer = {\n      start: function start(listener) {\n        return _this.eventProducerListener = listener;\n      },\n      stop: function stop() {\n        return _this.eventProducerListener = undefined;\n      }\n    };\n    this.events = xstream_1.Stream.create(eventProducer);\n    this.connectionStatusProducer = new stream_1.DefaultValueProducer(ConnectionStatus.Unconnected);\n    this.connectionStatus = new stream_1.ValueAndUpdates(this.connectionStatusProducer);\n    this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n    this.socket.events.subscribe({\n      next: function next(event) {\n        if (!_this.eventProducerListener) throw new Error(\"No event producer listener set\");\n\n        _this.eventProducerListener.next(event);\n      },\n      error: function error() {\n        return _this.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      }\n    });\n  }\n\n  _createClass(QueueingStreamingSocket, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      this.connectionStatusProducer.update(ConnectionStatus.Connecting);\n      this.socket.connected.then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this2.connectionStatusProducer.update(ConnectionStatus.Connected);\n\n                return _context.abrupt(\"return\", _this2.processQueue());\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })), function () {\n        return _this2.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      });\n      this.socket.connect();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      this.socket = new streamingsocket_1.StreamingSocket(this.url, this.timeout);\n      this.socket.events.subscribe({\n        next: function next(event) {\n          if (!_this3.eventProducerListener) throw new Error(\"No event producer listener set\");\n\n          _this3.eventProducerListener.next(event);\n        },\n        error: function error() {\n          return _this3.connectionStatusProducer.update(ConnectionStatus.Disconnected);\n        }\n      }); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n      this.socket.connected.then(function () {\n        if (_this3.reconnectedHandler) {\n          _this3.reconnectedHandler();\n        }\n      });\n      this.connect();\n    }\n  }, {\n    key: \"getQueueLength\",\n    value: function getQueueLength() {\n      return this.queue.length;\n    }\n  }, {\n    key: \"queueRequest\",\n    value: function queueRequest(request) {\n      this.queue.push(request); // We donâ€™t need to wait for the queue to be processed.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n      this.processQueue();\n    }\n  }, {\n    key: \"processQueue\",\n    value: function () {\n      var _processQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var request;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.isProcessingQueue || this.connectionStatus.value !== ConnectionStatus.Connected)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.isProcessingQueue = true;\n\n              case 3:\n                if (!(request = this.queue.shift())) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                _context2.prev = 4;\n                _context2.next = 7;\n                return this.socket.send(request);\n\n              case 7:\n                this.isProcessingQueue = false;\n                _context2.next = 15;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](4);\n                // Probably the connection is down; will try again automatically when reconnected.\n                this.queue.unshift(request);\n                this.isProcessingQueue = false;\n                return _context2.abrupt(\"return\");\n\n              case 15:\n                _context2.next = 3;\n                break;\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 10]]);\n      }));\n\n      function processQueue() {\n        return _processQueue.apply(this, arguments);\n      }\n\n      return processQueue;\n    }()\n  }]);\n\n  return QueueingStreamingSocket;\n}();\n\nexports.QueueingStreamingSocket = QueueingStreamingSocket;","map":null,"metadata":{},"sourceType":"script"}