{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _defineProperty from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\n\nvar fetchBankRequest = function fetchBankRequest() {\n  return {\n    type: \"FETCH_BANK_REQUEST\"\n  };\n};\n\nvar fetchBankSuccess = function fetchBankSuccess(payload) {\n  return {\n    type: \"FETCH_BANK_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar fetchFarmSuccess = function fetchFarmSuccess(payload) {\n  return {\n    type: \"FETCH_FARM_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport var loadFarmData = function loadFarmData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState$block, accountAddress, croSkullsFarm, lpPair, ethProvider, datas, finalData, poolInfo, lastRewardBlock, userInfo, totalPending, amount, pendingRewards, lpPairAllowance, totalLiquidity, lpPairBalance, lpTotalSupply, lpCroBalance, croPerLp, totalStakedCro, endBlock;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState$block = store.getState().blockchain, accountAddress = _store$getState$block.accountAddress, croSkullsFarm = _store$getState$block.croSkullsFarm, lpPair = _store$getState$block.lpPair, ethProvider = _store$getState$block.ethProvider;\n              datas = [\"rewardPerBlock\", \"paidOut\", \"endBlock\"];\n              /*\r\n              \"userInfo\",\r\n              \"poolInfo\"*/\n\n              if (croSkullsFarm) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              finalData = [];\n              datas.forEach( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, i) {\n                  var value;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return croSkullsFarm[data]();\n\n                        case 2:\n                          value = _context.sent;\n                          _context.next = 5;\n                          return value.toString();\n\n                        case 5:\n                          value = _context.sent;\n                          console.log(value);\n                          finalData = _objectSpread({}, finalData, _defineProperty({}, data, value));\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2, _x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              _context2.next = 8;\n              return croSkullsFarm.poolInfo(0);\n\n            case 8:\n              poolInfo = _context2.sent;\n              _context2.next = 11;\n              return croSkullsFarm.rewardPerBlock();\n\n            case 11:\n              lastRewardBlock = _context2.sent;\n              _context2.next = 14;\n              return croSkullsFarm.userInfo(0, accountAddress);\n\n            case 14:\n              userInfo = _context2.sent;\n              _context2.next = 17;\n              return croSkullsFarm.totalPending();\n\n            case 17:\n              totalPending = _context2.sent;\n              amount = userInfo.amount.toString();\n              lastRewardBlock = lastRewardBlock.toString();\n              totalPending = totalPending.toString();\n              _context2.next = 23;\n              return croSkullsFarm.pending(0, accountAddress);\n\n            case 23:\n              pendingRewards = _context2.sent;\n              _context2.next = 26;\n              return lpPair.allowance(accountAddress, croSkullsFarm.address);\n\n            case 26:\n              lpPairAllowance = _context2.sent;\n              _context2.next = 29;\n              return lpPair.balanceOf(croSkullsFarm.address);\n\n            case 29:\n              totalLiquidity = _context2.sent;\n              _context2.next = 32;\n              return lpPair.balanceOf(accountAddress);\n\n            case 32:\n              lpPairBalance = _context2.sent;\n              totalLiquidity = totalLiquidity.toString(); //calculation locked lp value in $\n              // croPerLP = croBalanceOfLP / LPTotalSupply\n              // lpInUsd = croPerLP * stakedAmount * croInUsd\n\n              _context2.next = 36;\n              return lpPair.totalSupply();\n\n            case 36:\n              lpTotalSupply = _context2.sent;\n              lpTotalSupply = lpTotalSupply.toString();\n              _context2.next = 40;\n              return lpPair.getReserves();\n\n            case 40:\n              lpCroBalance = _context2.sent;\n              lpCroBalance = lpCroBalance[0].toString();\n              croPerLp = lpCroBalance / lpTotalSupply;\n              totalStakedCro = croPerLp * totalLiquidity / Math.pow(10, 18);\n              _context2.next = 46;\n              return lpPairBalance.toString();\n\n            case 46:\n              lpPairBalance = _context2.sent;\n              _context2.next = 49;\n              return lpPairAllowance.toString();\n\n            case 49:\n              lpPairAllowance = _context2.sent;\n              _context2.next = 52;\n              return croSkullsFarm.endBlock();\n\n            case 52:\n              endBlock = _context2.sent;\n              _context2.next = 55;\n              return endBlock.toString();\n\n            case 55:\n              endBlock = _context2.sent;\n              dispatch(fetchFarmSuccess({\n                rewardPerBlock: lastRewardBlock,\n                stakedAmount: amount,\n                pendingRewards: pendingRewards,\n                lpPairAllowance: lpPairAllowance,\n                endBlock: endBlock,\n                totalLiquidity: totalLiquidity,\n                lpPairBalance: lpPairBalance,\n                totalPending: totalPending,\n                totalStakedCro: totalStakedCro\n              }));\n\n            case 57:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loadBankData = function loadBankData() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var _store$getState$block2, accountAddress, croSkullsBank, croSkullsGrave, datas, finalData, userContractsCount, userActiveContracts, userFinalContracts, allowance;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              dispatch(fetchBankRequest());\n              _store$getState$block2 = store.getState().blockchain, accountAddress = _store$getState$block2.accountAddress, croSkullsBank = _store$getState$block2.croSkullsBank, croSkullsGrave = _store$getState$block2.croSkullsGrave;\n              datas = [\"maxApy\", \"totalGraveVolume\", \"totalWishbonesVolume\", \"totalContractsVolume\", \"depositedGrave\", \"activeWishbones\", \"activeContracts\", \"wishboneCost\", \"bankFee\"];\n\n              if (croSkullsBank) {\n                _context5.next = 5;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 5:\n              finalData = [];\n              datas.forEach( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data) {\n                  var value;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return croSkullsBank[data]();\n\n                        case 2:\n                          value = _context3.sent;\n                          _context3.next = 5;\n                          return value.toString();\n\n                        case 5:\n                          value = _context3.sent;\n                          finalData = _objectSpread({}, finalData, _defineProperty({}, data, value));\n\n                        case 7:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x5) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n              _context5.next = 9;\n              return croSkullsBank.userContractCount(accountAddress);\n\n            case 9:\n              userContractsCount = _context5.sent;\n              _context5.next = 12;\n              return userContractsCount.toString();\n\n            case 12:\n              userContractsCount = _context5.sent;\n              _context5.next = 15;\n              return croSkullsBank.getActiveContracts();\n\n            case 15:\n              userActiveContracts = _context5.sent;\n              userFinalContracts = [];\n              userActiveContracts.map( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(contractId) {\n                  var contractRewards, contractHash, contractDetails, contractData;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return croSkullsBank.currentRewards(contractId);\n\n                        case 2:\n                          contractRewards = _context4.sent;\n                          contractHash = ethers.utils.solidityKeccak256([\"address\", \"uint\"], [accountAddress, contractId]);\n                          _context4.next = 6;\n                          return croSkullsBank.userContracts(contractHash);\n\n                        case 6:\n                          contractDetails = _context4.sent;\n                          contractData = {\n                            contractId: contractId.toString(),\n                            amount: contractDetails.amount.toString(),\n                            duration: contractDetails.duration.toString(),\n                            startTimestamp: contractDetails.startTimestamp.toString(),\n                            unlockTimestamp: contractDetails.unlockTimestamp.toString(),\n                            usedWishbones: contractDetails.usedWishbones.toString(),\n                            rewards: contractRewards[0].toString(),\n                            apy: contractRewards[1].toString(),\n                            isClaimable: contractRewards[2]\n                          };\n                          userFinalContracts.push(contractData);\n\n                        case 9:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x6) {\n                  return _ref5.apply(this, arguments);\n                };\n              }());\n              _context5.next = 20;\n              return croSkullsGrave.allowance(accountAddress, croSkullsBank.address);\n\n            case 20:\n              allowance = _context5.sent;\n              _context5.next = 23;\n              return allowance.toString();\n\n            case 23:\n              allowance = _context5.sent;\n              finalData = _objectSpread({}, finalData, {\n                userContractsCount: userContractsCount,\n                userActiveContracts: userFinalContracts,\n                allowance: allowance\n              });\n              dispatch(fetchBankSuccess(finalData));\n\n            case 26:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/bank/bankActions.js"],"names":["ethers","store","sendNotification","getSkullsData","fetchBankRequest","type","fetchBankSuccess","payload","fetchFarmSuccess","loadFarmData","dispatch","getState","blockchain","accountAddress","croSkullsFarm","lpPair","ethProvider","datas","finalData","forEach","data","i","value","toString","console","log","poolInfo","rewardPerBlock","lastRewardBlock","userInfo","totalPending","amount","pending","pendingRewards","allowance","address","lpPairAllowance","balanceOf","totalLiquidity","lpPairBalance","totalSupply","lpTotalSupply","getReserves","lpCroBalance","croPerLp","totalStakedCro","endBlock","stakedAmount","loadBankData","croSkullsBank","croSkullsGrave","userContractCount","userContractsCount","getActiveContracts","userActiveContracts","userFinalContracts","map","contractId","currentRewards","contractRewards","contractHash","utils","solidityKeccak256","userContracts","contractDetails","contractData","duration","startTimestamp","unlockTimestamp","usedWishbones","rewards","apy","isClaimable","push"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\r\n\r\nconst fetchBankRequest = () => {\r\n  return {\r\n    type: \"FETCH_BANK_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchBankSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_BANK_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nconst fetchFarmSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_FARM_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\n\r\nexport const loadFarmData = () =>{\r\n    return async (dispatch) => {\r\n        let { accountAddress, croSkullsFarm, lpPair, ethProvider } = store.getState().blockchain\r\n        let datas = [\r\n            \"rewardPerBlock\",\r\n            \"paidOut\",\r\n            \"endBlock\",\r\n        ]\r\n        /*\r\n        \"userInfo\",\r\n        \"poolInfo\"*/\r\n        if( ! croSkullsFarm ) return\r\n\r\n        let finalData = []\r\n        datas.forEach( async (data, i) => {\r\n            let value = await croSkullsFarm[data]()\r\n            value = await value.toString()\r\n            console.log( value )\r\n            finalData = {\r\n                ...finalData,\r\n                [data]: value\r\n            }\r\n        })\r\n        let poolInfo = await croSkullsFarm.poolInfo(0)\r\n        let lastRewardBlock = await croSkullsFarm.rewardPerBlock()\r\n        let userInfo = await croSkullsFarm.userInfo(0,accountAddress)\r\n        let totalPending = await croSkullsFarm.totalPending()\r\n        let amount =  userInfo.amount.toString()\r\n        lastRewardBlock =  lastRewardBlock.toString()\r\n        totalPending =  totalPending.toString()\r\n        let pendingRewards = await croSkullsFarm.pending(0,accountAddress)\r\n        let lpPairAllowance = await lpPair.allowance(accountAddress, croSkullsFarm.address)\r\n        let totalLiquidity = await lpPair.balanceOf(croSkullsFarm.address)\r\n        let lpPairBalance = await lpPair.balanceOf(accountAddress)\r\n        totalLiquidity = totalLiquidity.toString()\r\n        //calculation locked lp value in $\r\n        // croPerLP = croBalanceOfLP / LPTotalSupply\r\n        // lpInUsd = croPerLP * stakedAmount * croInUsd\r\n        let lpTotalSupply = await lpPair.totalSupply()\r\n        lpTotalSupply = lpTotalSupply.toString()\r\n        let lpCroBalance = await lpPair.getReserves()\r\n        lpCroBalance = lpCroBalance[0].toString()\r\n        let croPerLp = lpCroBalance / lpTotalSupply\r\n        let totalStakedCro = croPerLp * totalLiquidity / 10 ** 18;\r\n        lpPairBalance = await lpPairBalance.toString()\r\n        lpPairAllowance = await lpPairAllowance.toString()\r\n        let endBlock = await croSkullsFarm.endBlock()\r\n        endBlock = await endBlock.toString()\r\n        dispatch( fetchFarmSuccess({\r\n            rewardPerBlock: lastRewardBlock,\r\n            stakedAmount: amount,\r\n            pendingRewards,\r\n            lpPairAllowance,\r\n            endBlock,\r\n            totalLiquidity,\r\n            lpPairBalance,\r\n            totalPending,\r\n            totalStakedCro\r\n        }) )\r\n    }\r\n}\r\n\r\nexport const loadBankData = () => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchBankRequest())\r\n        let { accountAddress, croSkullsBank, croSkullsGrave } = store.getState().blockchain\r\n        let datas = [\r\n            \"maxApy\",\r\n            \"totalGraveVolume\",\r\n            \"totalWishbonesVolume\",\r\n            \"totalContractsVolume\",\r\n            \"depositedGrave\",\r\n            \"activeWishbones\",\r\n            \"activeContracts\",\r\n            \"wishboneCost\",\r\n            \"bankFee\",\r\n        ]\r\n        if( ! croSkullsBank ) return \r\n\r\n        let finalData = []\r\n        datas.forEach( async data => {\r\n            let value = await croSkullsBank[data]()\r\n            value = await value.toString()\r\n            finalData = {\r\n                ...finalData,\r\n                [data]: value\r\n            }\r\n        });\r\n        let userContractsCount = await croSkullsBank.userContractCount(accountAddress)\r\n        userContractsCount = await userContractsCount.toString()\r\n        let userActiveContracts = await croSkullsBank.getActiveContracts()\r\n        let userFinalContracts = []\r\n        userActiveContracts.map( async contractId => {\r\n            let contractRewards = await croSkullsBank.currentRewards(contractId)\r\n            let contractHash = ethers.utils.solidityKeccak256([ \"address\", \"uint\" ], [ accountAddress, contractId ])\r\n            let contractDetails = await croSkullsBank.userContracts(contractHash)\r\n            let contractData = {\r\n                contractId: contractId.toString(),\r\n                amount: contractDetails.amount.toString(),\r\n                duration: contractDetails.duration.toString(),\r\n                startTimestamp: contractDetails.startTimestamp.toString(),\r\n                unlockTimestamp: contractDetails.unlockTimestamp.toString(),\r\n                usedWishbones: contractDetails.usedWishbones.toString(),\r\n                rewards: contractRewards[0].toString(),\r\n                apy: contractRewards[1].toString(),\r\n                isClaimable: contractRewards[2]\r\n            }\r\n            userFinalContracts.push(contractData)\r\n        })\r\n        let allowance = await croSkullsGrave.allowance(accountAddress, croSkullsBank.address)\r\n        allowance = await allowance.toString()\r\n        finalData = {\r\n            ...finalData,\r\n            userContractsCount,\r\n            userActiveContracts: userFinalContracts,\r\n            allowance\r\n        }\r\n        dispatch(fetchBankSuccess( finalData ))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}