{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectWithoutProperties = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectWithoutProperties\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CID = require('cids');\n\nvar Client = require('../../lib/core');\n\nvar Service = require('./service');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\n\n\nvar Remote = /*#__PURE__*/function () {\n  /**\n   * @param {ClientOptions} options\n   */\n  function Remote(options) {\n    _classCallCheck(this, Remote);\n\n    /** @private */\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n\n\n  _createClass(Remote, [{\n    key: \"add\",\n    value: function add(cid, options) {\n      return Remote.add(this.client, cid, options);\n    }\n    /**\n     * @param {Client} client\n     * @param {CID} cid\n     * @param {AddOptions & AbortOptions & HttpOptions} options\n     */\n\n  }, {\n    key: \"ls\",\n\n    /**\n     * Returns a list of matching pins on the remote pinning service.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n    value: function ls(query) {\n      return Remote.ls(this.client, query);\n    }\n    /**\n     *\n     * @param {Client} client\n     * @param {Query & AbortOptions & HttpOptions} options\n     * @returns {AsyncIterable<Pin>}\n     */\n\n  }, {\n    key: \"rm\",\n\n    /**\n     * Removes a single pin object matching query allowing it to be garbage\n     * collected (if needed). Will error if multiple pins mtach provided\n     * query. To remove all matches use `rmAll` instead.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n    value: function rm(query) {\n      return Remote.rm(this.client, _objectSpread({}, query, {\n        all: false\n      }));\n    }\n    /**\n     * Removes all pin object that match given query allowing them to be garbage\n     * collected if needed.\n     *\n     * @param {Query & AbortOptions & HttpOptions} query\n     */\n\n  }, {\n    key: \"rmAll\",\n    value: function rmAll(query) {\n      return Remote.rm(this.client, _objectSpread({}, query, {\n        all: true\n      }));\n    }\n    /**\n     *\n     * @param {Client} client\n     * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n     */\n\n  }], [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(client, cid, _ref) {\n        var timeout, signal, headers, options, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers, options = _objectWithoutProperties(_ref, [\"timeout\", \"signal\", \"headers\"]);\n                _context.next = 3;\n                return client.post('pin/remote/add', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: encodeAddParams(_objectSpread({\n                    cid: cid\n                  }, options))\n                });\n\n              case 3:\n                response = _context.sent;\n                _context.t0 = Remote;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", _context.t0.decodePin.call(_context.t0, _context.t1));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * @param {Object} json\n     * @param {string} json.Name\n     * @param {string} json.Cid\n     * @param {Status} json.Status\n     * @returns {Pin}\n     */\n\n  }, {\n    key: \"decodePin\",\n    value: function decodePin(_ref2) {\n      var name = _ref2.Name,\n          status = _ref2.Status,\n          cid = _ref2.Cid;\n      return {\n        cid: new CID(cid),\n        name: name,\n        status: status\n      };\n    }\n  }, {\n    key: \"ls\",\n    value: function ls(client, _ref3) {\n      var timeout = _ref3.timeout,\n          signal = _ref3.signal,\n          headers = _ref3.headers,\n          query = _objectWithoutProperties(_ref3, [\"timeout\", \"signal\", \"headers\"]);\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var response, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pin;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _awaitAsyncGenerator(client.post('pin/remote/ls', {\n                  signal: signal,\n                  timeout: timeout,\n                  headers: headers,\n                  searchParams: encodeQuery(query)\n                }));\n\n              case 2:\n                response = _context2.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 5;\n                _iterator = _asyncIterator(response.ndjson());\n\n              case 7:\n                _context2.next = 9;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 9:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 13;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 13:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                pin = _value;\n                _context2.next = 18;\n                return Remote.decodePin(pin);\n\n              case 18:\n                _iteratorNormalCompletion = true;\n                _context2.next = 7;\n                break;\n\n              case 21:\n                _context2.next = 27;\n                break;\n\n              case 23:\n                _context2.prev = 23;\n                _context2.t0 = _context2[\"catch\"](5);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.prev = 28;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                _context2.next = 32;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 32:\n                _context2.prev = 32;\n\n                if (!_didIteratorError) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 35:\n                return _context2.finish(32);\n\n              case 36:\n                return _context2.finish(27);\n\n              case 37:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n      }))();\n    }\n  }, {\n    key: \"rm\",\n    value: function () {\n      var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client, _ref4) {\n        var timeout, signal, headers, query;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                timeout = _ref4.timeout, signal = _ref4.signal, headers = _ref4.headers, query = _objectWithoutProperties(_ref4, [\"timeout\", \"signal\", \"headers\"]);\n                _context3.next = 3;\n                return client.post('pin/remote/rm', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: encodeQuery(query)\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function rm(_x4, _x5) {\n        return _rm.apply(this, arguments);\n      }\n\n      return rm;\n    }()\n  }]);\n\n  return Remote;\n}();\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nvar encodeService = function encodeService(service) {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nvar encodeCID = function encodeCID(cid) {\n  if (CID.isCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(\"CID instance expected instead of \".concat(cid));\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nvar encodeQuery = function encodeQuery(_ref5) {\n  var service = _ref5.service,\n      cid = _ref5.cid,\n      name = _ref5.name,\n      status = _ref5.status,\n      all = _ref5.all;\n  var query = toUrlSearchParams({\n    service: encodeService(service),\n    name: name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    var _iterator2 = _createForOfIteratorHelper(cid),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var value = _step2.value;\n        query.append('cid', encodeCID(value));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  if (status) {\n    var _iterator3 = _createForOfIteratorHelper(status),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _value2 = _step3.value;\n        query.append('status', _value2);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nvar encodeAddParams = function encodeAddParams(_ref6) {\n  var cid = _ref6.cid,\n      service = _ref6.service,\n      background = _ref6.background,\n      name = _ref6.name,\n      origins = _ref6.origins;\n  var params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name: name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    var _iterator4 = _createForOfIteratorHelper(origins),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var origin = _step4.value;\n        params.append('origin', origin.toString());\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":null,"metadata":{},"sourceType":"script"}