{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codecimpl_1 = require(\"./generated/codecimpl\");\n\nfunction compress(proof) {\n  if (!proof.batch) {\n    return proof;\n  }\n\n  return {\n    compressed: compress_batch(proof.batch)\n  };\n}\n\nexports.compress = compress;\n\nfunction decompress(proof) {\n  if (!proof.compressed) {\n    return proof;\n  }\n\n  return {\n    batch: decompress_batch(proof.compressed)\n  };\n}\n\nexports.decompress = decompress; // tslint:disable:readonly-array\n\nfunction compress_batch(proof) {\n  var centries = [];\n  var lookup = [];\n  var registry = new Map();\n\n  var _iterator = _createForOfIteratorHelper(proof.entries),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n\n      if (!!entry.exist) {\n        var centry = {\n          exist: compress_exist(entry.exist, lookup, registry)\n        };\n        centries.push(centry);\n      } else if (!!entry.nonexist) {\n        var non = entry.nonexist;\n        var _centry = {\n          nonexist: {\n            key: non.key,\n            left: compress_exist(non.left, lookup, registry),\n            right: compress_exist(non.right, lookup, registry)\n          }\n        };\n        centries.push(_centry);\n      } else {\n        throw new Error(\"Unexpected batch entry during compress\");\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    entries: centries,\n    lookupInners: lookup\n  };\n}\n\nfunction compress_exist(exist, lookup, registry) {\n  if (!exist) {\n    return undefined;\n  }\n\n  var path = exist.path.map(function (inner) {\n    var sig = codecimpl_1.ics23.InnerOp.encode(inner).finish();\n    var idx = registry.get(sig);\n\n    if (idx === undefined) {\n      idx = lookup.length;\n      lookup.push(inner);\n      registry.set(sig, idx);\n    }\n\n    return idx;\n  });\n  return {\n    key: exist.key,\n    value: exist.value,\n    leaf: exist.leaf,\n    path: path\n  };\n}\n\nfunction decompress_batch(proof) {\n  var lookup = proof.lookupInners;\n  var entries = proof.entries.map(function (comp) {\n    if (!!comp.exist) {\n      return {\n        exist: decompress_exist(comp.exist, lookup)\n      };\n    } else if (!!comp.nonexist) {\n      var non = comp.nonexist;\n      return {\n        nonexist: {\n          key: non.key,\n          left: decompress_exist(non.left, lookup),\n          right: decompress_exist(non.right, lookup)\n        }\n      };\n    } else {\n      throw new Error(\"Unexpected batch entry during compress\");\n    }\n  });\n  return {\n    entries: entries\n  };\n}\n\nfunction decompress_exist(exist, lookup) {\n  if (!exist) {\n    return undefined;\n  }\n\n  var key = exist.key,\n      value = exist.value,\n      leaf = exist.leaf,\n      path = exist.path;\n  var newPath = (path || []).map(function (idx) {\n    return lookup[idx];\n  });\n  return {\n    key: key,\n    value: value,\n    leaf: leaf,\n    path: newPath\n  };\n}","map":null,"metadata":{},"sourceType":"script"}