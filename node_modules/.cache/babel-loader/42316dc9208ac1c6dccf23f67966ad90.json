{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport store from \"../store\";\n\nvar updateMerchant = function updateMerchant(payload) {\n  return {\n    type: \"UPDATE_MERCHANT\",\n    payload: payload\n  };\n};\n\nvar fetchDataRequest = function fetchDataRequest() {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nvar setPotions = function setPotions(payload) {\n  return {\n    type: \"SET_POTIONS\",\n    payload: payload\n  };\n};\n\nexport var cleanData = function cleanData() {\n  return {\n    type: \"CLEAN_DATA\"\n  };\n};\n\nvar skullsSuccess = function skullsSuccess(payload) {\n  return {\n    type: \"SKULLS_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar fetchStakingSuccess = function fetchStakingSuccess(payload) {\n  return {\n    type: \"FETCH_STAKING_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar stakingDisabled = function stakingDisabled() {\n  return {\n    type: \"STAKING_DISABLED\"\n  };\n};\n\nvar notificationRequest = function notificationRequest(payload) {\n  return {\n    type: \"NOTIFICATION_REQUEST\",\n    payload: payload\n  };\n};\n\nexport var playSound = function playSound(audioPath) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var newAudioSrc;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (audioPath) {\n                newAudioSrc = new Audio(audioPath);\n                newAudioSrc.play();\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var refreshSkullsStories = function refreshSkullsStories() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState$block, croSkullsDescription, croSkullsGrave, contractDetected, accountAddress, ethProvider, storyAllowance, storyCost, _store$getState$data, storiesLoading, storyLastBlock, skullsStories, storiesFilter, currentBlock, finalBlock, blockLimit, storyEvents, storyLimit, i, newSkullsStories;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState$block = store.getState().blockchain, croSkullsDescription = _store$getState$block.croSkullsDescription, croSkullsGrave = _store$getState$block.croSkullsGrave, contractDetected = _store$getState$block.contractDetected, accountAddress = _store$getState$block.accountAddress, ethProvider = _store$getState$block.ethProvider;\n\n              if (!(!contractDetected || !accountAddress)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              if (croSkullsDescription) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 5:\n              _context2.next = 7;\n              return croSkullsGrave.allowance(accountAddress, croSkullsDescription.address);\n\n            case 7:\n              storyAllowance = _context2.sent;\n              storyAllowance = storyAllowance.toString();\n              _context2.next = 11;\n              return croSkullsDescription._getCostInGrave();\n\n            case 11:\n              storyCost = _context2.sent;\n              storyCost = storyCost.toString();\n              dispatch(updateState({\n                key: \"storyAllowance\",\n                value: storyAllowance >= storyCost ? true : false\n              }));\n              _store$getState$data = store.getState().data, storiesLoading = _store$getState$data.storiesLoading, storyLastBlock = _store$getState$data.storyLastBlock, skullsStories = _store$getState$data.skullsStories;\n\n              if (!storiesLoading) {\n                _context2.next = 17;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 17:\n              dispatch(updateState({\n                key: 'storiesLoading',\n                value: true\n              }));\n              storiesFilter = croSkullsDescription.filters.DescriptionUpdate();\n              croSkullsDescription.on('DescriptionUpdate', function (content) {\n                console.log(content);\n              });\n              _context2.next = 22;\n              return ethProvider.getBlockNumber();\n\n            case 22:\n              currentBlock = _context2.sent;\n              if (storyLastBlock) currentBlock = storyLastBlock;\n              finalBlock = 0;\n              blockLimit = 2000;\n              storyEvents = [];\n              /*if( skullsStories.length )\r\n                storyEvents = skullsStories*/\n\n              storyLimit = storyLastBlock ? 20 : 5;\n              i = 0;\n\n            case 29:\n              if (!(storyEvents.length <= storyLimit)) {\n                _context2.next = 40;\n                break;\n              }\n\n              _context2.t0 = storyEvents.push;\n              _context2.t1 = storyEvents;\n              _context2.next = 34;\n              return croSkullsDescription.queryFilter(storiesFilter, currentBlock - i - blockLimit, currentBlock - i);\n\n            case 34:\n              _context2.t2 = _context2.sent;\n\n              _context2.t0.apply.call(_context2.t0, _context2.t1, _context2.t2);\n\n              finalBlock = currentBlock - i - blockLimit;\n\n            case 37:\n              i += blockLimit;\n              _context2.next = 29;\n              break;\n\n            case 40:\n              newSkullsStories = [];\n              if (skullsStories) newSkullsStories = skullsStories;\n              storyEvents.map(function (story) {\n                var _story$args = story.args,\n                    tokenId = _story$args.tokenId,\n                    ownerOf = _story$args.ownerOf,\n                    ipfsHash = _story$args.ipfsHash;\n                if (newSkullsStories[tokenId]) return;\n                newSkullsStories[tokenId] = {\n                  tokenId: tokenId.toString(),\n                  ownerOf: ownerOf,\n                  ipfsHash: ipfsHash,\n                  blocknumber: story.blockNumber\n                };\n              });\n              newSkullsStories.sort(function (a, b) {\n                return b.blocknumber - a.blocknumber;\n              });\n              dispatch(updateState({\n                key: 'skullsStories',\n                value: newSkullsStories\n              }));\n              dispatch(updateState({\n                key: 'storiesLoading',\n                value: false\n              }));\n              dispatch(updateState({\n                key: 'storyLastBlock',\n                value: finalBlock\n              }));\n\n            case 47:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var sendNotification = function sendNotification(_ref3) {\n  var title = _ref3.title,\n      message = _ref3.message,\n      tx = _ref3.tx,\n      type = _ref3.type;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch(notificationRequest({\n                title: title,\n                message: message,\n                tx: tx,\n                type: type\n              }));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var toTavern = function toTavern() {\n  var skulls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  // UnStake Skull\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var croSkullsStaking, stakeSkullTx, skullsCount;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              croSkullsStaking = store.getState().blockchain.croSkullsStaking;\n\n              if (skulls instanceof Array) {\n                skullsCount = skulls.length;\n                stakeSkullTx = croSkullsStaking.batchUnstakeSkulls(skulls);\n              } else {\n                skullsCount = 1;\n                stakeSkullTx = croSkullsStaking.unstakeSkull(skulls);\n              }\n\n              _context5.next = 4;\n              return stakeSkullTx.then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tx) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context4.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Success!\",\n                            message: \"\".concat(skullsCount, \" Skull\").concat(skullsCount > 1 ? 's' : '', \" unstaked!\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 5:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x5) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var approveStories = function approveStories() {\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch) {\n      var _store$getState$block2, croSkullsDescription, croSkullsGrave, costInGrave, approveTx;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _store$getState$block2 = store.getState().blockchain, croSkullsDescription = _store$getState$block2.croSkullsDescription, croSkullsGrave = _store$getState$block2.croSkullsGrave;\n              _context7.next = 3;\n              return croSkullsDescription._getCostInGrave();\n\n            case 3:\n              costInGrave = _context7.sent;\n              costInGrave = (costInGrave * 10).toString();\n              approveTx = croSkullsGrave.approve(croSkullsDescription.address, costInGrave);\n              _context7.next = 8;\n              return approveTx.then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tx) {\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmations',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context6.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Success!\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(updateState({\n                            key: \"storyAllowance\",\n                            value: true\n                          }));\n\n                        case 5:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n\n                return function (_x7) {\n                  return _ref8.apply(this, arguments);\n                };\n              }());\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x6) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n};\nexport var toMission = function toMission() {\n  var skulls = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  // UnStake Skull\n  return /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(dispatch) {\n      var croSkullsStaking, stakeSkullTx, skullsCount;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              croSkullsStaking = store.getState().blockchain.croSkullsStaking;\n\n              if (skulls instanceof Array) {\n                skullsCount = skulls.length;\n                stakeSkullTx = croSkullsStaking.batchStakeSkulls(skulls);\n              } else {\n                skullsCount = 1;\n                stakeSkullTx = croSkullsStaking.stakeSkull(skulls);\n              }\n\n              _context9.next = 4;\n              return stakeSkullTx.then( /*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tx) {\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmations',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context8.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Success!\",\n                            message: \"\".concat(skullsCount, \" Skull\").concat(skullsCount > 1 ? 's' : '', \" staked\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 5:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                return function (_x9) {\n                  return _ref10.apply(this, arguments);\n                };\n              }());\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function (_x8) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n};\nexport var getStakingData = function getStakingData() {\n  return /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(dispatch) {\n      var _store$getState$block3, croSkullsStaking, contractDetected, croSkullsPetEggs, croSkullsGrave, croSkullsSouls, accountAddress, ethProvider, started, isApproved, petEggsLimit, petEggsMintedByUser, petEggsMaxSupply, petEggsSupply, petEggsCost, approvedEggs, userGraveBalance, malusFee, rewardPlusMalus, rewards, rewardPerCycle, cyclesLastWithdraw, startStakeTimestamp, userDetails, soulsGenerated, alreadyClaimed, totalSkullsStaked, totalWithdrawedGraves, totalWithdrawedSouls, soulsBalance, daysLastWithdraw, graveTotalSupply, burnedGraves, lastWithdrawTimestamp, lastBlock, blockTimestamp;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              console.log('getStakingData');\n              _store$getState$block3 = store.getState().blockchain, croSkullsStaking = _store$getState$block3.croSkullsStaking, contractDetected = _store$getState$block3.contractDetected, croSkullsPetEggs = _store$getState$block3.croSkullsPetEggs, croSkullsGrave = _store$getState$block3.croSkullsGrave, croSkullsSouls = _store$getState$block3.croSkullsSouls, accountAddress = _store$getState$block3.accountAddress, ethProvider = _store$getState$block3.ethProvider;\n\n              if (!(!contractDetected || !accountAddress)) {\n                _context10.next = 4;\n                break;\n              }\n\n              return _context10.abrupt(\"return\");\n\n            case 4:\n              _context10.next = 6;\n              return croSkullsStaking.started();\n\n            case 6:\n              started = _context10.sent;\n\n              if (!started) {\n                _context10.next = 114;\n                break;\n              }\n\n              _context10.next = 10;\n              return croSkullsStaking.approvalStatus();\n\n            case 10:\n              isApproved = _context10.sent;\n              _context10.next = 13;\n              return croSkullsPetEggs.eggsPerAddress();\n\n            case 13:\n              petEggsLimit = _context10.sent;\n              _context10.next = 16;\n              return croSkullsPetEggs.minterList(accountAddress);\n\n            case 16:\n              petEggsMintedByUser = _context10.sent;\n              _context10.next = 19;\n              return croSkullsPetEggs.eggsLimit();\n\n            case 19:\n              petEggsMaxSupply = _context10.sent;\n              _context10.next = 22;\n              return croSkullsPetEggs.eggsCounter();\n\n            case 22:\n              petEggsSupply = _context10.sent;\n              _context10.next = 25;\n              return croSkullsPetEggs.eggCost();\n\n            case 25:\n              petEggsCost = _context10.sent;\n              _context10.next = 28;\n              return croSkullsGrave.allowance(accountAddress, croSkullsPetEggs.address);\n\n            case 28:\n              approvedEggs = _context10.sent;\n              petEggsLimit = petEggsLimit.toString();\n              petEggsMintedByUser = petEggsMintedByUser.toString();\n              petEggsMaxSupply = petEggsMaxSupply.toString();\n              petEggsSupply = petEggsSupply.toString();\n              petEggsCost = petEggsCost.toString();\n              approvedEggs = approvedEggs.toString() >= parseInt(petEggsCost);\n              _context10.next = 37;\n              return croSkullsGrave.balanceOf(accountAddress);\n\n            case 37:\n              userGraveBalance = _context10.sent;\n              userGraveBalance = userGraveBalance.toString();\n              dispatch(updateMerchant({\n                petEggsLimit: petEggsLimit,\n                petEggsMintedByUser: petEggsMintedByUser,\n                petEggsSupply: petEggsSupply,\n                petEggsMaxSupply: petEggsMaxSupply,\n                petEggsCost: petEggsCost,\n                approvedEggs: approvedEggs,\n                userGraveBalance: userGraveBalance\n              }));\n\n              if (isApproved) {\n                _context10.next = 44;\n                break;\n              }\n\n              dispatch(stakingDisabled());\n              _context10.next = 112;\n              break;\n\n            case 44:\n              _context10.next = 46;\n              return croSkullsStaking.calculateMalusFee();\n\n            case 46:\n              malusFee = _context10.sent;\n              malusFee = malusFee.toString();\n              _context10.next = 50;\n              return croSkullsStaking.calculateRewardsPlusMalus();\n\n            case 50:\n              rewardPlusMalus = _context10.sent;\n              rewardPlusMalus = rewardPlusMalus[0];\n              _context10.next = 54;\n              return croSkullsStaking.calculateRewards();\n\n            case 54:\n              rewards = _context10.sent;\n              _context10.next = 57;\n              return croSkullsStaking._rewardPerCycles();\n\n            case 57:\n              rewardPerCycle = _context10.sent;\n              _context10.next = 60;\n              return croSkullsStaking._tenSecCyclesPassedLastWithdraw();\n\n            case 60:\n              cyclesLastWithdraw = _context10.sent;\n              _context10.next = 63;\n              return croSkullsStaking.startStakeTimestamp();\n\n            case 63:\n              startStakeTimestamp = _context10.sent;\n              _context10.next = 66;\n              return croSkullsStaking.userDetails(accountAddress);\n\n            case 66:\n              userDetails = _context10.sent;\n              _context10.next = 69;\n              return croSkullsStaking.calculateDroppedSouls();\n\n            case 69:\n              soulsGenerated = _context10.sent;\n              alreadyClaimed = userDetails.alreadyClaimed;\n              _context10.next = 73;\n              return croSkullsStaking.stakedSkullsCount();\n\n            case 73:\n              totalSkullsStaked = _context10.sent;\n              _context10.next = 76;\n              return croSkullsStaking.poolWithdrawedAmount();\n\n            case 76:\n              totalWithdrawedGraves = _context10.sent;\n              _context10.next = 79;\n              return croSkullsStaking.poolWithdrawedSouls();\n\n            case 79:\n              totalWithdrawedSouls = _context10.sent;\n              _context10.next = 82;\n              return croSkullsSouls.balanceOf(accountAddress);\n\n            case 82:\n              soulsBalance = _context10.sent;\n              _context10.next = 85;\n              return croSkullsStaking.daysSinceLastWithdraw();\n\n            case 85:\n              daysLastWithdraw = _context10.sent;\n              _context10.next = 88;\n              return croSkullsGrave.totalSupply();\n\n            case 88:\n              graveTotalSupply = _context10.sent;\n              _context10.next = 91;\n              return croSkullsGrave.burnedAmount();\n\n            case 91:\n              burnedGraves = _context10.sent;\n              burnedGraves = burnedGraves.toString();\n              daysLastWithdraw = daysLastWithdraw[0].toString();\n              lastWithdrawTimestamp = userDetails.lastWithdrawTimestamp.toString();\n              _context10.next = 97;\n              return ethProvider.getBlock();\n\n            case 97:\n              lastBlock = _context10.sent;\n              blockTimestamp = lastBlock.timestamp;\n              rewardPlusMalus = rewardPlusMalus.toString();\n              rewards = rewards.toString();\n              rewardPerCycle = rewardPerCycle.toString();\n              cyclesLastWithdraw = cyclesLastWithdraw.toString();\n              startStakeTimestamp = startStakeTimestamp.toString();\n              soulsGenerated = soulsGenerated.toString();\n              alreadyClaimed = alreadyClaimed.toString();\n              totalSkullsStaked = totalSkullsStaked.toString();\n              totalWithdrawedGraves = totalWithdrawedGraves.toString();\n              totalWithdrawedSouls = totalWithdrawedSouls.toString();\n              soulsBalance = soulsBalance.toString();\n              graveTotalSupply = graveTotalSupply.toString();\n              dispatch(fetchStakingSuccess({\n                malusFee: malusFee,\n                rewardPlusMalus: rewardPlusMalus,\n                rewards: rewards,\n                rewardPerCycle: rewardPerCycle,\n                cyclesLastWithdraw: cyclesLastWithdraw,\n                startStakeTimestamp: startStakeTimestamp,\n                lastBlock: lastBlock,\n                blockTimestamp: blockTimestamp,\n                userDetails: userDetails,\n                alreadyClaimed: alreadyClaimed,\n                soulsGenerated: soulsGenerated,\n                totalSkullsStaked: totalSkullsStaked,\n                totalWithdrawedGraves: totalWithdrawedGraves,\n                totalWithdrawedSouls: totalWithdrawedSouls,\n                lastWithdrawTimestamp: lastWithdrawTimestamp,\n                soulsBalance: soulsBalance,\n                daysLastWithdraw: daysLastWithdraw,\n                burnedGraves: burnedGraves,\n                graveTotalSupply: graveTotalSupply\n              }));\n\n            case 112:\n              _context10.next = 115;\n              break;\n\n            case 114:\n              dispatch(stakingDisabled());\n\n            case 115:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function (_x10) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n};\nexport var updateUserBalance = function updateUserBalance() {\n  return /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(dispatch) {\n      var _store$getState$block4, croSkullsGrave, accountAddress, userGraveBalance;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _store$getState$block4 = store.getState().blockchain, croSkullsGrave = _store$getState$block4.croSkullsGrave, accountAddress = _store$getState$block4.accountAddress;\n              _context11.next = 3;\n              return croSkullsGrave.balanceOf(accountAddress);\n\n            case 3:\n              userGraveBalance = _context11.sent;\n              userGraveBalance = userGraveBalance.toString();\n              dispatch(updateState({\n                key: 'userGraveBalance',\n                value: userGraveBalance\n              }));\n\n            case 6:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function (_x11) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n};\nexport var getSkullsData = function getSkullsData() {\n  return /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(dispatch) {\n      var _store$getState$block5, croSkullsContract, croSkullsStaking, accountAddress, croPotionBlue, croPotionRed, ethProvider, redCount, blueCount, ownedTokensCount, skulls, i, tokenId, inStakeTokens, rawEbisusData, ebisusData, rawResult, metaData, rarityPerTrait, traitRariry, totalRarity;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              console.log('getSkullsData');\n              dispatch(fetchDataRequest());\n              _store$getState$block5 = store.getState().blockchain, croSkullsContract = _store$getState$block5.croSkullsContract, croSkullsStaking = _store$getState$block5.croSkullsStaking, accountAddress = _store$getState$block5.accountAddress, croPotionBlue = _store$getState$block5.croPotionBlue, croPotionRed = _store$getState$block5.croPotionRed, ethProvider = _store$getState$block5.ethProvider;\n\n              if (croSkullsContract) {\n                _context12.next = 5;\n                break;\n              }\n\n              return _context12.abrupt(\"return\");\n\n            case 5:\n              dispatch(refreshSkullsStories());\n              _context12.next = 8;\n              return croPotionRed.balanceOf(accountAddress);\n\n            case 8:\n              redCount = _context12.sent;\n              _context12.next = 11;\n              return croPotionBlue.balanceOf(accountAddress);\n\n            case 11:\n              blueCount = _context12.sent;\n              redCount = redCount.toString();\n              blueCount = blueCount.toString();\n              dispatch(setPotions({\n                redCount: redCount,\n                blueCount: blueCount\n              }));\n              dispatch(getStakingData());\n              _context12.next = 18;\n              return croSkullsContract.balanceOf(accountAddress);\n\n            case 18:\n              ownedTokensCount = _context12.sent;\n              ownedTokensCount = ownedTokensCount.toString();\n              skulls = [];\n              i = 0;\n\n            case 22:\n              if (!(i < ownedTokensCount)) {\n                _context12.next = 30;\n                break;\n              }\n\n              _context12.next = 25;\n              return croSkullsContract.tokenOfOwnerByIndex(accountAddress, i);\n\n            case 25:\n              tokenId = _context12.sent;\n              skulls.push(tokenId.toString());\n\n            case 27:\n              i++;\n              _context12.next = 22;\n              break;\n\n            case 30:\n              _context12.next = 32;\n              return croSkullsStaking.getTokensIds();\n\n            case 32:\n              inStakeTokens = _context12.sent;\n              _context12.next = 35;\n              return fetch('https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F');\n\n            case 35:\n              rawEbisusData = _context12.sent;\n              _context12.next = 38;\n              return rawEbisusData.json();\n\n            case 38:\n              ebisusData = _context12.sent;\n              ebisusData = ebisusData.collections[0];\n              _context12.next = 42;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 42:\n              rawResult = _context12.sent;\n              _context12.next = 45;\n              return rawResult.json();\n\n            case 45:\n              metaData = _context12.sent;\n              rarityPerTrait = [];\n              traitRariry = [];\n              totalRarity = 0;\n              metaData.map(function (skullData) {\n                var attributes = skullData.attributes;\n                attributes.map(function (trait, i) {\n                  totalRarity++;\n                  rarityPerTrait[trait.value] = rarityPerTrait[trait.value] > 0 ? rarityPerTrait[trait.value] + 1 : 1;\n                  traitRariry[trait.value] = 100 / totalRarity * rarityPerTrait[trait.value];\n                });\n              });\n              metaData.map(function (skullData, skullId) {\n                var attributes = skullData.attributes;\n                var rarityPower = 0;\n                attributes.map(function (trait, i) {\n                  rarityPower += rarityPerTrait[trait.value];\n                });\n                metaData[skullId].rarityPower = rarityPower;\n                metaData[skullId].rarityPercent = 100 / totalRarity * rarityPower;\n                metaData[skullId].rank = 0;\n              });\n              metaData.sort(function (a, b) {\n                return a.rarityPower - b.rarityPower;\n              });\n              metaData.map(function (skull, i) {\n                metaData[i].rank = i + 1;\n              });\n              metaData.sort(function (a, b) {\n                return a.edition - b.edition;\n              });\n              dispatch(skullsSuccess({\n                croSkulls: skulls,\n                croSkullsStaked: inStakeTokens,\n                advancedMetadata: metaData,\n                ebisusData: ebisusData\n              }));\n\n            case 55:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function (_x12) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/ProjectCroSkull/croskull-nft-marketplace/src/redux/data/dataActions.js"],"names":["store","updateMerchant","payload","type","fetchDataRequest","updateState","setPotions","cleanData","skullsSuccess","fetchStakingSuccess","stakingDisabled","notificationRequest","playSound","audioPath","dispatch","newAudioSrc","Audio","play","refreshSkullsStories","getState","blockchain","croSkullsDescription","croSkullsGrave","contractDetected","accountAddress","ethProvider","allowance","address","storyAllowance","toString","_getCostInGrave","storyCost","key","value","data","storiesLoading","storyLastBlock","skullsStories","storiesFilter","filters","DescriptionUpdate","on","content","console","log","getBlockNumber","currentBlock","finalBlock","blockLimit","storyEvents","storyLimit","i","length","push","queryFilter","apply","newSkullsStories","map","story","args","tokenId","ownerOf","ipfsHash","blocknumber","blockNumber","sort","a","b","sendNotification","title","message","tx","toTavern","skulls","croSkullsStaking","Array","skullsCount","stakeSkullTx","batchUnstakeSkulls","unstakeSkull","then","wait","getSkullsData","approveStories","costInGrave","approveTx","approve","toMission","batchStakeSkulls","stakeSkull","getStakingData","croSkullsPetEggs","croSkullsSouls","started","approvalStatus","isApproved","eggsPerAddress","petEggsLimit","minterList","petEggsMintedByUser","eggsLimit","petEggsMaxSupply","eggsCounter","petEggsSupply","eggCost","petEggsCost","approvedEggs","parseInt","balanceOf","userGraveBalance","calculateMalusFee","malusFee","calculateRewardsPlusMalus","rewardPlusMalus","calculateRewards","rewards","_rewardPerCycles","rewardPerCycle","_tenSecCyclesPassedLastWithdraw","cyclesLastWithdraw","startStakeTimestamp","userDetails","calculateDroppedSouls","soulsGenerated","alreadyClaimed","stakedSkullsCount","totalSkullsStaked","poolWithdrawedAmount","totalWithdrawedGraves","poolWithdrawedSouls","totalWithdrawedSouls","soulsBalance","daysSinceLastWithdraw","daysLastWithdraw","totalSupply","graveTotalSupply","burnedAmount","burnedGraves","lastWithdrawTimestamp","getBlock","lastBlock","blockTimestamp","timestamp","updateUserBalance","croSkullsContract","croPotionBlue","croPotionRed","redCount","blueCount","ownedTokensCount","tokenOfOwnerByIndex","getTokensIds","inStakeTokens","fetch","rawEbisusData","json","ebisusData","collections","rawResult","metaData","rarityPerTrait","traitRariry","totalRarity","skullData","attributes","trait","skullId","rarityPower","rarityPercent","rank","skull","edition","croSkulls","croSkullsStaked","advancedMetadata"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAE,iBADD;AAELD,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAEH,OAAF,EAAe;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAE,cADD;AAELD,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAEJ,OAAF,EAAe;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAE,aADD;AAELD,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAO;AACHJ,IAAAA,IAAI,EAAE;AADH,GAAP;AAGD,CAJM;;AAMP,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACN,OAAD,EAAa;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,gBADH;AAEHD,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAID,CALD;;AAOA,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACP,OAAD,EAAa;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,uBADD;AAELD,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,SAAO;AACLP,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACT,OAAD,EAAa;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAE,sBADD;AAELD,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAgB;AACvC;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,kBAAID,SAAJ,EAAe;AACTE,gBAAAA,WADS,GACK,IAAIC,KAAJ,CAAUH,SAAV,CADL;AAEbE,gBAAAA,WAAW,CAACE,IAAZ;AACD;;AAJI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAMD,CAPM;AASP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxC;AAAA,yEAAO,kBAAOJ,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCACyFd,KAAK,CAACmB,QAAN,GAAiBC,UAD1G,EACCC,oBADD,yBACCA,oBADD,EACuBC,cADvB,yBACuBA,cADvB,EACuCC,gBADvC,yBACuCA,gBADvC,EACyDC,cADzD,yBACyDA,cADzD,EACyEC,WADzE,yBACyEA,WADzE;;AAAA,oBAGD,CAAEF,gBAAF,IAAsB,CAAEC,cAHvB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAMEH,oBANF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAQsBC,cAAc,CAACI,SAAf,CAA0BF,cAA1B,EAA0CH,oBAAoB,CAACM,OAA/D,CARtB;;AAAA;AAQDC,cAAAA,cARC;AASLA,cAAAA,cAAc,GAAGA,cAAc,CAACC,QAAf,EAAjB;AATK;AAAA,qBAUiBR,oBAAoB,CAACS,eAArB,EAVjB;;AAAA;AAUDC,cAAAA,SAVC;AAWLA,cAAAA,SAAS,GAAGA,SAAS,CAACF,QAAV,EAAZ;AACAf,cAAAA,QAAQ,CACNT,WAAW,CAAE;AAAE2B,gBAAAA,GAAG,EAAE,gBAAP;AAAyBC,gBAAAA,KAAK,EAAEL,cAAc,IAAIG,SAAlB,GAA8B,IAA9B,GAAqC;AAArE,eAAF,CADL,CAAR;AAZK,qCAemD/B,KAAK,CAACmB,QAAN,GAAiBe,IAfpE,EAeCC,cAfD,wBAeCA,cAfD,EAeiBC,cAfjB,wBAeiBA,cAfjB,EAeiCC,aAfjC,wBAeiCA,aAfjC;;AAAA,mBAgBDF,cAhBC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiBLrB,cAAAA,QAAQ,CAACT,WAAW,CAAC;AACnB2B,gBAAAA,GAAG,EAAE,gBADc;AAEnBC,gBAAAA,KAAK,EAAE;AAFY,eAAD,CAAZ,CAAR;AAIIK,cAAAA,aArBC,GAqBejB,oBAAoB,CAACkB,OAArB,CAA6BC,iBAA7B,EArBf;AAuBLnB,cAAAA,oBAAoB,CAACoB,EAArB,CAAwB,mBAAxB,EAA6C,UAACC,OAAD,EAAa;AACxDC,gBAAAA,OAAO,CAACC,GAAR,CAAaF,OAAb;AACD,eAFD;AAvBK;AAAA,qBA0BoBjB,WAAW,CAACoB,cAAZ,EA1BpB;;AAAA;AA0BDC,cAAAA,YA1BC;AA2BL,kBAAIV,cAAJ,EACEU,YAAY,GAAGV,cAAf;AACEW,cAAAA,UA7BC,GA6BY,CA7BZ;AA8BDC,cAAAA,UA9BC,GA8BY,IA9BZ;AA+BDC,cAAAA,WA/BC,GA+Ba,EA/Bb;AAgCL;AACJ;;AAEQC,cAAAA,UAnCC,GAmCYd,cAAc,GAAG,EAAH,GAAQ,CAnClC;AAoCGe,cAAAA,CApCH,GAoCO,CApCP;;AAAA;AAAA,oBAoCUF,WAAW,CAACG,MAAZ,IAAsBF,UApChC;AAAA;AAAA;AAAA;;AAAA,6BAqCHD,WAAW,CAACI,IArCT;AAAA,6BAsCDJ,WAtCC;AAAA;AAAA,qBAuCK5B,oBAAoB,CAACiC,WAArB,CAAiChB,aAAjC,EAAgDQ,YAAY,GAAGK,CAAf,GAAmBH,UAAnE,EAA+EF,YAAY,GAAGK,CAA9F,CAvCL;;AAAA;AAAA;;AAAA,2BAqCcI,KArCd;;AAyCHR,cAAAA,UAAU,GAAGD,YAAY,GAAGK,CAAf,GAAmBH,UAAhC;;AAzCG;AAoC4CG,cAAAA,CAAC,IAAIH,UApCjD;AAAA;AAAA;;AAAA;AA2CDQ,cAAAA,gBA3CC,GA2CkB,EA3ClB;AA4CL,kBAAInB,aAAJ,EACEmB,gBAAgB,GAAGnB,aAAnB;AACFY,cAAAA,WAAW,CAACQ,GAAZ,CAAiB,UAAAC,KAAK,EAAI;AAAA,kCACaA,KAAK,CAACC,IADnB;AAAA,oBAClBC,OADkB,eAClBA,OADkB;AAAA,oBACTC,OADS,eACTA,OADS;AAAA,oBACAC,QADA,eACAA,QADA;AAExB,oBAAKN,gBAAgB,CAACI,OAAD,CAArB,EACE;AAEFJ,gBAAAA,gBAAgB,CAACI,OAAD,CAAhB,GAA4B;AAC1BA,kBAAAA,OAAO,EAAEA,OAAO,CAAC/B,QAAR,EADiB;AAE1BgC,kBAAAA,OAAO,EAAEA,OAFiB;AAG1BC,kBAAAA,QAAQ,EAAEA,QAHgB;AAI1BC,kBAAAA,WAAW,EAAEL,KAAK,CAACM;AAJO,iBAA5B;AAMD,eAXD;AAaAR,cAAAA,gBAAgB,CAACS,IAAjB,CAAuB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC/B,uBAAQA,CAAC,CAACJ,WAAF,GAAgBG,CAAC,CAACH,WAA1B;AACD,eAFD;AAIAjD,cAAAA,QAAQ,CAACT,WAAW,CAAC;AACnB2B,gBAAAA,GAAG,EAAE,eADc;AAEnBC,gBAAAA,KAAK,EAAEuB;AAFY,eAAD,CAAZ,CAAR;AAIA1C,cAAAA,QAAQ,CAACT,WAAW,CAAC;AACnB2B,gBAAAA,GAAG,EAAE,gBADc;AAEnBC,gBAAAA,KAAK,EAAE;AAFY,eAAD,CAAZ,CAAR;AAIAnB,cAAAA,QAAQ,CAACT,WAAW,CAAC;AACnB2B,gBAAAA,GAAG,EAAE,gBADc;AAEnBC,gBAAAA,KAAK,EAAEc;AAFY,eAAD,CAAZ,CAAR;;AAvEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA4ED,CA7EM;AA+EP,OAAO,IAAMqB,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAiC;AAAA,MAA9BC,KAA8B,SAA9BA,KAA8B;AAAA,MAAvBC,OAAuB,SAAvBA,OAAuB;AAAA,MAAdC,EAAc,SAAdA,EAAc;AAAA,MAAVpE,IAAU,SAAVA,IAAU;AAC7D;AAAA,yEAAO,kBAAOW,QAAP;AAAA;AAAA;AAAA;AAAA;AACLA,cAAAA,QAAQ,CAACH,mBAAmB,CAAC;AAAC0D,gBAAAA,KAAK,EAALA,KAAD;AAAQC,gBAAAA,OAAO,EAAPA,OAAR;AAAiBC,gBAAAA,EAAE,EAAFA,EAAjB;AAAqBpE,gBAAAA,IAAI,EAAJA;AAArB,eAAD,CAApB,CAAR;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAGH,CAJM;AAMP,OAAO,IAAMqE,QAAQ,GAAG,SAAXA,QAAW,GAAsB;AAAA,MAApBC,MAAoB,uEAAX,KAAW;AAAE;AAC9C;AAAA,yEAAO,kBAAO3D,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACC4D,cAAAA,gBADD,GACsB1E,KAAK,CAACmB,QAAN,GAAiBC,UADvC,CACCsD,gBADD;;AAGL,kBAAID,MAAM,YAAYE,KAAtB,EAA6B;AAC3BC,gBAAAA,WAAW,GAAGH,MAAM,CAACrB,MAArB;AACAyB,gBAAAA,YAAY,GAAIH,gBAAgB,CAACI,kBAAjB,CAAqCL,MAArC,CAAhB;AACD,eAHD,MAGK;AACHG,gBAAAA,WAAW,GAAG,CAAd;AACAC,gBAAAA,YAAY,GAAIH,gBAAgB,CAACK,YAAjB,CAA+BN,MAA/B,CAAhB;AACD;;AATI;AAAA,qBAWCI,YAAY,CAACG,IAAb;AAAA,qFACJ,kBAAOT,EAAP;AAAA;AAAA;AAAA;AAAA;AACEzD,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,oBADmB;AAExBC,4BAAAA,OAAO,EAAE,6BAFe;AAGxBC,4BAAAA,EAAE,EAAFA,EAHwB;AAIxBpE,4BAAAA,IAAI,EAAE;AAJkB,2BAAD,CAAjB,CAAR;AADF;AAAA,iCAOQoE,EAAE,CAACU,IAAH,CAAQ,CAAR,CAPR;;AAAA;AAQEnE,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,YADmB;AAExBC,4BAAAA,OAAO,YAAKM,WAAL,mBAAyBA,WAAW,GAAG,CAAd,GAAkB,GAAlB,GAAwB,EAAjD,eAFiB;AAGxBL,4BAAAA,EAAE,EAAFA,EAHwB;AAIxBpE,4BAAAA,IAAI,EAAE;AAJkB,2BAAD,CAAjB,CAAR;AAMAW,0BAAAA,QAAQ,CAACoE,aAAa,EAAd,CAAR;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADI;;AAAA;AAAA;AAAA;AAAA,kBAXD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA8BD,CA/BM;AAiCP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC;AAAA,yEAAO,kBAAQrE,QAAR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uCAC0Cd,KAAK,CAACmB,QAAN,GAAiBC,UAD3D,EACCC,oBADD,0BACCA,oBADD,EACuBC,cADvB,0BACuBA,cADvB;AAAA;AAAA,qBAEmBD,oBAAoB,CAACS,eAArB,EAFnB;;AAAA;AAEDsD,cAAAA,WAFC;AAGLA,cAAAA,WAAW,GAAG,CAACA,WAAW,GAAG,EAAf,EAAmBvD,QAAnB,EAAd;AACIwD,cAAAA,SAJC,GAIW/D,cAAc,CAACgE,OAAf,CAAwBjE,oBAAoB,CAACM,OAA7C,EAAsDyD,WAAtD,CAJX;AAAA;AAAA,qBAKCC,SAAS,CAACL,IAAV;AAAA,qFACJ,kBAAOT,EAAP;AAAA;AAAA;AAAA;AAAA;AACEzD,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,oBADmB;AAExBC,4BAAAA,OAAO,EAAE,2BAFe;AAGxBC,4BAAAA,EAAE,EAAFA,EAHwB;AAIxBpE,4BAAAA,IAAI,EAAE;AAJkB,2BAAD,CAAjB,CAAR;AADF;AAAA,iCAOQoE,EAAE,CAACU,IAAH,CAAQ,CAAR,CAPR;;AAAA;AAQEnE,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,YADmB;AAExBE,4BAAAA,EAAE,EAAFA,EAFwB;AAGxBpE,4BAAAA,IAAI,EAAE;AAHkB,2BAAD,CAAjB,CAAR;AAKAW,0BAAAA,QAAQ,CAAET,WAAW,CAAE;AACrB2B,4BAAAA,GAAG,EAAE,gBADgB;AAErBC,4BAAAA,KAAK,EAAE;AAFc,2BAAF,CAAb,CAAR;;AAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADI;;AAAA;AAAA;AAAA;AAAA,kBALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA0BD,CA3BM;AA6BP,OAAO,IAAMsD,SAAS,GAAG,SAAZA,SAAY,GAAsB;AAAA,MAApBd,MAAoB,uEAAX,KAAW;AAAE;AAC/C;AAAA,yEAAO,kBAAO3D,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACC4D,cAAAA,gBADD,GACsB1E,KAAK,CAACmB,QAAN,GAAiBC,UADvC,CACCsD,gBADD;;AAGL,kBAAID,MAAM,YAAYE,KAAtB,EAA6B;AAC3BC,gBAAAA,WAAW,GAAGH,MAAM,CAACrB,MAArB;AACAyB,gBAAAA,YAAY,GAAIH,gBAAgB,CAACc,gBAAjB,CAAmCf,MAAnC,CAAhB;AACD,eAHD,MAGK;AACHG,gBAAAA,WAAW,GAAG,CAAd;AACAC,gBAAAA,YAAY,GAAIH,gBAAgB,CAACe,UAAjB,CAA6BhB,MAA7B,CAAhB;AACD;;AATI;AAAA,qBAWCI,YAAY,CAACG,IAAb;AAAA,sFACJ,kBAAOT,EAAP;AAAA;AAAA;AAAA;AAAA;AACEzD,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,oBADmB;AAExBC,4BAAAA,OAAO,EAAE,2BAFe;AAGxBC,4BAAAA,EAAE,EAAFA,EAHwB;AAIxBpE,4BAAAA,IAAI,EAAE;AAJkB,2BAAD,CAAjB,CAAR;AADF;AAAA,iCAOQoE,EAAE,CAACU,IAAH,CAAQ,CAAR,CAPR;;AAAA;AAQEnE,0BAAAA,QAAQ,CAACsD,gBAAgB,CAAC;AACxBC,4BAAAA,KAAK,YADmB;AAExBC,4BAAAA,OAAO,YAAKM,WAAL,mBAAyBA,WAAW,GAAG,CAAd,GAAkB,GAAlB,GAAwB,EAAjD,YAFiB;AAGxBL,4BAAAA,EAAE,EAAFA,EAHwB;AAIxBpE,4BAAAA,IAAI,EAAE;AAJkB,2BAAD,CAAjB,CAAR;AAMAW,0BAAAA,QAAQ,CAACoE,aAAa,EAAd,CAAR;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADI;;AAAA;AAAA;AAAA;AAAA,kBAXD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA8BD,CA/BM;AAiCP,OAAO,IAAMQ,cAAc,GAAI,SAAlBA,cAAkB,GAAM;AACnC;AAAA,0EAAO,mBAAO5E,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL6B,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AADK,uCAUD5C,KAAK,CAACmB,QAAN,GAAiBC,UAVhB,EAGHsD,gBAHG,0BAGHA,gBAHG,EAIHnD,gBAJG,0BAIHA,gBAJG,EAKHoE,gBALG,0BAKHA,gBALG,EAMHrE,cANG,0BAMHA,cANG,EAOHsE,cAPG,0BAOHA,cAPG,EAQHpE,cARG,0BAQHA,cARG,EASHC,WATG,0BASHA,WATG;;AAAA,oBAWD,CAAEF,gBAAF,IAAsB,CAAEC,cAXvB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,qBAcekD,gBAAgB,CAACmB,OAAjB,EAdf;;AAAA;AAcDA,cAAAA,OAdC;;AAAA,mBAeDA,OAfC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAiBoBnB,gBAAgB,CAACoB,cAAjB,EAjBpB;;AAAA;AAiBCC,cAAAA,UAjBD;AAAA;AAAA,qBAkBsBJ,gBAAgB,CAACK,cAAjB,EAlBtB;;AAAA;AAkBCC,cAAAA,YAlBD;AAAA;AAAA,qBAmB6BN,gBAAgB,CAACO,UAAjB,CAA6B1E,cAA7B,CAnB7B;;AAAA;AAmBC2E,cAAAA,mBAnBD;AAAA;AAAA,qBAoB0BR,gBAAgB,CAACS,SAAjB,EApB1B;;AAAA;AAoBCC,cAAAA,gBApBD;AAAA;AAAA,qBAqBuBV,gBAAgB,CAACW,WAAjB,EArBvB;;AAAA;AAqBCC,cAAAA,aArBD;AAAA;AAAA,qBAsBqBZ,gBAAgB,CAACa,OAAjB,EAtBrB;;AAAA;AAsBCC,cAAAA,WAtBD;AAAA;AAAA,qBAuBsBnF,cAAc,CAACI,SAAf,CAA0BF,cAA1B,EAA0CmE,gBAAgB,CAAChE,OAA3D,CAvBtB;;AAAA;AAuBC+E,cAAAA,YAvBD;AAwBHT,cAAAA,YAAY,GAAGA,YAAY,CAACpE,QAAb,EAAf;AACAsE,cAAAA,mBAAmB,GAAGA,mBAAmB,CAACtE,QAApB,EAAtB;AACAwE,cAAAA,gBAAgB,GAAGA,gBAAgB,CAACxE,QAAjB,EAAnB;AACA0E,cAAAA,aAAa,GAAGA,aAAa,CAAC1E,QAAd,EAAhB;AACA4E,cAAAA,WAAW,GAAGA,WAAW,CAAC5E,QAAZ,EAAd;AACA6E,cAAAA,YAAY,GAAGA,YAAY,CAAC7E,QAAb,MAA2B8E,QAAQ,CAACF,WAAD,CAAlD;AA7BG;AAAA,qBAgC0BnF,cAAc,CAACsF,SAAf,CAAyBpF,cAAzB,CAhC1B;;AAAA;AAgCCqF,cAAAA,gBAhCD;AAiCHA,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAChF,QAAjB,EAAnB;AAEAf,cAAAA,QAAQ,CAACb,cAAc,CAAC;AACtBgG,gBAAAA,YAAY,EAAZA,YADsB;AAEtBE,gBAAAA,mBAAmB,EAAnBA,mBAFsB;AAGtBI,gBAAAA,aAAa,EAAbA,aAHsB;AAItBF,gBAAAA,gBAAgB,EAAhBA,gBAJsB;AAKtBI,gBAAAA,WAAW,EAAXA,WALsB;AAMtBC,gBAAAA,YAAY,EAAZA,YANsB;AAOtBG,gBAAAA,gBAAgB,EAAhBA;AAPsB,eAAD,CAAf,CAAR;;AAnCG,kBA6CGd,UA7CH;AAAA;AAAA;AAAA;;AA8CDjF,cAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AA9CC;AAAA;;AAAA;AAAA;AAAA,qBAgDoBgE,gBAAgB,CAACoC,iBAAjB,EAhDpB;;AAAA;AAgDGC,cAAAA,QAhDH;AAiDDA,cAAAA,QAAQ,GAAGA,QAAQ,CAAClF,QAAT,EAAX;AAjDC;AAAA,qBAmD2B6C,gBAAgB,CAACsC,yBAAjB,EAnD3B;;AAAA;AAmDGC,cAAAA,eAnDH;AAoDDA,cAAAA,eAAe,GAAGA,eAAe,CAAC,CAAD,CAAjC;AApDC;AAAA,qBAqDmBvC,gBAAgB,CAACwC,gBAAjB,EArDnB;;AAAA;AAqDGC,cAAAA,OArDH;AAAA;AAAA,qBAsD0BzC,gBAAgB,CAAC0C,gBAAjB,EAtD1B;;AAAA;AAsDGC,cAAAA,cAtDH;AAAA;AAAA,qBAuD8B3C,gBAAgB,CAAC4C,+BAAjB,EAvD9B;;AAAA;AAuDGC,cAAAA,kBAvDH;AAAA;AAAA,qBAwD+B7C,gBAAgB,CAAC8C,mBAAjB,EAxD/B;;AAAA;AAwDGA,cAAAA,mBAxDH;AAAA;AAAA,qBAyDuB9C,gBAAgB,CAAC+C,WAAjB,CAA8BjG,cAA9B,CAzDvB;;AAAA;AAyDGiG,cAAAA,WAzDH;AAAA;AAAA,qBA0D0B/C,gBAAgB,CAACgD,qBAAjB,EA1D1B;;AAAA;AA0DGC,cAAAA,cA1DH;AA2DGC,cAAAA,cA3DH,GA2DoBH,WAAW,CAACG,cA3DhC;AAAA;AAAA,qBA4D6BlD,gBAAgB,CAACmD,iBAAjB,EA5D7B;;AAAA;AA4DGC,cAAAA,iBA5DH;AAAA;AAAA,qBA6DiCpD,gBAAgB,CAACqD,oBAAjB,EA7DjC;;AAAA;AA6DGC,cAAAA,qBA7DH;AAAA;AAAA,qBA8DgCtD,gBAAgB,CAACuD,mBAAjB,EA9DhC;;AAAA;AA8DGC,cAAAA,oBA9DH;AAAA;AAAA,qBA+DwBtC,cAAc,CAACgB,SAAf,CAAyBpF,cAAzB,CA/DxB;;AAAA;AA+DG2G,cAAAA,YA/DH;AAAA;AAAA,qBAgE4BzD,gBAAgB,CAAC0D,qBAAjB,EAhE5B;;AAAA;AAgEGC,cAAAA,gBAhEH;AAAA;AAAA,qBAiE4B/G,cAAc,CAACgH,WAAf,EAjE5B;;AAAA;AAiEGC,cAAAA,gBAjEH;AAAA;AAAA,qBAkEwBjH,cAAc,CAACkH,YAAf,EAlExB;;AAAA;AAkEGC,cAAAA,YAlEH;AAmEDA,cAAAA,YAAY,GAAGA,YAAY,CAAC5G,QAAb,EAAf;AAEAwG,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBxG,QAApB,EAAnB;AAEI6G,cAAAA,qBAvEH,GAuE2BjB,WAAW,CAACiB,qBAAZ,CAAkC7G,QAAlC,EAvE3B;AAAA;AAAA,qBAyEsBJ,WAAW,CAACkH,QAAZ,EAzEtB;;AAAA;AAyEGC,cAAAA,SAzEH;AA0EGC,cAAAA,cA1EH,GA0EoBD,SAAS,CAACE,SA1E9B;AA4ED7B,cAAAA,eAAe,GAAGA,eAAe,CAACpF,QAAhB,EAAlB;AACAsF,cAAAA,OAAO,GAAGA,OAAO,CAACtF,QAAR,EAAV;AACAwF,cAAAA,cAAc,GAAGA,cAAc,CAACxF,QAAf,EAAjB;AACA0F,cAAAA,kBAAkB,GAAGA,kBAAkB,CAAC1F,QAAnB,EAArB;AACA2F,cAAAA,mBAAmB,GAAGA,mBAAmB,CAAC3F,QAApB,EAAtB;AACA8F,cAAAA,cAAc,GAAGA,cAAc,CAAC9F,QAAf,EAAjB;AACA+F,cAAAA,cAAc,GAAGA,cAAc,CAAC/F,QAAf,EAAjB;AACAiG,cAAAA,iBAAiB,GAAGA,iBAAiB,CAACjG,QAAlB,EAApB;AACAmG,cAAAA,qBAAqB,GAAGA,qBAAqB,CAACnG,QAAtB,EAAxB;AACAqG,cAAAA,oBAAoB,GAAGA,oBAAoB,CAACrG,QAArB,EAAvB;AACAsG,cAAAA,YAAY,GAAGA,YAAY,CAACtG,QAAb,EAAf;AACA0G,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAC1G,QAAjB,EAAnB;AAEAf,cAAAA,QAAQ,CAACL,mBAAmB,CAAC;AAC3BsG,gBAAAA,QAAQ,EAARA,QAD2B;AAE3BE,gBAAAA,eAAe,EAAfA,eAF2B;AAG3BE,gBAAAA,OAAO,EAAPA,OAH2B;AAI3BE,gBAAAA,cAAc,EAAdA,cAJ2B;AAK3BE,gBAAAA,kBAAkB,EAAlBA,kBAL2B;AAM3BC,gBAAAA,mBAAmB,EAAnBA,mBAN2B;AAO3BoB,gBAAAA,SAAS,EAATA,SAP2B;AAQ3BC,gBAAAA,cAAc,EAAdA,cAR2B;AAS3BpB,gBAAAA,WAAW,EAAXA,WAT2B;AAU3BG,gBAAAA,cAAc,EAAdA,cAV2B;AAW3BD,gBAAAA,cAAc,EAAdA,cAX2B;AAY3BG,gBAAAA,iBAAiB,EAAjBA,iBAZ2B;AAa3BE,gBAAAA,qBAAqB,EAArBA,qBAb2B;AAc3BE,gBAAAA,oBAAoB,EAApBA,oBAd2B;AAe3BQ,gBAAAA,qBAAqB,EAArBA,qBAf2B;AAgB3BP,gBAAAA,YAAY,EAAZA,YAhB2B;AAiB3BE,gBAAAA,gBAAgB,EAAhBA,gBAjB2B;AAkB3BI,gBAAAA,YAAY,EAAZA,YAlB2B;AAmB3BF,gBAAAA,gBAAgB,EAAhBA;AAnB2B,eAAD,CAApB,CAAR;;AAzFC;AAAA;AAAA;;AAAA;AAgHHzH,cAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;;AAhHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAmHD,CApHM;AAsHP,OAAO,IAAMqI,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrC;AAAA,0EAAO,mBAAOjI,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uCACmCd,KAAK,CAACmB,QAAN,GAAiBC,UADpD,EACCE,cADD,0BACCA,cADD,EACiBE,cADjB,0BACiBA,cADjB;AAAA;AAAA,qBAEwBF,cAAc,CAACsF,SAAf,CAAyBpF,cAAzB,CAFxB;;AAAA;AAEDqF,cAAAA,gBAFC;AAGLA,cAAAA,gBAAgB,GAAGA,gBAAgB,CAAChF,QAAjB,EAAnB;AACAf,cAAAA,QAAQ,CAACT,WAAW,CAAC;AACnB2B,gBAAAA,GAAG,EAAE,kBADc;AAEnBC,gBAAAA,KAAK,EAAE4E;AAFY,eAAD,CAAZ,CAAR;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AASD,CAVM;AAYP,OAAO,IAAM3B,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC;AAAA,0EAAO,mBAAOpE,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACH6B,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA9B,cAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;AAFG,uCAUCJ,KAAK,CAACmB,QAAN,GAAiBC,UAVlB,EAIC4H,iBAJD,0BAICA,iBAJD,EAKCtE,gBALD,0BAKCA,gBALD,EAMClD,cAND,0BAMCA,cAND,EAOCyH,aAPD,0BAOCA,aAPD,EAQCC,YARD,0BAQCA,YARD,EASCzH,WATD,0BASCA,WATD;;AAAA,kBAWGuH,iBAXH;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAaHlI,cAAAA,QAAQ,CAACI,oBAAoB,EAArB,CAAR;AAbG;AAAA,qBAckBgI,YAAY,CAACtC,SAAb,CAAuBpF,cAAvB,CAdlB;;AAAA;AAcC2H,cAAAA,QAdD;AAAA;AAAA,qBAemBF,aAAa,CAACrC,SAAd,CAAwBpF,cAAxB,CAfnB;;AAAA;AAeC4H,cAAAA,SAfD;AAgBHD,cAAAA,QAAQ,GAAGA,QAAQ,CAACtH,QAAT,EAAX;AACAuH,cAAAA,SAAS,GAAGA,SAAS,CAACvH,QAAV,EAAZ;AACAf,cAAAA,QAAQ,CAAER,UAAU,CAAC;AACjB6I,gBAAAA,QAAQ,EAARA,QADiB;AAEjBC,gBAAAA,SAAS,EAATA;AAFiB,eAAD,CAAZ,CAAR;AAIAtI,cAAAA,QAAQ,CAAC4E,cAAc,EAAf,CAAR;AAtBG;AAAA,qBAuB0BsD,iBAAiB,CAACpC,SAAlB,CAA4BpF,cAA5B,CAvB1B;;AAAA;AAuBC6H,cAAAA,gBAvBD;AAwBHA,cAAAA,gBAAgB,GAAGA,gBAAgB,CAACxH,QAAjB,EAAnB;AACI4C,cAAAA,MAzBD,GAyBU,EAzBV;AA0BMtB,cAAAA,CA1BN,GA0BU,CA1BV;;AAAA;AAAA,oBA0BaA,CAAC,GAAGkG,gBA1BjB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2BmBL,iBAAiB,CAACM,mBAAlB,CAAsC9H,cAAtC,EAAsD2B,CAAtD,CA3BnB;;AAAA;AA2BGS,cAAAA,OA3BH;AA4BDa,cAAAA,MAAM,CAACpB,IAAP,CAAaO,OAAO,CAAC/B,QAAR,EAAb;;AA5BC;AA0BmCsB,cAAAA,CAAC,EA1BpC;AAAA;AAAA;;AAAA;AAAA;AAAA,qBA8BuBuB,gBAAgB,CAAC6E,YAAjB,EA9BvB;;AAAA;AA8BCC,cAAAA,aA9BD;AAAA;AAAA,qBA+ByBC,KAAK,CAAE,6FAAF,CA/B9B;;AAAA;AA+BGC,cAAAA,aA/BH;AAAA;AAAA,qBAgCoBA,aAAa,CAACC,IAAd,EAhCpB;;AAAA;AAgCCC,cAAAA,UAhCD;AAiCHA,cAAAA,UAAU,GAAGA,UAAU,CAACC,WAAX,CAAuB,CAAvB,CAAb;AAjCG;AAAA,qBAkCqBJ,KAAK,CAAE,+FAAF,CAlC1B;;AAAA;AAkCGK,cAAAA,SAlCH;AAAA;AAAA,qBAmCkBA,SAAS,CAACH,IAAV,EAnClB;;AAAA;AAmCCI,cAAAA,QAnCD;AAoCCC,cAAAA,cApCD,GAoCkB,EApClB;AAqCCC,cAAAA,WArCD,GAqCe,EArCf;AAsCCC,cAAAA,WAtCD,GAsCe,CAtCf;AAuCHH,cAAAA,QAAQ,CAACtG,GAAT,CAAc,UAAC0G,SAAD,EAAe;AAAA,oBACrBC,UADqB,GACND,SADM,CACrBC,UADqB;AAE3BA,gBAAAA,UAAU,CAAC3G,GAAX,CAAgB,UAAE4G,KAAF,EAASlH,CAAT,EAAgB;AAC9B+G,kBAAAA,WAAW;AACXF,kBAAAA,cAAc,CAACK,KAAK,CAACpI,KAAP,CAAd,GAA8B+H,cAAc,CAACK,KAAK,CAACpI,KAAP,CAAd,GAA8B,CAA9B,GAAkC+H,cAAc,CAACK,KAAK,CAACpI,KAAP,CAAd,GAA8B,CAAhE,GAAoE,CAAlG;AACAgI,kBAAAA,WAAW,CAACI,KAAK,CAACpI,KAAP,CAAX,GAA2B,MAAMiI,WAAN,GAAoBF,cAAc,CAACK,KAAK,CAACpI,KAAP,CAA7D;AACD,iBAJD;AAKD,eAPD;AASA8H,cAAAA,QAAQ,CAACtG,GAAT,CAAc,UAAC0G,SAAD,EAAYG,OAAZ,EAAwB;AAAA,oBAC9BF,UAD8B,GACfD,SADe,CAC9BC,UAD8B;AAEpC,oBAAIG,WAAW,GAAG,CAAlB;AACAH,gBAAAA,UAAU,CAAC3G,GAAX,CAAgB,UAAE4G,KAAF,EAASlH,CAAT,EAAgB;AAC9BoH,kBAAAA,WAAW,IAAIP,cAAc,CAACK,KAAK,CAACpI,KAAP,CAA7B;AACD,iBAFD;AAGA8H,gBAAAA,QAAQ,CAACO,OAAD,CAAR,CAAkBC,WAAlB,GAAgCA,WAAhC;AACAR,gBAAAA,QAAQ,CAACO,OAAD,CAAR,CAAkBE,aAAlB,GAAkC,MAAMN,WAAN,GAAoBK,WAAtD;AACAR,gBAAAA,QAAQ,CAACO,OAAD,CAAR,CAAkBG,IAAlB,GAAyB,CAAzB;AACD,eATD;AAYAV,cAAAA,QAAQ,CAAC9F,IAAT,CAAe,UAACC,CAAD,EAAIC,CAAJ,EAAW;AACxB,uBAAOD,CAAC,CAACqG,WAAF,GAAgBpG,CAAC,CAACoG,WAAzB;AACD,eAFD;AAGAR,cAAAA,QAAQ,CAACtG,GAAT,CAAc,UAACiH,KAAD,EAAQvH,CAAR,EAAe;AAC3B4G,gBAAAA,QAAQ,CAAC5G,CAAD,CAAR,CAAYsH,IAAZ,GAAmBtH,CAAC,GAAC,CAArB;AACD,eAFD;AAGA4G,cAAAA,QAAQ,CAAC9F,IAAT,CAAe,UAACC,CAAD,EAAGC,CAAH,EAAS;AACtB,uBAAOD,CAAC,CAACyG,OAAF,GAAYxG,CAAC,CAACwG,OAArB;AACD,eAFD;AAKA7J,cAAAA,QAAQ,CAACN,aAAa,CAAE;AACpBoK,gBAAAA,SAAS,EAAEnG,MADS;AAEpBoG,gBAAAA,eAAe,EAAErB,aAFG;AAGpBsB,gBAAAA,gBAAgB,EAAEf,QAHE;AAIpBH,gBAAAA,UAAU,EAAEA;AAJQ,eAAF,CAAd,CAAR;;AAvEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA+ED,CAhFM","sourcesContent":["import store from \"../store\";\r\n\r\nconst updateMerchant = (payload) => {\r\n  return {\r\n    type: \"UPDATE_MERCHANT\",\r\n    payload: payload\r\n  }\r\n}\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst updateState = ( payload ) => {\r\n  return {\r\n    type: \"UPDATE_STATE\",\r\n    payload: payload\r\n  }\r\n}\r\n\r\nconst setPotions = ( payload ) => {\r\n  return {\r\n    type: \"SET_POTIONS\",\r\n    payload: payload\r\n  }\r\n}\r\n\r\nexport const cleanData = () => {\r\n  return {\r\n      type: \"CLEAN_DATA\"\r\n  }\r\n}\r\n\r\nconst skullsSuccess = (payload) => {\r\n  return {\r\n      type: \"SKULLS_SUCCESS\",\r\n      payload: payload\r\n  }\r\n}\r\n\r\nconst fetchStakingSuccess = (payload) => {\r\n  return {\r\n    type: \"FETCH_STAKING_SUCCESS\",\r\n    payload: payload\r\n  }\r\n}\r\n\r\nconst stakingDisabled = () => {\r\n  return {\r\n    type: \"STAKING_DISABLED\",\r\n  }\r\n}\r\n\r\nconst notificationRequest = (payload) => {\r\n  return {\r\n    type: \"NOTIFICATION_REQUEST\",\r\n    payload: payload\r\n  }\r\n}\r\n\r\nexport const playSound = (audioPath ) => {\r\n  return async (dispatch) => { \r\n    if( audioPath ){\r\n      let newAudioSrc = new Audio(audioPath)\r\n      newAudioSrc.play()\r\n    }\r\n  }\r\n}\r\n\r\nexport const refreshSkullsStories = () => {\r\n  return async (dispatch) => {\r\n    let { croSkullsDescription, croSkullsGrave, contractDetected, accountAddress, ethProvider } = store.getState().blockchain\r\n\r\n    if( ! contractDetected || ! accountAddress)\r\n      return\r\n\r\n    if ( ! croSkullsDescription ) return\r\n\r\n    let storyAllowance = await croSkullsGrave.allowance( accountAddress, croSkullsDescription.address )\r\n    storyAllowance = storyAllowance.toString()\r\n    let storyCost = await croSkullsDescription._getCostInGrave()\r\n    storyCost = storyCost.toString()\r\n    dispatch( \r\n      updateState( { key: \"storyAllowance\", value: storyAllowance >= storyCost ? true : false } \r\n    ))\r\n    let { storiesLoading, storyLastBlock, skullsStories } = store.getState().data\r\n    if( storiesLoading ) return;\r\n    dispatch(updateState({\r\n      key: 'storiesLoading',\r\n      value: true\r\n    }))\r\n    let storiesFilter = croSkullsDescription.filters.DescriptionUpdate()\r\n\r\n    croSkullsDescription.on('DescriptionUpdate', (content) => {\r\n      console.log( content )\r\n    })\r\n    let currentBlock = await ethProvider.getBlockNumber()\r\n    if( storyLastBlock )\r\n      currentBlock = storyLastBlock;\r\n    let finalBlock = 0;\r\n    let blockLimit = 2000;\r\n    let storyEvents = [];\r\n    /*if( skullsStories.length )\r\n      storyEvents = skullsStories*/\r\n\r\n    let storyLimit = storyLastBlock ? 20 : 5;\r\n    for(let i = 0; storyEvents.length <= storyLimit; i += blockLimit){ \r\n      storyEvents.push.apply(\r\n        storyEvents, \r\n        await croSkullsDescription.queryFilter(storiesFilter, currentBlock - i - blockLimit, currentBlock - i )\r\n      )\r\n      finalBlock = currentBlock - i - blockLimit;\r\n    }\r\n    let newSkullsStories = []\r\n    if( skullsStories)\r\n      newSkullsStories = skullsStories\r\n    storyEvents.map( story => {\r\n      let { tokenId, ownerOf, ipfsHash } = story.args;\r\n      if ( newSkullsStories[tokenId] )\r\n        return\r\n\r\n      newSkullsStories[tokenId] = {\r\n        tokenId: tokenId.toString(),\r\n        ownerOf: ownerOf,\r\n        ipfsHash: ipfsHash,\r\n        blocknumber: story.blockNumber\r\n      }\r\n    })\r\n\r\n    newSkullsStories.sort( (a, b) => {\r\n      return  b.blocknumber - a.blocknumber\r\n    })\r\n\r\n    dispatch(updateState({\r\n      key: 'skullsStories',\r\n      value: newSkullsStories\r\n    }))\r\n    dispatch(updateState({\r\n      key: 'storiesLoading',\r\n      value: false\r\n    }))\r\n    dispatch(updateState({\r\n      key: 'storyLastBlock',\r\n      value: finalBlock\r\n    }))\r\n  }\r\n}\r\n\r\nexport const sendNotification = ({ title, message, tx, type}) => {\r\n    return async (dispatch) => {\r\n      dispatch(notificationRequest({title, message, tx, type}))\r\n    }\r\n}\r\n\r\nexport const toTavern = ( skulls = false ) => { // UnStake Skull\r\n  return async (dispatch) => {\r\n    let { croSkullsStaking } = store.getState().blockchain\r\n    let stakeSkullTx, skullsCount\r\n    if( skulls instanceof Array ){\r\n      skullsCount = skulls.length\r\n      stakeSkullTx =  croSkullsStaking.batchUnstakeSkulls( skulls )\r\n    }else{\r\n      skullsCount = 1\r\n      stakeSkullTx =  croSkullsStaking.unstakeSkull( skulls )\r\n    }\r\n\r\n    await stakeSkullTx.then(\r\n      async (tx) => {\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmation...',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(2)\r\n        dispatch(sendNotification({\r\n          title: `Success!`,\r\n          message: `${skullsCount} Skull${skullsCount > 1 ? 's' : ''} unstaked!`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch(getSkullsData())\r\n      }\r\n    ) \r\n  }\r\n}\r\n\r\nexport const approveStories = () => {\r\n  return async ( dispatch ) => {\r\n    let { croSkullsDescription, croSkullsGrave } = store.getState().blockchain\r\n    let costInGrave = await croSkullsDescription._getCostInGrave()\r\n    costInGrave = (costInGrave * 10).toString()\r\n    let approveTx = croSkullsGrave.approve( croSkullsDescription.address, costInGrave )\r\n    await approveTx.then(\r\n      async (tx) => {\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmations',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(2)\r\n        dispatch(sendNotification({\r\n          title: `Success!`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch( updateState( {\r\n          key: \"storyAllowance\",\r\n          value: true\r\n        }))\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nexport const toMission = ( skulls = false ) => { // UnStake Skull\r\n  return async (dispatch) => {\r\n    let { croSkullsStaking } = store.getState().blockchain\r\n    let stakeSkullTx, skullsCount;\r\n    if( skulls instanceof Array ){\r\n      skullsCount = skulls.length\r\n      stakeSkullTx =  croSkullsStaking.batchStakeSkulls( skulls )\r\n    }else{\r\n      skullsCount = 1\r\n      stakeSkullTx =  croSkullsStaking.stakeSkull( skulls )\r\n    }\r\n\r\n    await stakeSkullTx.then(\r\n      async (tx) => {\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmations',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(2)\r\n        dispatch(sendNotification({\r\n          title: `Success!`,\r\n          message: `${skullsCount} Skull${skullsCount > 1 ? 's' : ''} staked`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch(getSkullsData())\r\n      }\r\n    )\r\n  }\r\n}\r\n\r\nexport const getStakingData =  () => {\r\n  return async (dispatch) => {\r\n    console.log('getStakingData')\r\n    let {\r\n      croSkullsStaking, \r\n      contractDetected, \r\n      croSkullsPetEggs, \r\n      croSkullsGrave, \r\n      croSkullsSouls,\r\n      accountAddress,\r\n      ethProvider\r\n    } = store.getState().blockchain;\r\n    if( ! contractDetected || ! accountAddress)\r\n      return\r\n\r\n    let started = await croSkullsStaking.started()\r\n    if( started ){\r\n      \r\n      let isApproved = await croSkullsStaking.approvalStatus()\r\n      let petEggsLimit = await croSkullsPetEggs.eggsPerAddress()\r\n      let petEggsMintedByUser = await croSkullsPetEggs.minterList( accountAddress )\r\n      let petEggsMaxSupply = await croSkullsPetEggs.eggsLimit()\r\n      let petEggsSupply = await croSkullsPetEggs.eggsCounter()\r\n      let petEggsCost = await croSkullsPetEggs.eggCost()\r\n      let approvedEggs = await croSkullsGrave.allowance( accountAddress, croSkullsPetEggs.address )\r\n      petEggsLimit = petEggsLimit.toString()\r\n      petEggsMintedByUser = petEggsMintedByUser.toString()\r\n      petEggsMaxSupply = petEggsMaxSupply.toString()\r\n      petEggsSupply = petEggsSupply.toString()\r\n      petEggsCost = petEggsCost.toString()\r\n      approvedEggs = approvedEggs.toString() >= parseInt(petEggsCost)\r\n\r\n\r\n      let userGraveBalance = await croSkullsGrave.balanceOf(accountAddress)\r\n      userGraveBalance = userGraveBalance.toString()\r\n\r\n      dispatch(updateMerchant({\r\n        petEggsLimit,\r\n        petEggsMintedByUser,\r\n        petEggsSupply,\r\n        petEggsMaxSupply,\r\n        petEggsCost,\r\n        approvedEggs,\r\n        userGraveBalance\r\n      }))\r\n\r\n      if( ! isApproved ){\r\n        dispatch(stakingDisabled())\r\n      }else{\r\n        let malusFee = await croSkullsStaking.calculateMalusFee()\r\n        malusFee = malusFee.toString()\r\n\r\n        let rewardPlusMalus = await croSkullsStaking.calculateRewardsPlusMalus()\r\n        rewardPlusMalus = rewardPlusMalus[0]\r\n        let rewards = await croSkullsStaking.calculateRewards()\r\n        let rewardPerCycle = await croSkullsStaking._rewardPerCycles()\r\n        let cyclesLastWithdraw = await croSkullsStaking._tenSecCyclesPassedLastWithdraw()\r\n        let startStakeTimestamp = await croSkullsStaking.startStakeTimestamp()\r\n        let userDetails = await croSkullsStaking.userDetails( accountAddress )\r\n        let soulsGenerated = await croSkullsStaking.calculateDroppedSouls();\r\n        let alreadyClaimed = userDetails.alreadyClaimed\r\n        let totalSkullsStaked = await croSkullsStaking.stakedSkullsCount()\r\n        let totalWithdrawedGraves = await croSkullsStaking.poolWithdrawedAmount()\r\n        let totalWithdrawedSouls = await croSkullsStaking.poolWithdrawedSouls()\r\n        let soulsBalance = await croSkullsSouls.balanceOf(accountAddress)\r\n        let daysLastWithdraw = await croSkullsStaking.daysSinceLastWithdraw()\r\n        let graveTotalSupply = await croSkullsGrave.totalSupply();\r\n        let burnedGraves = await croSkullsGrave.burnedAmount()\r\n        burnedGraves = burnedGraves.toString()\r\n\r\n        daysLastWithdraw = daysLastWithdraw[0].toString()\r\n\r\n        let lastWithdrawTimestamp = userDetails.lastWithdrawTimestamp.toString()\r\n        \r\n        let lastBlock =  await ethProvider.getBlock()\r\n        let blockTimestamp = lastBlock.timestamp;\r\n        \r\n        rewardPlusMalus = rewardPlusMalus.toString()\r\n        rewards = rewards.toString()\r\n        rewardPerCycle = rewardPerCycle.toString()\r\n        cyclesLastWithdraw = cyclesLastWithdraw.toString()\r\n        startStakeTimestamp = startStakeTimestamp.toString()\r\n        soulsGenerated = soulsGenerated.toString()\r\n        alreadyClaimed = alreadyClaimed.toString()\r\n        totalSkullsStaked = totalSkullsStaked.toString()\r\n        totalWithdrawedGraves = totalWithdrawedGraves.toString()\r\n        totalWithdrawedSouls = totalWithdrawedSouls.toString()\r\n        soulsBalance = soulsBalance.toString()\r\n        graveTotalSupply = graveTotalSupply.toString()\r\n        \r\n        dispatch(fetchStakingSuccess({\r\n          malusFee,\r\n          rewardPlusMalus,\r\n          rewards,\r\n          rewardPerCycle,\r\n          cyclesLastWithdraw,\r\n          startStakeTimestamp,\r\n          lastBlock,\r\n          blockTimestamp,\r\n          userDetails,\r\n          alreadyClaimed,\r\n          soulsGenerated,\r\n          totalSkullsStaked,\r\n          totalWithdrawedGraves,\r\n          totalWithdrawedSouls,\r\n          lastWithdrawTimestamp,\r\n          soulsBalance,\r\n          daysLastWithdraw,\r\n          burnedGraves,\r\n          graveTotalSupply\r\n        }))\r\n      }\r\n    }else{\r\n      dispatch(stakingDisabled())\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUserBalance = () => {\r\n  return async (dispatch) => {\r\n    let { croSkullsGrave, accountAddress} = store.getState().blockchain\r\n    let userGraveBalance = await croSkullsGrave.balanceOf(accountAddress)\r\n    userGraveBalance = userGraveBalance.toString()\r\n    dispatch(updateState({\r\n      key: 'userGraveBalance',\r\n      value: userGraveBalance\r\n    }))\r\n  }\r\n}\r\n\r\nexport const getSkullsData = () => {\r\n  return async (dispatch) => {\r\n      console.log('getSkullsData')\r\n      dispatch(fetchDataRequest());\r\n      let {\r\n          croSkullsContract,\r\n          croSkullsStaking,\r\n          accountAddress,\r\n          croPotionBlue,\r\n          croPotionRed,\r\n          ethProvider\r\n      } = store.getState().blockchain\r\n      if( ! croSkullsContract )\r\n        return\r\n      dispatch(refreshSkullsStories())\r\n      let redCount = await croPotionRed.balanceOf(accountAddress)\r\n      let blueCount = await croPotionBlue.balanceOf(accountAddress)\r\n      redCount = redCount.toString()\r\n      blueCount = blueCount.toString()\r\n      dispatch( setPotions({\r\n          redCount,\r\n          blueCount\r\n        }) )\r\n      dispatch(getStakingData())\r\n      let ownedTokensCount = await croSkullsContract.balanceOf(accountAddress)\r\n      ownedTokensCount = ownedTokensCount.toString()\r\n      let skulls = [];\r\n      for( let i = 0; i < ownedTokensCount; i++) {\r\n        let tokenId = await croSkullsContract.tokenOfOwnerByIndex(accountAddress, i)\r\n        skulls.push( tokenId.toString() )\r\n      }\r\n      let inStakeTokens = await croSkullsStaking.getTokensIds()\r\n      const rawEbisusData = await fetch( 'https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F' );\r\n      let ebisusData = await rawEbisusData.json();\r\n      ebisusData = ebisusData.collections[0]\r\n      const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n      let metaData = await rawResult.json();\r\n      let rarityPerTrait = []\r\n      let traitRariry = []\r\n      let totalRarity = 0;\r\n      metaData.map( (skullData) => {\r\n        let { attributes } = skullData\r\n        attributes.map( ( trait, i ) => {\r\n          totalRarity++\r\n          rarityPerTrait[trait.value] = rarityPerTrait[trait.value] > 0 ? rarityPerTrait[trait.value] + 1 : 1\r\n          traitRariry[trait.value] = 100 / totalRarity * rarityPerTrait[trait.value]\r\n        })\r\n      })\r\n\r\n      metaData.map( (skullData, skullId) => {\r\n        let { attributes } = skullData\r\n        let rarityPower = 0;\r\n        attributes.map( ( trait, i ) => {\r\n          rarityPower += rarityPerTrait[trait.value]\r\n        })\r\n        metaData[skullId].rarityPower = rarityPower\r\n        metaData[skullId].rarityPercent = 100 / totalRarity * rarityPower\r\n        metaData[skullId].rank = 0\r\n      })\r\n\r\n      \r\n      metaData.sort( (a, b ) => {\r\n        return a.rarityPower - b.rarityPower\r\n      })\r\n      metaData.map( (skull, i ) => {\r\n        metaData[i].rank = i+1\r\n      })\r\n      metaData.sort( (a,b) => {\r\n        return a.edition - b.edition\r\n      })\r\n\r\n\r\n      dispatch(skullsSuccess( {\r\n          croSkulls: skulls,\r\n          croSkullsStaked: inStakeTokens,\r\n          advancedMetadata: metaData,\r\n          ebisusData: ebisusData\r\n      }))\r\n  }\r\n  \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}