{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nvar multicodec = require('multicodec');\n\nvar loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure(function (api, opts) {\n  var load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/put')>}\n   */\n\n  var put = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode) {\n      var options,\n          encodingOptions,\n          cid,\n          settings,\n          format,\n          serialized,\n          controller,\n          signal,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n            case 5:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n            case 7:\n              if (options.cid) {\n                cid = new CID(options.cid);\n                encodingOptions = _objectSpread({}, options, {\n                  format: multicodec.getName(cid.code),\n                  hashAlg: multihash.decode(cid.multihash).name\n                });\n                delete options.cid;\n              } else {\n                encodingOptions = options;\n              }\n\n              settings = _objectSpread({\n                format: 'dag-cbor',\n                hashAlg: 'sha2-256',\n                inputEnc: 'raw'\n              }, encodingOptions);\n              _context.next = 11;\n              return load(settings.format);\n\n            case 11:\n              format = _context.sent;\n              serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, settings.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                timeout: settings.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(settings)\n              };\n              _context.next = 20;\n              return multipartRequest(serialized, controller, settings.headers);\n\n            case 20:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 24;\n              return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n            case 24:\n              res = _context.sent;\n              _context.next = 27;\n              return res.json();\n\n            case 27:\n              data = _context.sent;\n              return _context.abrupt(\"return\", new CID(data.Cid['/']));\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function put(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}