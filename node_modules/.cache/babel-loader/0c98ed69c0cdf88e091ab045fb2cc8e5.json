{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar gov_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/gov\");\n\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\n\nvar long_1 = __importDefault(require(\"long\"));\n\nfunction omitDefault(input) {\n  if (typeof input === \"string\") {\n    return input === \"\" ? undefined : input;\n  }\n\n  if (typeof input === \"number\") {\n    return input === 0 ? undefined : input;\n  }\n\n  if (long_1.default.isLong(input)) {\n    return input.isZero() ? undefined : input;\n  }\n\n  throw new Error(\"Got unsupported type '\".concat(typeof input, \"'\"));\n}\n\nfunction createDefaultTypes(prefix) {\n  return {\n    // bank\n    \"/cosmos.bank.v1beta1.MsgSend\": {\n      aminoType: \"cosmos-sdk/MsgSend\",\n      toAmino: function toAmino(_ref) {\n        var fromAddress = _ref.fromAddress,\n            toAddress = _ref.toAddress,\n            amount = _ref.amount;\n        return {\n          from_address: fromAddress,\n          to_address: toAddress,\n          amount: _toConsumableArray(amount)\n        };\n      },\n      fromAmino: function fromAmino(_ref2) {\n        var from_address = _ref2.from_address,\n            to_address = _ref2.to_address,\n            amount = _ref2.amount;\n        return {\n          fromAddress: from_address,\n          toAddress: to_address,\n          amount: _toConsumableArray(amount)\n        };\n      }\n    },\n    \"/cosmos.bank.v1beta1.MsgMultiSend\": {\n      aminoType: \"cosmos-sdk/MsgMultiSend\",\n      toAmino: function toAmino(_ref3) {\n        var inputs = _ref3.inputs,\n            outputs = _ref3.outputs;\n        return {\n          inputs: inputs.map(function (input) {\n            return {\n              address: input.address,\n              coins: _toConsumableArray(input.coins)\n            };\n          }),\n          outputs: outputs.map(function (output) {\n            return {\n              address: output.address,\n              coins: _toConsumableArray(output.coins)\n            };\n          })\n        };\n      },\n      fromAmino: function fromAmino(_ref4) {\n        var inputs = _ref4.inputs,\n            outputs = _ref4.outputs;\n        return {\n          inputs: inputs.map(function (input) {\n            return {\n              address: input.address,\n              coins: _toConsumableArray(input.coins)\n            };\n          }),\n          outputs: outputs.map(function (output) {\n            return {\n              address: output.address,\n              coins: _toConsumableArray(output.coins)\n            };\n          })\n        };\n      }\n    },\n    // distribution\n    \"/cosmos.distribution.v1beta1.MsgFundCommunityPool\": {\n      aminoType: \"cosmos-sdk/MsgFundCommunityPool\",\n      toAmino: function toAmino(_ref5) {\n        var amount = _ref5.amount,\n            depositor = _ref5.depositor;\n        return {\n          amount: _toConsumableArray(amount),\n          depositor: depositor\n        };\n      },\n      fromAmino: function fromAmino(_ref6) {\n        var amount = _ref6.amount,\n            depositor = _ref6.depositor;\n        return {\n          amount: _toConsumableArray(amount),\n          depositor: depositor\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\": {\n      aminoType: \"cosmos-sdk/MsgModifyWithdrawAddress\",\n      toAmino: function toAmino(_ref7) {\n        var delegatorAddress = _ref7.delegatorAddress,\n            withdrawAddress = _ref7.withdrawAddress;\n        return {\n          delegator_address: delegatorAddress,\n          withdraw_address: withdrawAddress\n        };\n      },\n      fromAmino: function fromAmino(_ref8) {\n        var delegator_address = _ref8.delegator_address,\n            withdraw_address = _ref8.withdraw_address;\n        return {\n          delegatorAddress: delegator_address,\n          withdrawAddress: withdraw_address\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\": {\n      aminoType: \"cosmos-sdk/MsgWithdrawDelegationReward\",\n      toAmino: function toAmino(_ref9) {\n        var delegatorAddress = _ref9.delegatorAddress,\n            validatorAddress = _ref9.validatorAddress;\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: function fromAmino(_ref10) {\n        var delegator_address = _ref10.delegator_address,\n            validator_address = _ref10.validator_address;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address\n        };\n      }\n    },\n    \"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\": {\n      aminoType: \"cosmos-sdk/MsgWithdrawValidatorCommission\",\n      toAmino: function toAmino(_ref11) {\n        var validatorAddress = _ref11.validatorAddress;\n        return {\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: function fromAmino(_ref12) {\n        var validator_address = _ref12.validator_address;\n        return {\n          validatorAddress: validator_address\n        };\n      }\n    },\n    // gov\n    \"/cosmos.gov.v1beta1.MsgDeposit\": {\n      aminoType: \"cosmos-sdk/MsgDeposit\",\n      toAmino: function toAmino(_ref13) {\n        var amount = _ref13.amount,\n            depositor = _ref13.depositor,\n            proposalId = _ref13.proposalId;\n        return {\n          amount: amount,\n          depositor: depositor,\n          proposal_id: proposalId.toString()\n        };\n      },\n      fromAmino: function fromAmino(_ref14) {\n        var amount = _ref14.amount,\n            depositor = _ref14.depositor,\n            proposal_id = _ref14.proposal_id;\n        return {\n          amount: Array.from(amount),\n          depositor: depositor,\n          proposalId: long_1.default.fromString(proposal_id)\n        };\n      }\n    },\n    \"/cosmos.gov.v1beta1.MsgVote\": {\n      aminoType: \"cosmos-sdk/MsgVote\",\n      toAmino: function toAmino(_ref15) {\n        var option = _ref15.option,\n            proposalId = _ref15.proposalId,\n            voter = _ref15.voter;\n        return {\n          option: option,\n          proposal_id: proposalId.toString(),\n          voter: voter\n        };\n      },\n      fromAmino: function fromAmino(_ref16) {\n        var option = _ref16.option,\n            proposal_id = _ref16.proposal_id,\n            voter = _ref16.voter;\n        return {\n          option: gov_1.voteOptionFromJSON(option),\n          proposalId: long_1.default.fromString(proposal_id),\n          voter: voter\n        };\n      }\n    },\n    \"/cosmos.gov.v1beta1.MsgSubmitProposal\": {\n      aminoType: \"cosmos-sdk/MsgSubmitProposal\",\n      toAmino: function toAmino(_ref17) {\n        var initialDeposit = _ref17.initialDeposit,\n            proposer = _ref17.proposer,\n            content = _ref17.content;\n        utils_1.assertDefinedAndNotNull(content);\n        var proposal;\n\n        switch (content.typeUrl) {\n          case \"/cosmos.gov.v1beta1.TextProposal\":\n            {\n              var textProposal = gov_1.TextProposal.decode(content.value);\n              proposal = {\n                type: \"cosmos-sdk/TextProposal\",\n                value: {\n                  description: textProposal.description,\n                  title: textProposal.title\n                }\n              };\n              break;\n            }\n\n          default:\n            throw new Error(\"Unsupported proposal type: '\".concat(content.typeUrl, \"'\"));\n        }\n\n        return {\n          initial_deposit: initialDeposit,\n          proposer: proposer,\n          content: proposal\n        };\n      },\n      fromAmino: function fromAmino(_ref18) {\n        var initial_deposit = _ref18.initial_deposit,\n            proposer = _ref18.proposer,\n            content = _ref18.content;\n        var any_content;\n\n        switch (content.type) {\n          case \"cosmos-sdk/TextProposal\":\n            {\n              var value = content.value;\n              utils_1.assert(utils_1.isNonNullObject(value));\n              var title = value.title,\n                  description = value.description;\n              utils_1.assert(typeof title === \"string\");\n              utils_1.assert(typeof description === \"string\");\n              any_content = any_1.Any.fromPartial({\n                typeUrl: \"/cosmos.gov.v1beta1.TextProposal\",\n                value: gov_1.TextProposal.encode(gov_1.TextProposal.fromPartial({\n                  title: title,\n                  description: description\n                })).finish()\n              });\n              break;\n            }\n\n          default:\n            throw new Error(\"Unsupported proposal type: '\".concat(content.type, \"'\"));\n        }\n\n        return {\n          initialDeposit: Array.from(initial_deposit),\n          proposer: proposer,\n          content: any_content\n        };\n      }\n    },\n    // staking\n    \"/cosmos.staking.v1beta1.MsgBeginRedelegate\": {\n      aminoType: \"cosmos-sdk/MsgBeginRedelegate\",\n      toAmino: function toAmino(_ref19) {\n        var delegatorAddress = _ref19.delegatorAddress,\n            validatorSrcAddress = _ref19.validatorSrcAddress,\n            validatorDstAddress = _ref19.validatorDstAddress,\n            amount = _ref19.amount;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_src_address: validatorSrcAddress,\n          validator_dst_address: validatorDstAddress,\n          amount: amount\n        };\n      },\n      fromAmino: function fromAmino(_ref20) {\n        var delegator_address = _ref20.delegator_address,\n            validator_src_address = _ref20.validator_src_address,\n            validator_dst_address = _ref20.validator_dst_address,\n            amount = _ref20.amount;\n        return {\n          delegatorAddress: delegator_address,\n          validatorSrcAddress: validator_src_address,\n          validatorDstAddress: validator_dst_address,\n          amount: amount\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgCreateValidator\": {\n      aminoType: \"cosmos-sdk/MsgCreateValidator\",\n      toAmino: function toAmino(_ref21) {\n        var description = _ref21.description,\n            commission = _ref21.commission,\n            minSelfDelegation = _ref21.minSelfDelegation,\n            delegatorAddress = _ref21.delegatorAddress,\n            validatorAddress = _ref21.validatorAddress,\n            pubkey = _ref21.pubkey,\n            value = _ref21.value;\n        utils_1.assertDefinedAndNotNull(description, \"missing description\");\n        utils_1.assertDefinedAndNotNull(commission, \"missing commission\");\n        utils_1.assertDefinedAndNotNull(pubkey, \"missing pubkey\");\n        utils_1.assertDefinedAndNotNull(value, \"missing value\");\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            security_contact: description.securityContact,\n            details: description.details\n          },\n          commission: {\n            rate: commission.rate,\n            max_rate: commission.maxRate,\n            max_change_rate: commission.maxChangeRate\n          },\n          min_self_delegation: minSelfDelegation,\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          pubkey: amino_1.encodeBech32Pubkey({\n            type: \"tendermint/PubKeySecp256k1\",\n            value: encoding_1.toBase64(pubkey.value)\n          }, prefix),\n          value: value\n        };\n      },\n      fromAmino: function fromAmino(_ref22) {\n        var description = _ref22.description,\n            commission = _ref22.commission,\n            min_self_delegation = _ref22.min_self_delegation,\n            delegator_address = _ref22.delegator_address,\n            validator_address = _ref22.validator_address,\n            pubkey = _ref22.pubkey,\n            value = _ref22.value;\n        var decodedPubkey = amino_1.decodeBech32Pubkey(pubkey);\n\n        if (decodedPubkey.type !== \"tendermint/PubKeySecp256k1\") {\n          throw new Error(\"Only Secp256k1 public keys are supported\");\n        }\n\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            securityContact: description.security_contact,\n            details: description.details\n          },\n          commission: {\n            rate: commission.rate,\n            maxRate: commission.max_rate,\n            maxChangeRate: commission.max_change_rate\n          },\n          minSelfDelegation: min_self_delegation,\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          pubkey: {\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: encoding_1.fromBase64(decodedPubkey.value)\n          },\n          value: value\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgDelegate\": {\n      aminoType: \"cosmos-sdk/MsgDelegate\",\n      toAmino: function toAmino(_ref23) {\n        var delegatorAddress = _ref23.delegatorAddress,\n            validatorAddress = _ref23.validatorAddress,\n            amount = _ref23.amount;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          amount: amount\n        };\n      },\n      fromAmino: function fromAmino(_ref24) {\n        var delegator_address = _ref24.delegator_address,\n            validator_address = _ref24.validator_address,\n            amount = _ref24.amount;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          amount: amount\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgEditValidator\": {\n      aminoType: \"cosmos-sdk/MsgEditValidator\",\n      toAmino: function toAmino(_ref25) {\n        var description = _ref25.description,\n            commissionRate = _ref25.commissionRate,\n            minSelfDelegation = _ref25.minSelfDelegation,\n            validatorAddress = _ref25.validatorAddress;\n        utils_1.assertDefinedAndNotNull(description, \"missing description\");\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            security_contact: description.securityContact,\n            details: description.details\n          },\n          commission_rate: commissionRate,\n          min_self_delegation: minSelfDelegation,\n          validator_address: validatorAddress\n        };\n      },\n      fromAmino: function fromAmino(_ref26) {\n        var description = _ref26.description,\n            commission_rate = _ref26.commission_rate,\n            min_self_delegation = _ref26.min_self_delegation,\n            validator_address = _ref26.validator_address;\n        return {\n          description: {\n            moniker: description.moniker,\n            identity: description.identity,\n            website: description.website,\n            securityContact: description.security_contact,\n            details: description.details\n          },\n          commissionRate: commission_rate,\n          minSelfDelegation: min_self_delegation,\n          validatorAddress: validator_address\n        };\n      }\n    },\n    \"/cosmos.staking.v1beta1.MsgUndelegate\": {\n      aminoType: \"cosmos-sdk/MsgUndelegate\",\n      toAmino: function toAmino(_ref27) {\n        var delegatorAddress = _ref27.delegatorAddress,\n            validatorAddress = _ref27.validatorAddress,\n            amount = _ref27.amount;\n        utils_1.assertDefinedAndNotNull(amount, \"missing amount\");\n        return {\n          delegator_address: delegatorAddress,\n          validator_address: validatorAddress,\n          amount: amount\n        };\n      },\n      fromAmino: function fromAmino(_ref28) {\n        var delegator_address = _ref28.delegator_address,\n            validator_address = _ref28.validator_address,\n            amount = _ref28.amount;\n        return {\n          delegatorAddress: delegator_address,\n          validatorAddress: validator_address,\n          amount: amount\n        };\n      }\n    },\n    // ibc\n    \"/ibc.applications.transfer.v1.MsgTransfer\": {\n      aminoType: \"cosmos-sdk/MsgTransfer\",\n      toAmino: function toAmino(_ref29) {\n        var sourcePort = _ref29.sourcePort,\n            sourceChannel = _ref29.sourceChannel,\n            token = _ref29.token,\n            sender = _ref29.sender,\n            receiver = _ref29.receiver,\n            timeoutHeight = _ref29.timeoutHeight,\n            timeoutTimestamp = _ref29.timeoutTimestamp;\n\n        var _a, _b, _c;\n\n        return {\n          source_port: sourcePort,\n          source_channel: sourceChannel,\n          token: token,\n          sender: sender,\n          receiver: receiver,\n          timeout_height: timeoutHeight ? {\n            revision_height: (_a = omitDefault(timeoutHeight.revisionHeight)) === null || _a === void 0 ? void 0 : _a.toString(),\n            revision_number: (_b = omitDefault(timeoutHeight.revisionNumber)) === null || _b === void 0 ? void 0 : _b.toString()\n          } : {},\n          timeout_timestamp: (_c = omitDefault(timeoutTimestamp)) === null || _c === void 0 ? void 0 : _c.toString()\n        };\n      },\n      fromAmino: function fromAmino(_ref30) {\n        var source_port = _ref30.source_port,\n            source_channel = _ref30.source_channel,\n            token = _ref30.token,\n            sender = _ref30.sender,\n            receiver = _ref30.receiver,\n            timeout_height = _ref30.timeout_height,\n            timeout_timestamp = _ref30.timeout_timestamp;\n        return {\n          sourcePort: source_port,\n          sourceChannel: source_channel,\n          token: token,\n          sender: sender,\n          receiver: receiver,\n          timeoutHeight: timeout_height ? {\n            revisionHeight: long_1.default.fromString(timeout_height.revision_height || \"0\", true),\n            revisionNumber: long_1.default.fromString(timeout_height.revision_number || \"0\", true)\n          } : undefined,\n          timeoutTimestamp: long_1.default.fromString(timeout_timestamp || \"0\", true)\n        };\n      }\n    }\n  };\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\n\n\nvar AminoTypes = /*#__PURE__*/function () {\n  function AminoTypes() {\n    var _ref31 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref31$additions = _ref31.additions,\n        additions = _ref31$additions === void 0 ? {} : _ref31$additions,\n        _ref31$prefix = _ref31.prefix,\n        prefix = _ref31$prefix === void 0 ? \"cosmos\" : _ref31$prefix;\n\n    _classCallCheck(this, AminoTypes);\n\n    var additionalAminoTypes = Object.values(additions);\n    var filteredDefaultTypes = Object.entries(createDefaultTypes(prefix)).reduce(function (acc, _ref32) {\n      var _ref33 = _slicedToArray(_ref32, 2),\n          key = _ref33[0],\n          value = _ref33[1];\n\n      return additionalAminoTypes.find(function (_ref34) {\n        var aminoType = _ref34.aminoType;\n        return value.aminoType === aminoType;\n      }) ? acc : Object.assign(Object.assign({}, acc), _defineProperty({}, key, value));\n    }, {});\n    this.register = Object.assign(Object.assign({}, filteredDefaultTypes), additions);\n  }\n\n  _createClass(AminoTypes, [{\n    key: \"toAmino\",\n    value: function toAmino(_ref35) {\n      var typeUrl = _ref35.typeUrl,\n          value = _ref35.value;\n      var converter = this.register[typeUrl];\n\n      if (!converter) {\n        throw new Error(\"Type URL does not exist in the Amino message type register. \" + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n      }\n\n      return {\n        type: converter.aminoType,\n        value: converter.toAmino(value)\n      };\n    }\n  }, {\n    key: \"fromAmino\",\n    value: function fromAmino(_ref36) {\n      var type = _ref36.type,\n          value = _ref36.value;\n      var result = Object.entries(this.register).find(function (_ref37) {\n        var _ref38 = _slicedToArray(_ref37, 2),\n            _typeUrl = _ref38[0],\n            aminoType = _ref38[1].aminoType;\n\n        return aminoType === type;\n      });\n\n      if (!result) {\n        throw new Error(\"Type does not exist in the Amino message type register. \" + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n      }\n\n      var _result = _slicedToArray(result, 2),\n          typeUrl = _result[0],\n          converter = _result[1];\n\n      return {\n        typeUrl: typeUrl,\n        value: converter.fromAmino(value)\n      };\n    }\n  }]);\n\n  return AminoTypes;\n}();\n\nexports.AminoTypes = AminoTypes;","map":null,"metadata":{},"sourceType":"script"}