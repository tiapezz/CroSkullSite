{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nfunction toPin(type, cid, metadata) {\n  var pin = {\n    type: type,\n    cid: new CID(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(function (api) {\n  return /*#__PURE__*/function () {\n    var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          pin,\n          _i,\n          _Object$keys,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              if (options.paths) {\n                options.paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n              }\n\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('pin/ls', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({}, options, {\n                  arg: (options.paths || []).map(function (path) {\n                    return \"\".concat(path);\n                  }),\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 4:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 15;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 15:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 33;\n                break;\n              }\n\n              pin = _value;\n\n              if (!pin.Keys) {\n                _context.next = 28;\n                break;\n              }\n\n              _i = 0, _Object$keys = Object.keys(pin.Keys);\n\n            case 20:\n              if (!(_i < _Object$keys.length)) {\n                _context.next = 27;\n                break;\n              }\n\n              cid = _Object$keys[_i];\n              _context.next = 24;\n              return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n\n            case 24:\n              _i++;\n              _context.next = 20;\n              break;\n\n            case 27:\n              return _context.abrupt(\"return\");\n\n            case 28:\n              _context.next = 30;\n              return toPin(pin.Type, pin.Cid, pin.Metadata);\n\n            case 30:\n              _iteratorNormalCompletion = true;\n              _context.next = 9;\n              break;\n\n            case 33:\n              _context.next = 39;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 39:\n              _context.prev = 39;\n              _context.prev = 40;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 44;\n                break;\n              }\n\n              _context.next = 44;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 44:\n              _context.prev = 44;\n\n              if (!_didIteratorError) {\n                _context.next = 47;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 47:\n              return _context.finish(44);\n\n            case 48:\n              return _context.finish(39);\n\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 35, 39, 49], [40,, 44, 48]]);\n    }));\n\n    function ls() {\n      return _ls.apply(this, arguments);\n    }\n\n    return ls;\n  }();\n});","map":null,"metadata":{},"sourceType":"script"}