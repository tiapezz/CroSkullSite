{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n// constants\nimport { ethers } from 'ethers'; // log\n\nimport CroSkullsAmbassador from \"../../abis/CroSkullsAmbassador.json\";\nimport CroSkulls from \"../../abis/CroSkulls.json\";\nimport StakingArtifacts from \"../../abis/croSkullStaking.json\";\nimport Grave from \"../../abis/Grave.json\";\nimport Description from \"../../abis/nftDescription.json\";\nimport BluePotion from \"../../abis/CroSkullsBluePotions.json\";\nimport RedPotion from \"../../abis/CroSkullsRedPotions.json\";\nimport PetEggs from \"../../abis/petEggs.json\";\nimport Souls from \"../../abis/Souls.json\";\nimport { sendNotification, getSkullsData, cleanData } from \"../data/dataActions\";\nvar chainId = \"0x19\" || \"0x152\"; //testnet - 3\n\nvar networkId = 25; //338 || 5777; //25 production, 339 cassini, 5777 ganache local env\n\nvar stakingAddress = StakingArtifacts.networks[networkId].address;\nvar graveAddress = Grave.networks[networkId].address;\nvar ContractAddress = CroSkulls.networks[networkId].address;\nvar descriptionAddress = Description.networks[networkId].address;\nvar petEggsAddress = PetEggs.networks[networkId].address;\nvar soulsAddress = Souls.networks[networkId].address;\nvar blueAddress = BluePotion.networks[networkId].address;\nvar redAddress = RedPotion.networks[networkId].address;\nvar ebisusAddress = \"0x7a3CdB2364f92369a602CAE81167d0679087e6a3\";\nvar ebisusAbi = [\"function makePurchase(uint256 _id) public payable\"]; //const ContractAddress = CroSkulls.networks[networkId].address;\n\nvar connectRequest = function connectRequest() {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nvar cleanBlockchain = function cleanBlockchain() {\n  return {\n    type: \"CLEAN_BLOCKCHAIN\"\n  };\n};\n\nvar connectSuccess = function connectSuccess(payload) {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar connectFailed = function connectFailed(payload) {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nvar updateAccountRequest = function updateAccountRequest(payload) {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nvar contractNotDetected = function contractNotDetected() {\n  return {\n    type: \"CONTRACT_NOT_DETECTED\"\n  };\n};\n\nvar noAccount = function noAccount() {\n  return {\n    type: \"CONTRACT_NOT_DETECTED\"\n  };\n};\n\nvar requestDisconnect = function requestDisconnect() {\n  return {\n    type: \"DISCONNECT\"\n  };\n};\n\nexport var disconnect = function disconnect() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(requestDisconnect());\n              dispatch(cleanData());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var connect = function connect(ethProvider) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var signer, croSkullsContract, croSkullsStaking, croSkullsGrave, croPotionBlue, croPotionRed, croSkullsDescription, croSkullsPetEggs, croSkullsSouls, ebisusMarketplace, accounts, accountAddress, accountBalance;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(connectRequest());\n              dispatch(handleProviderChanges(ethProvider));\n\n              if (!(ethProvider.provider.chainId == chainId || ethProvider.provider.chainId == networkId)) {\n                _context2.next = 31;\n                break;\n              }\n\n              signer = ethProvider.getSigner();\n              croSkullsContract = new ethers.Contract(ContractAddress, CroSkulls.abi, signer);\n              croSkullsStaking = new ethers.Contract(stakingAddress, StakingArtifacts.abi, signer);\n              croSkullsGrave = new ethers.Contract(graveAddress, Grave.abi, signer);\n              croPotionBlue = new ethers.Contract(blueAddress, BluePotion.abi, signer);\n              croPotionRed = new ethers.Contract(redAddress, RedPotion.abi, signer); //let croSkullsDescription = ''\n\n              croSkullsDescription = new ethers.Contract(descriptionAddress, Description.abi, signer);\n              croSkullsPetEggs = new ethers.Contract(petEggsAddress, PetEggs.abi, signer);\n              croSkullsSouls = new ethers.Contract(soulsAddress, Souls.abi, signer);\n              ebisusMarketplace = new ethers.Contract(ebisusAddress, ebisusAbi, signer);\n              _context2.next = 15;\n              return ethProvider.provider.request({\n                method: 'eth_accounts'\n              });\n\n            case 15:\n              accounts = _context2.sent;\n\n              if (!(accounts.length === 0)) {\n                _context2.next = 20;\n                break;\n              }\n\n              dispatch(noAccount());\n              _context2.next = 29;\n              break;\n\n            case 20:\n              accountAddress = accounts[0];\n              dispatch(sendNotification({\n                title: \"Welcome Back\",\n                message: \"\".concat(accountAddress),\n                type: \"default\"\n              }));\n              _context2.next = 24;\n              return ethProvider.getBalance(accountAddress);\n\n            case 24:\n              _context2.next = 26;\n              return _context2.sent.toString();\n\n            case 26:\n              accountBalance = _context2.sent;\n              dispatch(connectSuccess({\n                accountAddress: accountAddress,\n                accountBalance: accountBalance,\n                ethProvider: ethProvider,\n                croSkullsContract: croSkullsContract,\n                croSkullsStaking: croSkullsStaking,\n                croSkullsGrave: croSkullsGrave,\n                croSkullsDescription: croSkullsDescription,\n                croSkullsPetEggs: croSkullsPetEggs,\n                croSkullsSouls: croSkullsSouls,\n                croPotionBlue: croPotionBlue,\n                croPotionRed: croPotionRed,\n                ebisusMarketplace: ebisusMarketplace\n              }));\n              dispatch(getSkullsData());\n\n            case 29:\n              _context2.next = 33;\n              break;\n\n            case 31:\n              dispatch(contractNotDetected());\n              ethProvider.provider.request({\n                \"id\": 1,\n                \"jsonrpc\": \"2.0\",\n                \"method\": \"wallet_switchEthereumChain\",\n                \"params\": [{\n                  \"chainId\": chainId\n                }]\n              });\n\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var handleProviderChanges = function handleProviderChanges(ethProvider) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              ethProvider.provider.on('accountsChanged', function (accounts) {\n                dispatch(cleanData());\n                dispatch(connect(ethProvider));\n              });\n              ethProvider.provider.on('chainChanged', function (_chainId) {\n                dispatch(connect(ethProvider));\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/blockchain/blockchainActions.js"],"names":["ethers","CroSkullsAmbassador","CroSkulls","StakingArtifacts","Grave","Description","BluePotion","RedPotion","PetEggs","Souls","sendNotification","getSkullsData","cleanData","chainId","networkId","stakingAddress","networks","address","graveAddress","ContractAddress","descriptionAddress","petEggsAddress","soulsAddress","blueAddress","redAddress","ebisusAddress","ebisusAbi","connectRequest","type","cleanBlockchain","connectSuccess","payload","connectFailed","updateAccountRequest","contractNotDetected","noAccount","requestDisconnect","disconnect","dispatch","connect","ethProvider","handleProviderChanges","provider","signer","getSigner","croSkullsContract","Contract","abi","croSkullsStaking","croSkullsGrave","croPotionBlue","croPotionRed","croSkullsDescription","croSkullsPetEggs","croSkullsSouls","ebisusMarketplace","request","method","accounts","length","accountAddress","title","message","getBalance","toString","accountBalance","on","_chainId"],"mappings":"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","sourcesContent":["// constants\r\nimport {\r\n    ethers\r\n} from 'ethers';\r\n// log\r\nimport CroSkullsAmbassador from \"../../abis/CroSkullsAmbassador.json\";\r\nimport CroSkulls from \"../../abis/CroSkulls.json\";\r\nimport StakingArtifacts from \"../../abis/croSkullStaking.json\";\r\nimport Grave from \"../../abis/Grave.json\";\r\nimport Description from \"../../abis/nftDescription.json\";\r\nimport BluePotion from \"../../abis/CroSkullsBluePotions.json\";\r\nimport RedPotion from \"../../abis/CroSkullsRedPotions.json\";\r\nimport PetEggs from \"../../abis/petEggs.json\";\r\nimport Souls from \"../../abis/Souls.json\";\r\nimport {\r\n  sendNotification, getSkullsData, cleanData\r\n} from \"../data/dataActions\";\r\nconst chainId =  \"0x19\" || \"0x152\"; //testnet - 3\r\nconst networkId =  25; //338 || 5777; //25 production, 339 cassini, 5777 ganache local env\r\nconst stakingAddress = StakingArtifacts.networks[networkId].address;\r\nconst graveAddress = Grave.networks[networkId].address;\r\nconst ContractAddress = CroSkulls.networks[networkId].address;\r\nconst descriptionAddress = Description.networks[networkId].address;\r\nconst petEggsAddress = PetEggs.networks[networkId].address;\r\nconst soulsAddress = Souls.networks[networkId].address;\r\nconst blueAddress = BluePotion.networks[networkId].address;\r\nconst redAddress = RedPotion.networks[networkId].address;\r\nconst ebisusAddress = \"0x7a3CdB2364f92369a602CAE81167d0679087e6a3\";\r\n\r\nconst ebisusAbi = [\r\n    \"function makePurchase(uint256 _id) public payable\"\r\n];\r\n\r\n//const ContractAddress = CroSkulls.networks[networkId].address;\r\n\r\nconst connectRequest = () => {\r\n    return {\r\n        type: \"CONNECTION_REQUEST\",\r\n    };\r\n};\r\n\r\nconst cleanBlockchain = () => {\r\n    return {\r\n        type: \"CLEAN_BLOCKCHAIN\",\r\n    };\r\n}\r\n\r\nconst connectSuccess = (payload) => {\r\n    return {\r\n        type: \"CONNECTION_SUCCESS\",\r\n        payload: payload,\r\n    };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n    return {\r\n        type: \"CONNECTION_FAILED\",\r\n        payload: payload,\r\n    };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n    return {\r\n        type: \"UPDATE_ACCOUNT\",\r\n        payload: payload,\r\n    }\r\n}\r\n\r\nconst contractNotDetected = () => {\r\n    return {\r\n        type: \"CONTRACT_NOT_DETECTED\"\r\n    }\r\n}\r\n\r\nconst noAccount = () => {\r\n    return {\r\n        type: \"CONTRACT_NOT_DETECTED\"\r\n    }\r\n}\r\n\r\nconst requestDisconnect = () => {\r\n    return {\r\n        type: \"DISCONNECT\"\r\n    }\r\n}\r\n\r\nexport const disconnect = () => {\r\n    return async (dispatch) => {\r\n        dispatch(requestDisconnect())\r\n        dispatch(cleanData())\r\n    }\r\n}\r\n\r\nexport const connect = ( ethProvider ) => {\r\n    return async (dispatch) => {\r\n        dispatch(connectRequest());\r\n        dispatch(handleProviderChanges(ethProvider))\r\n        if (ethProvider.provider.chainId == chainId || ethProvider.provider.chainId == networkId ) {\r\n            let signer = ethProvider.getSigner()\r\n            let croSkullsContract = new ethers.Contract(ContractAddress, CroSkulls.abi, signer)\r\n            let croSkullsStaking = new ethers.Contract(stakingAddress, StakingArtifacts.abi, signer)\r\n            let croSkullsGrave = new ethers.Contract(graveAddress, Grave.abi, signer)\r\n            let croPotionBlue = new ethers.Contract(blueAddress, BluePotion.abi, signer)\r\n            let croPotionRed = new ethers.Contract(redAddress, RedPotion.abi, signer)\r\n            //let croSkullsDescription = ''\r\n            let croSkullsDescription = new ethers.Contract(descriptionAddress, Description.abi, signer)\r\n            let croSkullsPetEggs = new ethers.Contract(petEggsAddress, PetEggs.abi, signer)\r\n            let croSkullsSouls = new ethers.Contract(soulsAddress, Souls.abi, signer)\r\n            let ebisusMarketplace = new ethers.Contract(ebisusAddress, ebisusAbi, signer)\r\n            let accounts = await ethProvider.provider.request({\r\n                method: 'eth_accounts',\r\n            })\r\n            \r\n            if (accounts.length === 0) {\r\n                dispatch(noAccount())\r\n            } else {\r\n                let accountAddress = accounts[0]\r\n                dispatch(sendNotification({\r\n                    title: `Welcome Back`,\r\n                    message: `${accountAddress}`,\r\n                    type: \"default\"\r\n                }))\r\n                let accountBalance = await ( await ethProvider.getBalance(accountAddress)).toString();\r\n                dispatch(connectSuccess({\r\n                    accountAddress,\r\n                    accountBalance,\r\n                    ethProvider,\r\n                    croSkullsContract,\r\n                    croSkullsStaking,\r\n                    croSkullsGrave,\r\n                    croSkullsDescription,\r\n                    croSkullsPetEggs,\r\n                    croSkullsSouls,\r\n                    croPotionBlue,\r\n                    croPotionRed,\r\n                    ebisusMarketplace\r\n                }))\r\n                dispatch(getSkullsData())\r\n            }\r\n            //await this.loadBlockchainData()\r\n        } else {\r\n            dispatch(contractNotDetected())\r\n            ethProvider.provider.request({\r\n                \"id\": 1,\r\n                \"jsonrpc\": \"2.0\",\r\n                \"method\": \"wallet_switchEthereumChain\",\r\n                \"params\": [\r\n                  {\r\n                    \"chainId\": chainId,\r\n                  }\r\n                ]\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const handleProviderChanges = (ethProvider) => {\r\n    return async (dispatch) => {\r\n        ethProvider.provider.on( 'accountsChanged', (accounts) => {\r\n            dispatch(cleanData())\r\n            dispatch(connect(ethProvider))\r\n        })\r\n        ethProvider.provider.on( 'chainChanged', (_chainId) => {\r\n                dispatch(connect(ethProvider))\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}