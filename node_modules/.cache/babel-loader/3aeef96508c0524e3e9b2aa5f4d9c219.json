{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bech32 = void 0;\n\nvar bech32 = __importStar(require(\"bech32\"));\n\nvar Bech32 = /*#__PURE__*/function () {\n  function Bech32() {\n    _classCallCheck(this, Bech32);\n  }\n\n  _createClass(Bech32, null, [{\n    key: \"encode\",\n    value: function encode(prefix, data, limit) {\n      var address = bech32.encode(prefix, bech32.toWords(data), limit);\n      return address;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(address) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n      var decodedAddress = bech32.decode(address, limit);\n      return {\n        prefix: decodedAddress.prefix,\n        data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n      };\n    }\n  }]);\n\n  return Bech32;\n}();\n\nexports.Bech32 = Bech32;","map":null,"metadata":{},"sourceType":"script"}