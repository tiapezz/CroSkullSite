{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.longify = exports.createProtobufRpcClient = exports.createPagination = exports.toAccAddress = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar long_1 = __importDefault(require(\"long\"));\n/**\n * Takes a bech32 encoded address and returns the data part. The prefix is ignored and discarded.\n * This is called AccAddress in Cosmos SDK, which is basically an alias for raw binary data.\n * The result is typically 20 bytes long but not restricted to that.\n */\n\n\nfunction toAccAddress(address) {\n  return encoding_1.Bech32.decode(address).data;\n}\n\nexports.toAccAddress = toAccAddress;\n/**\n * If paginationKey is set, return a `PageRequest` with the given key.\n * If paginationKey is unset, return `undefined`.\n *\n * Use this with a query response's pagination next key to\n * request the next page.\n */\n\nfunction createPagination(paginationKey) {\n  return paginationKey ? {\n    key: paginationKey,\n    offset: long_1.default.fromNumber(0, true),\n    limit: long_1.default.fromNumber(0, true),\n    countTotal: false\n  } : undefined;\n}\n\nexports.createPagination = createPagination;\n\nfunction createProtobufRpcClient(base) {\n  return {\n    request: function request(service, method, data) {\n      var path = \"/\".concat(service, \"/\").concat(method);\n      return base.queryUnverified(path, data);\n    }\n  };\n}\n\nexports.createProtobufRpcClient = createProtobufRpcClient;\n/**\n * Takes a uint64 value as string, number, Long or Uint64 and returns an unsigned Long instance\n * of it.\n */\n\nfunction longify(value) {\n  var checkedValue = math_1.Uint64.fromString(value.toString());\n  return long_1.default.fromBytesBE(_toConsumableArray(checkedValue.toBytesBigEndian()), true);\n}\n\nexports.longify = longify;","map":null,"metadata":{},"sourceType":"script"}