{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\n\nvar hmac_1 = require(\"./hmac\");\n\nvar sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\n\n\nvar Slip10Curve;\n\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\n\n\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n\n    default:\n      throw new Error(\"Unknown curve string: '\".concat(curveString, \"'\"));\n  }\n}\n\nexports.slip10CurveFromString = slip10CurveFromString;\n\nvar Slip10RawIndex = /*#__PURE__*/function (_math_1$Uint) {\n  _inherits(Slip10RawIndex, _math_1$Uint);\n\n  function Slip10RawIndex() {\n    _classCallCheck(this, Slip10RawIndex);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Slip10RawIndex).apply(this, arguments));\n  }\n\n  _createClass(Slip10RawIndex, [{\n    key: \"isHardened\",\n    value: function isHardened() {\n      return this.data >= Math.pow(2, 31);\n    }\n  }], [{\n    key: \"hardened\",\n    value: function hardened(hardenedIndex) {\n      return new Slip10RawIndex(hardenedIndex + Math.pow(2, 31));\n    }\n  }, {\n    key: \"normal\",\n    value: function normal(normalIndex) {\n      return new Slip10RawIndex(normalIndex);\n    }\n  }]);\n\n  return Slip10RawIndex;\n}(math_1.Uint32);\n\nexports.Slip10RawIndex = Slip10RawIndex;\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\"); // Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n\nvar Slip10 = /*#__PURE__*/function () {\n  function Slip10() {\n    _classCallCheck(this, Slip10);\n  }\n\n  _createClass(Slip10, null, [{\n    key: \"derivePath\",\n    value: function derivePath(curve, seed, path) {\n      var result = this.master(curve, seed);\n\n      var _iterator = _createForOfIteratorHelper(path),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var rawIndex = _step.value;\n          result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"master\",\n    value: function master(curve, seed) {\n      var i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.toAscii(curve)).update(seed).digest();\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64);\n\n      if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n        return this.master(curve, i);\n      }\n\n      return {\n        chainCode: ir,\n        privkey: il\n      };\n    }\n  }, {\n    key: \"child\",\n    value: function child(curve, parentPrivkey, parentChainCode, rawIndex) {\n      var i;\n\n      if (rawIndex.isHardened()) {\n        var payload = new Uint8Array([0x00].concat(_toConsumableArray(parentPrivkey), _toConsumableArray(rawIndex.toBytesBigEndian())));\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n      } else {\n        if (curve === Slip10Curve.Ed25519) {\n          throw new Error(\"Normal keys are not allowed with ed25519\");\n        } else {\n          // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n          // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n          // where the functions point() and ser_p() are defined in BIP-0032\n          var data = new Uint8Array([].concat(_toConsumableArray(Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey))), _toConsumableArray(rawIndex.toBytesBigEndian())));\n          i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n        }\n      }\n\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n\n  }, {\n    key: \"serializedPoint\",\n    value: function serializedPoint(curve, p) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return encoding_1.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }, {\n    key: \"childImpl\",\n    value: function childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n      // step 2 (of the Private parent key â†’ private child key algorithm)\n      var il = i.slice(0, 32);\n      var ir = i.slice(32, 64); // step 3\n\n      var returnChainCode = ir; // step 4\n\n      if (curve === Slip10Curve.Ed25519) {\n        return {\n          chainCode: returnChainCode,\n          privkey: il\n        };\n      } // step 5\n\n\n      var n = this.n(curve);\n      var returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n      var returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32)); // step 6\n\n      if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n        var newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01].concat(_toConsumableArray(ir), _toConsumableArray(rawIndex.toBytesBigEndian())))).digest();\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n      } // step 7\n\n\n      return {\n        chainCode: returnChainCode,\n        privkey: returnChildKey\n      };\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero(privkey) {\n      return privkey.every(function (byte) {\n        return byte === 0;\n      });\n    }\n  }, {\n    key: \"isGteN\",\n    value: function isGteN(curve, privkey) {\n      var keyAsNumber = new bn_js_1.default(privkey);\n      return keyAsNumber.gte(this.n(curve));\n    }\n  }, {\n    key: \"n\",\n    value: function n(curve) {\n      switch (curve) {\n        case Slip10Curve.Secp256k1:\n          return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n\n        default:\n          throw new Error(\"curve not supported\");\n      }\n    }\n  }]);\n\n  return Slip10;\n}();\n\nexports.Slip10 = Slip10;\n\nfunction pathToString(path) {\n  return path.reduce(function (current, component) {\n    var componentString = component.isHardened() ? \"\".concat(component.toNumber() - Math.pow(2, 31), \"'\") : component.toString();\n    return current + \"/\" + componentString;\n  }, \"m\");\n}\n\nexports.pathToString = pathToString;\n\nfunction stringToPath(input) {\n  if (!input.startsWith(\"m\")) throw new Error(\"Path string must start with 'm'\");\n  var rest = input.slice(1);\n  var out = new Array();\n\n  while (rest) {\n    var match = rest.match(/^\\/([0-9]+)('?)/);\n    if (!match) throw new Error(\"Syntax error while reading path component\");\n\n    var _match = _slicedToArray(match, 3),\n        fullMatch = _match[0],\n        numberString = _match[1],\n        apostrophe = _match[2];\n\n    var value = math_1.Uint53.fromString(numberString).toNumber();\n    if (value >= Math.pow(2, 31)) throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n    if (apostrophe) out.push(Slip10RawIndex.hardened(value));else out.push(Slip10RawIndex.normal(value));\n    rest = rest.slice(fullMatch.length);\n  }\n\n  return out;\n}\n\nexports.stringToPath = stringToPath;","map":null,"metadata":{},"sourceType":"script"}