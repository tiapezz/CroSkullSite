{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').ImplementsMethod<'put', import('ipfs-core/src/components/dht')>}\n   */\n  function put(_x, _x2) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n      var options,\n          controller,\n          signal,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n              _context.t0 = _awaitAsyncGenerator;\n              _context.t1 = api;\n              _context.t2 = _objectSpread;\n              _context.t3 = {\n                timeout: options.timeout,\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: key\n                }, options))\n              };\n              _context.next = 9;\n              return _awaitAsyncGenerator(multipartRequest(value, controller, options.headers));\n\n            case 9:\n              _context.t4 = _context.sent;\n              _context.t5 = (0, _context.t2)(_context.t3, _context.t4);\n              _context.t6 = _context.t1.post.call(_context.t1, 'dht/put', _context.t5);\n              _context.next = 14;\n              return (0, _context.t0)(_context.t6);\n\n            case 14:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 17;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 19:\n              _context.next = 21;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 21:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 25;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 25:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 36;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (_ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (a) {\n                      return multiaddr(a);\n                    })\n                  };\n                });\n              }\n\n              _context.next = 33;\n              return message;\n\n            case 33:\n              _iteratorNormalCompletion = true;\n              _context.next = 19;\n              break;\n\n            case 36:\n              _context.next = 42;\n              break;\n\n            case 38:\n              _context.prev = 38;\n              _context.t7 = _context[\"catch\"](17);\n              _didIteratorError = true;\n              _iteratorError = _context.t7;\n\n            case 42:\n              _context.prev = 42;\n              _context.prev = 43;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 47;\n                break;\n              }\n\n              _context.next = 47;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 47:\n              _context.prev = 47;\n\n              if (!_didIteratorError) {\n                _context.next = 50;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 50:\n              return _context.finish(47);\n\n            case 51:\n              return _context.finish(42);\n\n            case 52:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[17, 38, 42, 52], [43,, 47, 51]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}