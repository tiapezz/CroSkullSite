{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\n\nvar fetchEbisusRequest = function fetchEbisusRequest() {\n  return {\n    type: \"FETCH_EBISUS_REQUEST\"\n  };\n};\n\nvar fetchEbisusSuccess = function fetchEbisusSuccess(payload) {\n  return {\n    type: \"FETCH_EBISUS_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar fetchSkullsSuccess = function fetchSkullsSuccess(payload) {\n  return {\n    type: \"FETCH_SKULLS_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport var loadEbisusData = function loadEbisusData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var rawSkullData, _rawSkullData$collect, averageSalePrice, floorPrice, numberActive, numberOfSales, totalVolume;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchEbisusRequest());\n              _context.next = 3;\n              return fetch('https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F');\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              rawSkullData = _context.sent;\n\n              if (rawSkullData.collections[0]) {\n                _rawSkullData$collect = rawSkullData.collections[0], averageSalePrice = _rawSkullData$collect.averageSalePrice, floorPrice = _rawSkullData$collect.floorPrice, numberActive = _rawSkullData$collect.numberActive, numberOfSales = _rawSkullData$collect.numberOfSales, totalVolume = _rawSkullData$collect.totalVolume;\n                dispatch(fetchEbisusSuccess({\n                  skullAvgPrice: averageSalePrice,\n                  skullFloorPrice: floorPrice,\n                  skullForSales: numberActive,\n                  skullSolds: numberOfSales,\n                  skullTotalVolume: totalVolume\n                }));\n              }\n\n              dispatch(loadEbisusSkulls());\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEbisusSkulls = function loadEbisusSkulls() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState, marketplace, saleSkulls, newPage, rawSkullData, _rawSkullData;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState = store.getState(), marketplace = _store$getState.marketplace;\n              saleSkulls = marketplace.saleSkulls;\n\n              if (!(saleSkulls.length > 0)) {\n                _context2.next = 12;\n                break;\n              }\n\n              newPage = parseInt(saleSkulls.length / 20) + 1;\n              _context2.next = 6;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=\".concat(newPage, \"&pageSize=20\"));\n\n            case 6:\n              _context2.next = 8;\n              return _context2.sent.json();\n\n            case 8:\n              rawSkullData = _context2.sent;\n              saleSkulls = saleSkulls.concat(rawSkullData.listings);\n              _context2.next = 19;\n              break;\n\n            case 12:\n              _context2.next = 14;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=20\");\n\n            case 14:\n              _context2.next = 16;\n              return _context2.sent.json();\n\n            case 16:\n              _rawSkullData = _context2.sent;\n              saleSkulls = _rawSkullData.listings;\n              console.log(_rawSkullData);\n\n            case 19:\n              dispatch(fetchSkullsSuccess({\n                saleSkulls: saleSkulls\n              }));\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var purchaseItem = function purchaseItem(_ref3) {\n  var _listingId = _ref3._listingId,\n      _cost = _ref3._cost,\n      _skullId = _ref3._skullId;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var ebisusMarketplace, purchaseTx;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              ebisusMarketplace = store.getState().blockchain.ebisusMarketplace;\n\n              if (!(!ebisusMarketplace || !_listingId)) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 3:\n              purchaseTx = ebisusMarketplace.makePurchase(_listingId, {\n                value: _cost\n              });\n              _context4.next = 6;\n              return purchaseTx.then( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx) {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context3.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Success\",\n                            message: \"Skull #\".concat(_skullId, \" purchased!\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x4) {\n                  return _ref5.apply(this, arguments);\n                };\n              }());\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/marketplace/marketplaceActions.js"],"names":["ethers","store","sendNotification","getSkullsData","fetchEbisusRequest","type","fetchEbisusSuccess","payload","fetchSkullsSuccess","loadEbisusData","dispatch","fetch","json","rawSkullData","collections","averageSalePrice","floorPrice","numberActive","numberOfSales","totalVolume","skullAvgPrice","skullFloorPrice","skullForSales","skullSolds","skullTotalVolume","loadEbisusSkulls","getState","marketplace","saleSkulls","length","newPage","parseInt","concat","listings","console","log","purchaseItem","_listingId","_cost","_skullId","ebisusMarketplace","blockchain","purchaseTx","makePurchase","value","then","tx","title","message","wait"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\r\n\r\nconst fetchEbisusRequest = () => {\r\n  return {\r\n    type: \"FETCH_EBISUS_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchEbisusSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_EBISUS_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nconst fetchSkullsSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_SKULLS_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nexport const loadEbisusData = () => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchEbisusRequest())\r\n        let rawSkullData = await (await fetch('https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F')).json();\r\n        if( rawSkullData.collections[0] ){\r\n            let {\r\n                averageSalePrice,\r\n                floorPrice,\r\n                numberActive,\r\n                numberOfSales,\r\n                totalVolume\r\n            } = rawSkullData.collections[0];\r\n            dispatch(fetchEbisusSuccess({\r\n                skullAvgPrice: averageSalePrice,\r\n                skullFloorPrice: floorPrice,\r\n                skullForSales: numberActive,\r\n                skullSolds: numberOfSales,\r\n                skullTotalVolume: totalVolume\r\n            }))\r\n        }\r\n        dispatch(loadEbisusSkulls())\r\n    }\r\n}\r\n\r\nexport const loadEbisusSkulls = () => {\r\n    return async (dispatch) => {\r\n        let { marketplace } = store.getState()\r\n        let { saleSkulls } = marketplace\r\n        if( saleSkulls.length > 0 ) {\r\n            let newPage = parseInt(saleSkulls.length / 20) + 1\r\n            let rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=${newPage}&pageSize=20`)).json();\r\n            saleSkulls = saleSkulls.concat(\r\n                rawSkullData.listings\r\n            ) \r\n        }else{\r\n            let rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=20`)).json();\r\n            saleSkulls = rawSkullData.listings\r\n            console.log(rawSkullData)\r\n        }\r\n        dispatch(fetchSkullsSuccess({\r\n            saleSkulls\r\n        }))\r\n    }\r\n}\r\n\r\nexport const purchaseItem = ( { _listingId, _cost, _skullId } ) => {\r\n    return async (dispatch) => {\r\n        let { ebisusMarketplace } = store.getState().blockchain\r\n        if( ! ebisusMarketplace || ! _listingId) return\r\n        let purchaseTx = ebisusMarketplace.makePurchase(_listingId, {\r\n            value: _cost\r\n        })\r\n        await purchaseTx.then(\r\n            async (tx) => {\r\n                dispatch(sendNotification({\r\n                    title: `Transaction Sent`,\r\n                    message: 'Waiting for confirmation',\r\n                    tx,\r\n                    type: \"info\"\r\n                }))\r\n                await tx.wait(2)\r\n                dispatch(sendNotification({\r\n                    title: `Success`,\r\n                    message: `Skull #${_skullId} purchased!`,\r\n                    tx,\r\n                    type: \"success\"\r\n                }))\r\n                dispatch(getSkullsData())\r\n            }\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}