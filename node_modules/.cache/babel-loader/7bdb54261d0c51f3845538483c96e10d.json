{"ast":null,"code":"import _objectSpread from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ethers } from 'ethers';\nvar initialState = {\n  loading: false,\n  errorMsg: \"\",\n  provider: false,\n  ethProvider: false,\n  accountAddress: \"\",\n  accountBalance: \"\",\n  managerAddress: null,\n  croSkullsContract: false,\n  croSkullsStaking: false,\n  croSkullsGrave: false,\n  croSkullsDescription: false,\n  croSkullsPetEggs: false,\n  croSkullsSouls: false,\n  croPotionBlue: false,\n  croPotionRed: false,\n  ebisusMarketplace: false,\n  providerConnected: false,\n  contractDetected: false,\n  ethers: ethers,\n  formatEther: function formatEther(bn) {\n    var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return fixed ? parseFloat(ethers.utils.formatEther(bn)).toFixed(2) : ethers.utils.formatEther(bn);\n  }\n};\n\nvar blockchainReducer = function blockchainReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var payload = action.payload;\n\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return _objectSpread({}, initialState, {\n        loading: true\n      });\n\n    case \"CONNECTION_SUCCESS\":\n      return _objectSpread({}, state, {\n        loading: false,\n        contractDetected: true,\n        accountAddress: payload.accountAddress,\n        accountBalance: payload.accountBalance,\n        ethProvider: payload.ethProvider,\n        croSkullsContract: payload.croSkullsContract,\n        croSkullsStaking: payload.croSkullsStaking,\n        croSkullsGrave: payload.croSkullsGrave,\n        croSkullsDescription: payload.croSkullsDescription,\n        croSkullsPetEggs: payload.croSkullsPetEggs,\n        croSkullsSouls: payload.croSkullsSouls,\n        croPotionBlue: payload.croPotionBlue,\n        croPotionRed: payload.croPotionRed,\n        ebisusMarketplace: payload.ebisusMarketplace,\n        provider: payload.provider,\n        providerConnected: true\n      });\n\n    case \"CONNECTION_FAILED\":\n      return _objectSpread({}, initialState, {\n        loading: false,\n        errorMsg: action.payload\n      });\n\n    case \"UPDATE_ACCOUNT\":\n      return _objectSpread({}, state, {\n        account: action.payload.account\n      });\n\n    case \"DISCONNECT\":\n      return _objectSpread({}, state, {\n        loading: false,\n        errorMsg: \"\",\n        provider: false,\n        ethProvider: false,\n        accountAddress: \"\",\n        accountBalance: \"\",\n        managerAddress: null,\n        croSkullsContract: false,\n        croSkullsStaking: false,\n        croSkullsGrave: false,\n        croSkullsDescription: false,\n        croSkullsSouls: false,\n        croPotionBlue: false,\n        croPotionRed: false,\n        ebisusMarketplace: false,\n        providerConnected: false,\n        contractDetected: false\n      });\n\n    case \"CONTRACT_NOT_DETECTED\":\n      return _objectSpread({}, state, {\n        loading: false,\n        providerConnected: true,\n        contractDetected: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/blockchain/blockchainReducer.js"],"names":["ethers","initialState","loading","errorMsg","provider","ethProvider","accountAddress","accountBalance","managerAddress","croSkullsContract","croSkullsStaking","croSkullsGrave","croSkullsDescription","croSkullsPetEggs","croSkullsSouls","croPotionBlue","croPotionRed","ebisusMarketplace","providerConnected","contractDetected","formatEther","bn","fixed","parseFloat","utils","toFixed","blockchainReducer","state","action","payload","type","account"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,WAAW,EAAE,KAJI;AAKjBC,EAAAA,cAAc,EAAE,EALC;AAMjBC,EAAAA,cAAc,EAAE,EANC;AAOjBC,EAAAA,cAAc,EAAE,IAPC;AAQjBC,EAAAA,iBAAiB,EAAE,KARF;AASjBC,EAAAA,gBAAgB,EAAE,KATD;AAUjBC,EAAAA,cAAc,EAAE,KAVC;AAWjBC,EAAAA,oBAAoB,EAAE,KAXL;AAYjBC,EAAAA,gBAAgB,EAAE,KAZD;AAajBC,EAAAA,cAAc,EAAE,KAbC;AAcjBC,EAAAA,aAAa,EAAE,KAdE;AAejBC,EAAAA,YAAY,EAAE,KAfG;AAgBjBC,EAAAA,iBAAiB,EAAE,KAhBF;AAiBjBC,EAAAA,iBAAiB,EAAE,KAjBF;AAkBjBC,EAAAA,gBAAgB,EAAE,KAlBD;AAmBjBnB,EAAAA,MAAM,EAAEA,MAnBS;AAoBjBoB,EAAAA,WAAW,EAAE,qBAACC,EAAD;AAAA,QAAKC,KAAL,uEAAa,KAAb;AAAA,WAAuBA,KAAK,GAAGC,UAAU,CAACvB,MAAM,CAACwB,KAAP,CAAaJ,WAAb,CAAyBC,EAAzB,CAAD,CAAV,CAAyCI,OAAzC,CAAiD,CAAjD,CAAH,GAAyDzB,MAAM,CAACwB,KAAP,CAAaJ,WAAb,CAAyBC,EAAzB,CAArF;AAAA;AApBI,CAArB;;AAuBA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB1B,YAAyB;AAAA,MAAX2B,MAAW;AACxD,MAAIC,OAAO,GAAGD,MAAM,CAACC,OAArB;;AACA,UAAQD,MAAM,CAACE,IAAf;AACI,SAAK,oBAAL;AACI,+BACO7B,YADP;AAEIC,QAAAA,OAAO,EAAE;AAFb;;AAIA,SAAK,oBAAL;AACA,+BACOyB,KADP;AAEIzB,QAAAA,OAAO,EAAE,KAFb;AAGIiB,QAAAA,gBAAgB,EAAE,IAHtB;AAIIb,QAAAA,cAAc,EAAEuB,OAAO,CAACvB,cAJ5B;AAKIC,QAAAA,cAAc,EAAEsB,OAAO,CAACtB,cAL5B;AAMIF,QAAAA,WAAW,EAAEwB,OAAO,CAACxB,WANzB;AAOII,QAAAA,iBAAiB,EAAEoB,OAAO,CAACpB,iBAP/B;AAQIC,QAAAA,gBAAgB,EAAEmB,OAAO,CAACnB,gBAR9B;AASIC,QAAAA,cAAc,EAAEkB,OAAO,CAAClB,cAT5B;AAUIC,QAAAA,oBAAoB,EAAEiB,OAAO,CAACjB,oBAVlC;AAWIC,QAAAA,gBAAgB,EAAEgB,OAAO,CAAChB,gBAX9B;AAYIC,QAAAA,cAAc,EAAEe,OAAO,CAACf,cAZ5B;AAaIC,QAAAA,aAAa,EAAEc,OAAO,CAACd,aAb3B;AAcIC,QAAAA,YAAY,EAAEa,OAAO,CAACb,YAd1B;AAeIC,QAAAA,iBAAiB,EAAEY,OAAO,CAACZ,iBAf/B;AAgBIb,QAAAA,QAAQ,EAAEyB,OAAO,CAACzB,QAhBtB;AAiBIc,QAAAA,iBAAiB,EAAE;AAjBvB;;AAmBJ,SAAK,mBAAL;AACI,+BACOjB,YADP;AAEIC,QAAAA,OAAO,EAAE,KAFb;AAGQC,QAAAA,QAAQ,EAAEyB,MAAM,CAACC;AAHzB;;AAKJ,SAAK,gBAAL;AACI,+BACOF,KADP;AAEII,QAAAA,OAAO,EAAEH,MAAM,CAACC,OAAP,CAAeE;AAF5B;;AAIJ,SAAK,YAAL;AACI,+BACOJ,KADP;AAEIzB,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,QAAQ,EAAE,EAHd;AAIIC,QAAAA,QAAQ,EAAE,KAJd;AAKIC,QAAAA,WAAW,EAAE,KALjB;AAMIC,QAAAA,cAAc,EAAE,EANpB;AAOIC,QAAAA,cAAc,EAAE,EAPpB;AAQIC,QAAAA,cAAc,EAAE,IARpB;AASIC,QAAAA,iBAAiB,EAAE,KATvB;AAUIC,QAAAA,gBAAgB,EAAE,KAVtB;AAWIC,QAAAA,cAAc,EAAE,KAXpB;AAYIC,QAAAA,oBAAoB,EAAE,KAZ1B;AAaIE,QAAAA,cAAc,EAAE,KAbpB;AAcIC,QAAAA,aAAa,EAAE,KAdnB;AAeIC,QAAAA,YAAY,EAAE,KAflB;AAgBIC,QAAAA,iBAAiB,EAAE,KAhBvB;AAiBIC,QAAAA,iBAAiB,EAAE,KAjBvB;AAkBIC,QAAAA,gBAAgB,EAAE;AAlBtB;;AAoBJ,SAAK,uBAAL;AACI,+BACOQ,KADP;AAEIzB,QAAAA,OAAO,EAAE,KAFb;AAGIgB,QAAAA,iBAAiB,EAAE,IAHvB;AAIIC,QAAAA,gBAAgB,EAAE;AAJtB;;AAMJ;AACI,aAAOQ,KAAP;AAlER;AAoEH,CAtED;;AAwEA,eAAeD,iBAAf","sourcesContent":["import { ethers } from 'ethers';\r\nconst initialState = {\r\n    loading: false,\r\n    errorMsg: \"\",\r\n    provider: false,\r\n    ethProvider: false,\r\n    accountAddress: \"\",\r\n    accountBalance: \"\",\r\n    managerAddress: null,\r\n    croSkullsContract: false,\r\n    croSkullsStaking: false,\r\n    croSkullsGrave: false,\r\n    croSkullsDescription: false,\r\n    croSkullsPetEggs: false,\r\n    croSkullsSouls: false,\r\n    croPotionBlue: false,\r\n    croPotionRed: false,\r\n    ebisusMarketplace: false,\r\n    providerConnected: false,\r\n    contractDetected: false,\r\n    ethers: ethers,\r\n    formatEther: (bn, fixed = false) => fixed ? parseFloat(ethers.utils.formatEther(bn)).toFixed(2) : ethers.utils.formatEther(bn)\r\n}\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n    let payload = action.payload\r\n    switch (action.type) {\r\n        case \"CONNECTION_REQUEST\":\r\n            return {\r\n                ...initialState,\r\n                loading: true,\r\n            };\r\n            case \"CONNECTION_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                contractDetected: true,\r\n                accountAddress: payload.accountAddress,\r\n                accountBalance: payload.accountBalance,\r\n                ethProvider: payload.ethProvider,\r\n                croSkullsContract: payload.croSkullsContract,\r\n                croSkullsStaking: payload.croSkullsStaking,\r\n                croSkullsGrave: payload.croSkullsGrave,\r\n                croSkullsDescription: payload.croSkullsDescription,\r\n                croSkullsPetEggs: payload.croSkullsPetEggs,\r\n                croSkullsSouls: payload.croSkullsSouls,\r\n                croPotionBlue: payload.croPotionBlue,\r\n                croPotionRed: payload.croPotionRed,\r\n                ebisusMarketplace: payload.ebisusMarketplace,\r\n                provider: payload.provider,\r\n                providerConnected: true,\r\n            };\r\n        case \"CONNECTION_FAILED\":\r\n            return {\r\n                ...initialState,\r\n                loading: false,\r\n                    errorMsg: action.payload,\r\n            };\r\n        case \"UPDATE_ACCOUNT\":\r\n            return {\r\n                ...state,\r\n                account: action.payload.account,\r\n            };\r\n        case \"DISCONNECT\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMsg: \"\",\r\n                provider: false,\r\n                ethProvider: false,\r\n                accountAddress: \"\",\r\n                accountBalance: \"\",\r\n                managerAddress: null,\r\n                croSkullsContract: false,\r\n                croSkullsStaking: false,\r\n                croSkullsGrave: false,\r\n                croSkullsDescription: false,\r\n                croSkullsSouls: false,\r\n                croPotionBlue: false,\r\n                croPotionRed: false,\r\n                ebisusMarketplace: false,\r\n                providerConnected: false,\r\n                contractDetected: false,\r\n            }\r\n        case \"CONTRACT_NOT_DETECTED\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                providerConnected: true,\r\n                contractDetected: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default blockchainReducer;"]},"metadata":{},"sourceType":"module"}