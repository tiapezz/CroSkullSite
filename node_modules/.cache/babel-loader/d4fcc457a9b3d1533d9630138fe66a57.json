{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueAndUpdates = void 0;\n\nvar xstream_1 = require(\"xstream\");\n/**\n * A read only wrapper around DefaultValueProducer that allows\n * to synchronously get the current value using the .value property\n * and listen to to updates by suscribing to the .updates stream\n */\n\n\nvar ValueAndUpdates = /*#__PURE__*/function () {\n  function ValueAndUpdates(producer) {\n    _classCallCheck(this, ValueAndUpdates);\n\n    this.producer = producer;\n    this.updates = xstream_1.MemoryStream.createWithMemory(this.producer);\n  }\n\n  _createClass(ValueAndUpdates, [{\n    key: \"waitFor\",\n\n    /**\n     * Resolves as soon as search value is found.\n     *\n     * @param search either a value or a function that must return true when found\n     * @returns the value of the update that caused the search match\n     */\n    value: function () {\n      var _waitFor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(search) {\n        var _this = this;\n\n        var searchImplementation;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                searchImplementation = typeof search === \"function\" ? search : function (value) {\n                  return value === search;\n                };\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var subscription = _this.updates.subscribe({\n                    next: function next(newValue) {\n                      if (searchImplementation(newValue)) {\n                        resolve(newValue); // MemoryStream.subscribe() calls next with the last value.\n                        // Make async to ensure the subscription exists\n\n                        // MemoryStream.subscribe() calls next with the last value.\n                        // Make async to ensure the subscription exists\n                        setTimeout(function () {\n                          return subscription.unsubscribe();\n                        }, 0);\n                      }\n                    },\n                    complete: function complete() {\n                      subscription.unsubscribe();\n                      reject(\"Update stream completed without expected value\");\n                    },\n                    error: function error(_error) {\n                      reject(_error);\n                    }\n                  });\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function waitFor(_x) {\n        return _waitFor.apply(this, arguments);\n      }\n\n      return waitFor;\n    }()\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.producer.value;\n    }\n  }]);\n\n  return ValueAndUpdates;\n}();\n\nexports.ValueAndUpdates = ValueAndUpdates;","map":null,"metadata":{},"sourceType":"script"}