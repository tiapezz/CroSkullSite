{"ast":null,"code":"import _defineProperty from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\src\\\\components\\\\Social\\\\Profile.jsx\";\n\nimport React, { useEffect, useState } from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport './Social.css';\nimport bg from './bg2.jpg';\nvar ipfsUri480 = \"https://croskull.mypinata.cloud/ipfs/QmWu9bKunKbv8Kkq8wEWGpCaW47oMBbH6ep4ZWBzAxHtgj/\";\nvar ipfsUri128 = \"https://croskull.mypinata.cloud/ipfs/QmZn1HvYE1o1J8LhNpxFTj5k8LQb2bWT49YvbrhB3r19Xx/\";\n\nvar Profile = function Profile() {\n  var dispatch = useDispatch();\n\n  var _store$getState = store.getState(),\n      blockchain = _store$getState.blockchain,\n      data = _store$getState.data;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      viewStories = _useState2[0],\n      toggleStories = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      viewInventory = _useState4[0],\n      toggleInventory = _useState4[1];\n\n  var _useState5 = useState({\n    currentView: 'tavern',\n    //tavern or adventure\n    selectedSkulls: [],\n    selectedStakeSkulls: []\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      viewState = _useState6[0],\n      setViewState = _useState6[1];\n\n  var _useState7 = useState({\n    display: false,\n    tokenId: 0,\n    title: \"\",\n    description: \"\",\n    birthDate: 0,\n    deathDate: 0,\n    hobby: \"\",\n    twitter: \"\",\n    faction: \"\",\n    ownerOf: \"\",\n    x: 0,\n    y: 0\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      storyState = _useState8[0],\n      setStoryState = _useState8[1];\n\n  var _useState9 = useState({\n    display: false,\n    tokenId: 0,\n    title: \"\",\n    description: \"\",\n    birthDate: 0,\n    deathDate: 0,\n    hobby: \"\",\n    twitter: \"\",\n    faction: \"\"\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      editorStory = _useState10[0],\n      setEditorStory = _useState10[1];\n\n  var _useState11 = useState({\n    x: 0,\n    y: 0\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      mousePos = _useState12[0],\n      setMousePos = _useState12[1];\n\n  useEffect(function () {\n    if (viewStories) toggleStories(false);\n    if (viewInventory) toggleInventory(false);\n  }, [viewState]);\n  useEffect(function () {\n    if (viewInventory && viewStories) toggleInventory(false);\n  }, [viewStories]);\n  useEffect(function () {\n    if (viewStories && viewInventory) toggleStories(false);\n  }, [viewInventory]);\n  useEffect(function () {\n    setEditorStory(_objectSpread({}, editorStory, {\n      tokenId: storyState.tokenId\n    }));\n  }, [storyState.tokenId]);\n\n  var fetchSkullDescription = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var tokenId, ownerOf, croSkullsDescription, accountAddress, ipfsHash, hashMetadata, _yield$hashMetadata$j, _name, _description, _birthDate, _deathDate, _hobby, _twitter, _faction;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tokenId = _ref.tokenId, ownerOf = _ref.ownerOf;\n              croSkullsDescription = blockchain.croSkullsDescription, accountAddress = blockchain.accountAddress;\n              _context.next = 4;\n              return croSkullsDescription.descriptionHashes(tokenId);\n\n            case 4:\n              ipfsHash = _context.sent;\n              ipfsHash = ipfsHash.toString();\n\n              if (!ipfsHash) {\n                _context.next = 25;\n                break;\n              }\n\n              ipfsHash = ipfsHash.replace('ipfs://', 'https://ipfs.infura.io/ipfs/');\n              _context.next = 10;\n              return fetch(ipfsHash);\n\n            case 10:\n              hashMetadata = _context.sent;\n              _context.next = 13;\n              return hashMetadata.json();\n\n            case 13:\n              _yield$hashMetadata$j = _context.sent;\n              _name = _yield$hashMetadata$j.name;\n              _description = _yield$hashMetadata$j.description;\n              _birthDate = _yield$hashMetadata$j.birthDate;\n              _deathDate = _yield$hashMetadata$j.deathDate;\n              _hobby = _yield$hashMetadata$j.hobby;\n              _twitter = _yield$hashMetadata$j.twitter;\n              _faction = _yield$hashMetadata$j.faction;\n              setStoryState(_objectSpread({}, storyState, {\n                name: _name,\n                description: _description,\n                birthDate: _birthDate,\n                deathDate: _deathDate,\n                hobby: _hobby,\n                twitter: _twitter,\n                faction: _faction,\n                display: true,\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\n                x: mousePos.x,\n                y: mousePos.y\n              }));\n              setEditorStory(_objectSpread({}, editorStory, {\n                name: _name,\n                description: _description,\n                birthDate: _birthDate,\n                deathDate: _deathDate,\n                hobby: _hobby,\n                twitter: _twitter,\n                faction: _faction,\n                display: false,\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : storyState.ownerOf\n              }));\n              _context.next = 26;\n              break;\n\n            case 25:\n              setStoryState({\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : accountAddress,\n                display: true\n              });\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchSkullDescription(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var saveSkullStory = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var croSkullsDescription, storyfied, descriptionBuffer, client, ipfsResponse, path, skullStoryTx;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              croSkullsDescription = blockchain.croSkullsDescription;\n              storyfied = JSON.stringify(editorStory);\n              descriptionBuffer = Buffer.from(storyfied);\n              _context3.prev = 3;\n              client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\n              _context3.next = 7;\n              return client.add(descriptionBuffer);\n\n            case 7:\n              ipfsResponse = _context3.sent;\n\n              if (!(ipfsResponse.path !== \"\")) {\n                _context3.next = 13;\n                break;\n              }\n\n              path = \"ipfs://\".concat(ipfsResponse.path);\n              skullStoryTx = croSkullsDescription.updateUsingGrave(editorStory.tokenId.toString(), //tokenId\n              path // ipfs string hash with prefix\n              );\n              _context3.next = 13;\n              return skullStoryTx.then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tx) {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          console.log(tx);\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context2.next = 4;\n                          return tx.wait(2);\n\n                        case 4:\n                          dispatch(sendNotification({\n                            title: \"Story Updated!\",\n                            message: \"Skull #\".concat(editorStory.tokenId, \"'s story updated succesful\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          fetchSkullDescription({\n                            tokenId: editorStory.tokenId\n                          });\n                          setEditorStory(_objectSpread({}, editorStory, {\n                            display: false\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n\n            case 13:\n              _context3.next = 18;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.log(_context3.t0.message);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 15]]);\n    }));\n\n    return function saveSkullStory() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleFieldChange = function handleFieldChange(event) {\n    var value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event;\n    var name = event.target ? event.target.id : \"description\";\n    var type = event.target ? event.target.type : \"description\";\n    console.log(value, name, type);\n\n    if (type === 'date') {\n      value = parseInt(new Date(value).getTime() / 1000);\n    }\n\n    setEditorStory(_objectSpread({}, editorStory, _defineProperty({}, name, value)));\n  }; //quill description editor setting\n\n\n  var storiesLoading = data.storiesLoading,\n      redCount = data.redCount,\n      blueCount = data.blueCount,\n      croSkullsStaked = data.croSkullsStaked,\n      croSkulls = data.croSkulls,\n      skullsStories = data.skullsStories,\n      approval = data.approval,\n      advancedMetadata = data.advancedMetadata,\n      loading = data.loading,\n      croSkullsContractOwner = data.croSkullsContractOwner,\n      petEggsMintedByUser = data.petEggsMintedByUser,\n      storyAllowance = data.storyAllowance;\n  var accountAddress = blockchain.accountAddress,\n      contractDetected = blockchain.contractDetected;\n  var tokenId = storyState.tokenId,\n      name = storyState.name,\n      description = storyState.description,\n      birthDate = storyState.birthDate,\n      deathDate = storyState.deathDate,\n      hobby = storyState.hobby,\n      twitter = storyState.twitter,\n      faction = storyState.faction,\n      display = storyState.display;\n  var modules = {\n    toolbar: [[{\n      'header': [1, 2, false]\n    }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n      'list': 'ordered'\n    }, {\n      'list': 'bullet'\n    }, {\n      'indent': '-1'\n    }, {\n      'indent': '+1'\n    }], ['clean']]\n  };\n  var formats = ['header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent'];\n\n  var openbar = function openbar() {\n    document.getElementById(\"sidebar\").style.width = \"100%\";\n  };\n\n  var closebar = function closebar() {\n    document.getElementById(\"sidebar\").style.width = \"0px\";\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-banner\",\n    style: {\n      backgroundImage: 'url(' + bg + ')'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: ipfsUri128 + '27.webp',\n    className: \"pro-pic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-navbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navbar-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"view\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }, \"Home\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, \"About\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, \"Follower\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }\n  }, \"Following\"), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faBars,\n    className: \"header-bar\",\n    onClick: function onClick() {\n      return openbar();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-bar-h\",\n    id: \"sidebar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"skull-button close-button\",\n    onClick: function onClick() {\n      return closebar();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stor\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, \"Stories\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"following\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 11\n    }\n  }, \"Following\")))));\n};\n\nexport default Profile;","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/components/Social/Profile.jsx"],"names":["React","useEffect","useState","FontAwesomeIcon","faBars","bg","ipfsUri480","ipfsUri128","Profile","dispatch","useDispatch","store","getState","blockchain","data","viewStories","toggleStories","viewInventory","toggleInventory","currentView","selectedSkulls","selectedStakeSkulls","viewState","setViewState","display","tokenId","title","description","birthDate","deathDate","hobby","twitter","faction","ownerOf","x","y","storyState","setStoryState","editorStory","setEditorStory","mousePos","setMousePos","fetchSkullDescription","croSkullsDescription","accountAddress","descriptionHashes","ipfsHash","toString","replace","fetch","hashMetadata","json","name","saveSkullStory","storyfied","JSON","stringify","descriptionBuffer","Buffer","from","client","IpfsHttpClient","URL","add","ipfsResponse","path","skullStoryTx","updateUsingGrave","then","tx","console","log","sendNotification","message","type","wait","getSkullsData","handleFieldChange","event","value","target","id","parseInt","Date","getTime","storiesLoading","redCount","blueCount","croSkullsStaked","croSkulls","skullsStories","approval","advancedMetadata","loading","croSkullsContractOwner","petEggsMintedByUser","storyAllowance","contractDetected","modules","toolbar","formats","openbar","document","getElementById","style","width","closebar","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars  } from '@fortawesome/free-solid-svg-icons';\r\nimport './Social.css';\r\nimport bg from './bg2.jpg';\r\n\r\nconst ipfsUri480 = \"https://croskull.mypinata.cloud/ipfs/QmWu9bKunKbv8Kkq8wEWGpCaW47oMBbH6ep4ZWBzAxHtgj/\";\r\nconst ipfsUri128 = \"https://croskull.mypinata.cloud/ipfs/QmZn1HvYE1o1J8LhNpxFTj5k8LQb2bWT49YvbrhB3r19Xx/\";\r\n\r\n\r\nconst Profile = () => {\r\n\r\n  let dispatch = useDispatch()\r\n  let { blockchain, data } = store.getState()\r\n\r\n  const [viewStories, toggleStories] = useState( false )\r\n  const [viewInventory, toggleInventory] = useState( false )\r\n\r\n  const [viewState, setViewState] = useState( {\r\n    currentView: 'tavern', //tavern or adventure\r\n    selectedSkulls: [],\r\n    selectedStakeSkulls: []\r\n  })\r\n\r\n  const [storyState, setStoryState] = useState( {\r\n    display: false,\r\n    tokenId: 0,\r\n    title: \"\",\r\n    description: \"\",\r\n    birthDate: 0,\r\n    deathDate: 0,\r\n    hobby: \"\",\r\n    twitter: \"\",\r\n    faction: \"\",\r\n    ownerOf: \"\",\r\n    x: 0,\r\n    y: 0\r\n  })\r\n\r\n  const [editorStory, setEditorStory] = useState( {\r\n    display: false,\r\n    tokenId: 0,\r\n    title: \"\",\r\n    description: \"\",\r\n    birthDate: 0,\r\n    deathDate: 0,\r\n    hobby: \"\",\r\n    twitter: \"\",\r\n    faction: \"\"\r\n  } )\r\n\r\n  const [mousePos, setMousePos] = useState({ \r\n    x: 0, \r\n    y: 0 \r\n  })\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    if( viewStories )\r\n      toggleStories( false )\r\n    if( viewInventory )\r\n      toggleInventory( false )\r\n  }, [viewState])\r\n\r\n  useEffect(() => {\r\n    if( viewInventory && viewStories )\r\n      toggleInventory( false )\r\n  }, [viewStories])\r\n\r\n  useEffect(() => {\r\n    if( viewStories  && viewInventory )\r\n      toggleStories( false )\r\n  }, [viewInventory])\r\n\r\n  useEffect( () => {\r\n    setEditorStory( { \r\n      ...editorStory,\r\n      tokenId: storyState.tokenId\r\n    })\r\n  }, [storyState.tokenId])\r\n  \r\n  const fetchSkullDescription = async ( { tokenId, ownerOf } ) => {\r\n    let { croSkullsDescription, accountAddress } = blockchain\r\n    let ipfsHash = await croSkullsDescription.descriptionHashes( tokenId )\r\n    ipfsHash = ipfsHash.toString()\r\n    if( ipfsHash) {\r\n      ipfsHash = ipfsHash.replace('ipfs://', 'https://ipfs.infura.io/ipfs/')\r\n      let hashMetadata = await fetch( ipfsHash );\r\n      let { name, description, birthDate, deathDate, hobby, twitter, faction} = await hashMetadata.json();\r\n      \r\n      setStoryState( {\r\n        ...storyState,\r\n        name,\r\n        description,\r\n        birthDate,\r\n        deathDate,\r\n        hobby,\r\n        twitter,\r\n        faction,\r\n        display: true,\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\r\n        x: mousePos.x,\r\n        y: mousePos.y\r\n      } )\r\n      setEditorStory( {\r\n        ...editorStory,\r\n        name,\r\n        description,\r\n        birthDate,\r\n        deathDate,\r\n        hobby,\r\n        twitter,\r\n        faction,\r\n        display: false,\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\r\n      } )\r\n    } else {\r\n      setStoryState( {\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : accountAddress,\r\n        display: true\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const saveSkullStory = async ( ) => {\r\n    let { croSkullsDescription } = blockchain\r\n    let storyfied = JSON.stringify(editorStory)\r\n    let descriptionBuffer = Buffer.from(storyfied)\r\n    try {\r\n      const client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\r\n      const ipfsResponse = await client.add(descriptionBuffer);\r\n      if( ipfsResponse.path !== \"\" ){\r\n          let path = `ipfs://${ipfsResponse.path}`\r\n          let skullStoryTx = croSkullsDescription.updateUsingGrave( \r\n            editorStory.tokenId.toString(), //tokenId\r\n            path, // ipfs string hash with prefix\r\n          )\r\n\r\n           await skullStoryTx.then(\r\n            async (tx) => {\r\n              console.log( tx )\r\n              dispatch(sendNotification({\r\n                title: `Transaction Sent`,\r\n                message: 'Waiting for confirmation...',\r\n                tx,\r\n                type: \"info\"\r\n              }))\r\n              await tx.wait(2)\r\n              dispatch(sendNotification({\r\n                title: `Story Updated!`,\r\n                message: `Skull #${editorStory.tokenId}'s story updated succesful`,\r\n                tx,\r\n                type: \"success\"\r\n              }))\r\n              fetchSkullDescription( { tokenId: editorStory.tokenId })\r\n              setEditorStory({\r\n                ...editorStory,\r\n                display: false\r\n              })\r\n              dispatch(getSkullsData())\r\n            }\r\n          )\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  const handleFieldChange = ( event ) => {\r\n    let value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event\r\n    let name = event.target ? event.target.id : \"description\"\r\n    let type = event.target ? event.target.type : \"description\"\r\n    console.log( value, name, type )\r\n    if( type === 'date' ){\r\n      value = parseInt( new Date( value ).getTime() / 1000 )\r\n    }\r\n    setEditorStory( {\r\n      ...editorStory,\r\n      [name]: value\r\n    } )\r\n  }\r\n\r\n    //quill description editor setting\r\n\r\n    let { storiesLoading, redCount, blueCount, croSkullsStaked, croSkulls, skullsStories, approval, advancedMetadata, loading, croSkullsContractOwner, petEggsMintedByUser, storyAllowance } = data;\r\n    let { accountAddress, contractDetected } = blockchain\r\n    let { \r\n      tokenId,\r\n      name,\r\n      description,\r\n      birthDate,\r\n      deathDate,\r\n      hobby,\r\n      twitter,\r\n      faction,\r\n      display\r\n    } = storyState;\r\n\r\n    let modules = {\r\n      toolbar: [\r\n        [{ 'header': [1, 2, false] }],\r\n        ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n        [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n        ['clean']\r\n      ],\r\n    };\r\n  \r\n    let formats = [\r\n      'header',\r\n      'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n      'list', 'bullet', 'indent',\r\n    ];\r\n\r\n  const openbar = () =>\r\n  {\r\n    document.getElementById(\"sidebar\").style.width = \"100%\";\r\n  }\r\n  const closebar = () =>\r\n  {\r\n    document.getElementById(\"sidebar\").style.width = \"0px\";\r\n  }\r\n  return (\r\n\r\n    <>\r\n      <div className=\"profile-container\">\r\n        <div className=\"profile-content\">\r\n\r\n          <div className=\"profile-header\">\r\n            <div className=\"header-banner\" style={{ backgroundImage: 'url(' + bg + ')' }}>\r\n              <img src={ipfsUri128 + '27.webp'} className=\"pro-pic\"/>\r\n            </div>\r\n            <div className=\"header-navbar\" >\r\n              <div className=\"navbar-button\">\r\n                <p className=\"view\">Home</p>\r\n                <p>About</p>\r\n                <p>Follower</p>\r\n                <p>Following</p>\r\n                <FontAwesomeIcon  icon={faBars}\r\n                    className=\"header-bar\"\r\n                    onClick={() => openbar()}\r\n                  />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"profile-bar-h\" id=\"sidebar\">\r\n          <button className=\"skull-button close-button\" onClick={()=>closebar()}>X</button>\r\n          <div className=\"stor\">\r\n            <h1>Stories</h1>\r\n          </div>\r\n          <div className=\"following\">\r\n          <h1>Following</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}