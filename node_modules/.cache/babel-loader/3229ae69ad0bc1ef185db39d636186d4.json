{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAttribute = exports.parseRawLog = exports.parseLogs = exports.parseLog = exports.parseEvent = exports.parseAttribute = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nfunction parseAttribute(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Attribute must be a non-null object\");\n  var key = input.key,\n      value = input.value;\n  if (typeof key !== \"string\" || !key) throw new Error(\"Attribute's key must be a non-empty string\");\n\n  if (typeof value !== \"string\" && typeof value !== \"undefined\") {\n    throw new Error(\"Attribute's value must be a string or unset\");\n  }\n\n  return {\n    key: key,\n    value: value || \"\"\n  };\n}\n\nexports.parseAttribute = parseAttribute;\n\nfunction parseEvent(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Event must be a non-null object\");\n  var type = input.type,\n      attributes = input.attributes;\n\n  if (typeof type !== \"string\" || type === \"\") {\n    throw new Error(\"Event type must be a non-empty string\");\n  }\n\n  if (!Array.isArray(attributes)) throw new Error(\"Event's attributes must be an array\");\n  return {\n    type: type,\n    attributes: attributes.map(parseAttribute)\n  };\n}\n\nexports.parseEvent = parseEvent;\n\nfunction parseLog(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Log must be a non-null object\");\n  var msg_index = input.msg_index,\n      log = input.log,\n      events = input.events;\n  if (typeof msg_index !== \"number\") throw new Error(\"Log's msg_index must be a number\");\n  if (typeof log !== \"string\") throw new Error(\"Log's log must be a string\");\n  if (!Array.isArray(events)) throw new Error(\"Log's events must be an array\");\n  return {\n    msg_index: msg_index,\n    log: log,\n    events: events.map(parseEvent)\n  };\n}\n\nexports.parseLog = parseLog;\n\nfunction parseLogs(input) {\n  if (!Array.isArray(input)) throw new Error(\"Logs must be an array\");\n  return input.map(parseLog);\n}\n\nexports.parseLogs = parseLogs;\n\nfunction parseRawLog() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"[]\";\n  var logsToParse = JSON.parse(input).map(function (_ref, i) {\n    var events = _ref.events;\n    return {\n      msg_index: i,\n      events: events,\n      log: \"\"\n    };\n  });\n  return parseLogs(logsToParse);\n}\n\nexports.parseRawLog = parseRawLog;\n/**\n * Searches in logs for the first event of the given event type and in that event\n * for the first first attribute with the given attribute key.\n *\n * Throws if the attribute was not found.\n */\n\nfunction findAttribute(logs, eventType, attrKey) {\n  var _a;\n\n  var firstLogs = logs.find(function () {\n    return true;\n  });\n  var out = (_a = firstLogs === null || firstLogs === void 0 ? void 0 : firstLogs.events.find(function (event) {\n    return event.type === eventType;\n  })) === null || _a === void 0 ? void 0 : _a.attributes.find(function (attr) {\n    return attr.key === attrKey;\n  });\n\n  if (!out) {\n    throw new Error(\"Could not find attribute '\".concat(attrKey, \"' in first event of type '\").concat(eventType, \"' in first log.\"));\n  }\n\n  return out;\n}\n\nexports.findAttribute = findAttribute;","map":null,"metadata":{},"sourceType":"script"}