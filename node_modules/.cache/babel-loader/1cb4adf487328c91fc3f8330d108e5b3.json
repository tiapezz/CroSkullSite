{"ast":null,"code":"var _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar EthQuery = require('eth-query');\n\nvar pify = require('pify');\n\nvar BaseFilterWithHistory = require('./base-filter-history');\n\nvar _require = require('./hexUtils'),\n    bnToHex = _require.bnToHex,\n    hexToInt = _require.hexToInt,\n    incrementHexInt = _require.incrementHexInt,\n    minBlockRef = _require.minBlockRef,\n    blockRefIsNumber = _require.blockRefIsNumber;\n\nvar LogFilter = /*#__PURE__*/function (_BaseFilterWithHistor) {\n  \"use strict\";\n\n  _inherits(LogFilter, _BaseFilterWithHistor);\n\n  function LogFilter(_ref) {\n    var _this;\n\n    var provider = _ref.provider,\n        params = _ref.params;\n\n    _classCallCheck(this, LogFilter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LogFilter).call(this));\n    _this.type = 'log';\n    _this.ethQuery = new EthQuery(provider);\n    _this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: []\n    }, params); // normalize address parameter\n\n    if (_this.params.address) {\n      // ensure array\n      if (!Array.isArray(_this.params.address)) {\n        _this.params.address = [_this.params.address];\n      } // ensure lowercase\n\n\n      _this.params.address = _this.params.address.map(function (address) {\n        return address.toLowerCase();\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(LogFilter, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var currentBlock, fromBlock, toBlock, params, newLogs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentBlock = _ref2.currentBlock;\n                // resolve params.fromBlock\n                fromBlock = this.params.fromBlock;\n                if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;\n                if ('earliest' === fromBlock) fromBlock = '0x0';\n                this.params.fromBlock = fromBlock; // set toBlock for initial lookup\n\n                toBlock = minBlockRef(this.params.toBlock, currentBlock);\n                params = Object.assign({}, this.params, {\n                  toBlock: toBlock\n                }); // fetch logs and add to results\n\n                _context.next = 9;\n                return this._fetchLogs(params);\n\n              case 9:\n                newLogs = _context.sent;\n                this.addInitialResults(newLogs);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize(_x) {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n        var _this2 = this;\n\n        var oldBlock, newBlock, toBlock, fromBlock, params, newLogs, matchingLogs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                // configure params for this update\n                toBlock = newBlock;\n\n                // oldBlock is empty on first sync\n                if (oldBlock) {\n                  fromBlock = incrementHexInt(oldBlock);\n                } else {\n                  fromBlock = newBlock;\n                } // fetch logs\n\n\n                params = Object.assign({}, this.params, {\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n                _context2.next = 6;\n                return this._fetchLogs(params);\n\n              case 6:\n                newLogs = _context2.sent;\n                matchingLogs = newLogs.filter(function (log) {\n                  return _this2.matchLog(log);\n                }); // add to results\n\n                this.addResults(matchingLogs);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"_fetchLogs\",\n    value: function () {\n      var _fetchLogs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var _this3 = this;\n\n        var newLogs;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pify(function (cb) {\n                  return _this3.ethQuery.getLogs(params, cb);\n                })();\n\n              case 2:\n                newLogs = _context3.sent;\n                return _context3.abrupt(\"return\", newLogs);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function _fetchLogs(_x3) {\n        return _fetchLogs2.apply(this, arguments);\n      }\n\n      return _fetchLogs;\n    }()\n  }, {\n    key: \"matchLog\",\n    value: function matchLog(log) {\n      // check if block number in bounds:\n      if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n      if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false; // address is correct:\n\n      var normalizedLogAddress = log.address && log.address.toLowerCase();\n      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false; // topics match:\n      // topics are position-dependant\n      // topics can be nested to represent `or` [[a || b], c]\n      // topics can be null, representing a wild card for that position\n\n      var topicsMatch = this.params.topics.every(function (topicPattern, index) {\n        // pattern is longer than actual topics\n        var logTopic = log.topics[index];\n        if (!logTopic) return false;\n        logTopic = logTopic.toLowerCase(); // normalize subTopics\n\n        var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]; // check for wild card\n\n        var subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n        if (subtopicsIncludeWildcard) return true;\n        subtopicsToMatch = subtopicsToMatch.map(function (topic) {\n          return topic.toLowerCase();\n        }); // check each possible matching topic\n\n        var topicDoesMatch = subtopicsToMatch.includes(logTopic);\n        return topicDoesMatch;\n      });\n      return topicsMatch;\n    }\n  }]);\n\n  return LogFilter;\n}(BaseFilterWithHistory);\n\nmodule.exports = LogFilter;","map":null,"metadata":{},"sourceType":"script"}