{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\n\nvar fetchEbisusRequest = function fetchEbisusRequest() {\n  return {\n    type: \"FETCH_EBISUS_REQUEST\"\n  };\n};\n\nvar fetchEbisusSuccess = function fetchEbisusSuccess(payload) {\n  return {\n    type: \"FETCH_EBISUS_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar fetchSkullsSuccess = function fetchSkullsSuccess(payload) {\n  return {\n    type: \"FETCH_SKULLS_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nexport var loadEbisusData = function loadEbisusData(sort) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var rawSkullData, rawBlueData, rawRedData, s, b, r;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchEbisusRequest());\n              _context.next = 3;\n              return fetch('https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F');\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              rawSkullData = _context.sent;\n              _context.next = 8;\n              return fetch('https://api.ebisusbay.com/collections?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14');\n\n            case 8:\n              _context.next = 10;\n              return _context.sent.json();\n\n            case 10:\n              rawBlueData = _context.sent;\n              _context.next = 13;\n              return fetch('https://api.ebisusbay.com/collections?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9');\n\n            case 13:\n              _context.next = 15;\n              return _context.sent.json();\n\n            case 15:\n              rawRedData = _context.sent;\n\n              if (rawSkullData.collections[0] && rawBlueData.collections[0] && rawRedData.collections[0]) {\n                s = rawSkullData.collections[0];\n                b = rawBlueData.collections[0];\n                r = rawRedData.collections[0];\n                dispatch(fetchEbisusSuccess({\n                  skullAvgPrice: s.averageSalePrice,\n                  skullFloorPrice: s.floorPrice,\n                  skullForSales: s.numberActive,\n                  skullSolds: s.numberOfSales,\n                  skullTotalVolume: s.totalVolume,\n                  //blue stats\n                  blueAvgPrice: b.averageSalePrice,\n                  blueFloorPrice: b.floorPrice,\n                  blueForSales: b.numberActive,\n                  blueSolds: b.numberOfSales,\n                  blueTotalVolume: b.totalVolume,\n                  //redpotion stats\n                  redAvgPrice: r.averageSalePrice,\n                  redFloorPrice: r.floorPrice,\n                  redForSales: r.numberActive,\n                  redSolds: r.numberOfSales,\n                  redTotalVolume: r.totalVolume\n                }));\n              }\n\n              dispatch(loadEbisusSkulls());\n              dispatch(loadEbisusSkullsNew(sort));\n              dispatch(loadEbisusBlue());\n              dispatch(loadEbisusRed());\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEbisusSkulls = function loadEbisusSkulls() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState, marketplace, saleSkulls, skullForSales, newPage, rawSkullData, _rawSkullData;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState = store.getState(), marketplace = _store$getState.marketplace;\n              saleSkulls = marketplace.saleSkulls, skullForSales = marketplace.skullForSales;\n\n              if (!(saleSkulls.length >= skullForSales)) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              if (!(saleSkulls.length > 0)) {\n                _context2.next = 14;\n                break;\n              }\n\n              newPage = parseInt(saleSkulls.length / 20) + 1;\n              _context2.next = 8;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=\".concat(newPage, \"&pageSize=20\"));\n\n            case 8:\n              _context2.next = 10;\n              return _context2.sent.json();\n\n            case 10:\n              rawSkullData = _context2.sent;\n              saleSkulls = saleSkulls.concat(rawSkullData.listings);\n              _context2.next = 21;\n              break;\n\n            case 14:\n              _context2.next = 16;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=20\");\n\n            case 16:\n              _context2.next = 18;\n              return _context2.sent.json();\n\n            case 18:\n              _rawSkullData = _context2.sent;\n              saleSkulls = _rawSkullData.listings;\n              console.log(_rawSkullData);\n\n            case 21:\n              dispatch(updateState({\n                key: \"saleSkulls\",\n                value: saleSkulls\n              }));\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEbisusSkullsNew = function loadEbisusSkullsNew(i) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _store$getState2, marketplace, skullList, rawSkullData;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _store$getState2 = store.getState(), marketplace = _store$getState2.marketplace;\n              console.log('skullist:' + skullList);\n              _context3.t0 = i;\n              _context3.next = _context3.t0 === 0 ? 5 : _context3.t0 === 1 ? 12 : _context3.t0 === 2 ? 19 : _context3.t0 === 3 ? 26 : _context3.t0 === 4 ? 34 : _context3.t0 === 5 ? 41 : 49;\n              break;\n\n            case 5:\n              _context3.next = 7;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666\");\n\n            case 7:\n              _context3.next = 9;\n              return _context3.sent.json();\n\n            case 9:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              return _context3.abrupt(\"break\", 51);\n\n            case 12:\n              _context3.next = 14;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666\");\n\n            case 14:\n              _context3.next = 16;\n              return _context3.sent.json();\n\n            case 16:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              return _context3.abrupt(\"break\", 51);\n\n            case 19:\n              _context3.next = 21;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=price&page=1&pageSize=6666\");\n\n            case 21:\n              _context3.next = 23;\n              return _context3.sent.json();\n\n            case 23:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              return _context3.abrupt(\"break\", 51);\n\n            case 26:\n              _context3.next = 28;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=price&page=1&pageSize=6666\");\n\n            case 28:\n              _context3.next = 30;\n              return _context3.sent.json();\n\n            case 30:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              skullList = skullList.reverse();\n              return _context3.abrupt(\"break\", 51);\n\n            case 34:\n              _context3.next = 36;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=rank&page=1&pageSize=6666\");\n\n            case 36:\n              _context3.next = 38;\n              return _context3.sent.json();\n\n            case 38:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              return _context3.abrupt(\"break\", 51);\n\n            case 41:\n              _context3.next = 43;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=rank&page=1&pageSize=6666\");\n\n            case 43:\n              _context3.next = 45;\n              return _context3.sent.json();\n\n            case 45:\n              rawSkullData = _context3.sent;\n              skullList = rawSkullData.listings;\n              skullList = skullList.reverse();\n              return _context3.abrupt(\"break\", 51);\n\n            case 49:\n              skullList = null;\n              return _context3.abrupt(\"break\", 51);\n\n            case 51:\n              dispatch(updateState({\n                key: \"skullList\",\n                value: skullList\n              }));\n\n            case 52:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getAttribute = function getAttribute() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var rawResult, skullsList, attributeList;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 2:\n              rawResult = _context4.sent;\n              _context4.next = 5;\n              return rawResult.json();\n\n            case 5:\n              skullsList = _context4.sent;\n              attributeList = [{\n                name: 'Background',\n                value: []\n              }, {\n                name: 'Skull',\n                value: []\n              }, {\n                name: 'Body',\n                value: []\n              }, {\n                name: 'Nose',\n                value: []\n              }, {\n                name: 'Eyes',\n                value: []\n              }, {\n                name: 'Hat',\n                value: []\n              }, {\n                name: 'Trait',\n                value: [5, 6]\n              }];\n              console.log(skullsList);\n              skullsList.map(function (skull) {\n                skull.attributes.map(function (at) {\n                  switch (at.trait_type) {\n                    case 'Background':\n                      if (!attributeList[0].value.includes(at.value)) attributeList[0].value.push(at.value);\n                      break;\n\n                    case 'Skull':\n                      if (!attributeList[1].value.includes(at.value)) attributeList[1].value.push(at.value);\n                      break;\n\n                    case 'Body':\n                      if (!attributeList[2].value.includes(at.value)) attributeList[2].value.push(at.value);\n                      break;\n\n                    case 'Nose':\n                      if (!attributeList[3].value.includes(at.value)) attributeList[3].value.push(at.value);\n                      break;\n\n                    case 'Eyes':\n                      if (!attributeList[4].value.includes(at.value)) attributeList[4].value.push(at.value);\n                      break;\n\n                    case 'Hat':\n                      if (!attributeList[5].value.includes(at.value)) attributeList[5].value.push(at.value);\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n              });\n              dispatch(updateState({\n                key: \"attributesList\",\n                value: attributeList\n              }));\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEbisusBlue = function loadEbisusBlue() {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var _store$getState3, marketplace, saleBlue, blueForSales, newPage, rawBlueData, _rawBlueData;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _store$getState3 = store.getState(), marketplace = _store$getState3.marketplace;\n              saleBlue = marketplace.saleBlue, blueForSales = marketplace.blueForSales;\n\n              if (!(saleBlue.length >= blueForSales)) {\n                _context5.next = 4;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 4:\n              if (!(saleBlue.length > 0)) {\n                _context5.next = 14;\n                break;\n              }\n\n              newPage = parseInt(saleBlue.length / 20) + 1;\n              _context5.next = 8;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14&state=0&page=\".concat(newPage, \"&pageSize=20\"));\n\n            case 8:\n              _context5.next = 10;\n              return _context5.sent.json();\n\n            case 10:\n              rawBlueData = _context5.sent;\n              saleBlue = saleBlue.concat(rawBlueData.listings);\n              _context5.next = 20;\n              break;\n\n            case 14:\n              _context5.next = 16;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14&state=0&page=1&pageSize=20\");\n\n            case 16:\n              _context5.next = 18;\n              return _context5.sent.json();\n\n            case 18:\n              _rawBlueData = _context5.sent;\n              saleBlue = _rawBlueData.listings;\n\n            case 20:\n              dispatch(updateState({\n                key: \"saleBlue\",\n                value: saleBlue\n              }));\n\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEbisusRed = function loadEbisusRed() {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      var _store$getState4, marketplace, saleRed, newPage, rawRedData, _rawRedData;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _store$getState4 = store.getState(), marketplace = _store$getState4.marketplace;\n              saleRed = marketplace.saleRed;\n\n              if (!(saleRed.length > 0)) {\n                _context6.next = 12;\n                break;\n              }\n\n              newPage = parseInt(saleRed.length / 20) + 1;\n              _context6.next = 6;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9&state=0&sortBy=price&page=\".concat(newPage, \"&pageSize=20\"));\n\n            case 6:\n              _context6.next = 8;\n              return _context6.sent.json();\n\n            case 8:\n              rawRedData = _context6.sent;\n              saleRed = saleRed.concat(rawRedData.listings);\n              _context6.next = 18;\n              break;\n\n            case 12:\n              _context6.next = 14;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9&state=0&sortBy=price&page=1&pageSize=20\");\n\n            case 14:\n              _context6.next = 16;\n              return _context6.sent.json();\n\n            case 16:\n              _rawRedData = _context6.sent;\n              saleRed = _rawRedData.listings;\n\n            case 18:\n              dispatch(updateState({\n                key: \"saleRed\",\n                value: saleRed\n              }));\n\n            case 19:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport var purchaseItem = function purchaseItem(_ref7) {\n  var _listingId = _ref7._listingId,\n      _cost = _ref7._cost,\n      _skullId = _ref7._skullId;\n  return /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch) {\n      var ebisusMarketplace, purchaseTx;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              ebisusMarketplace = store.getState().blockchain.ebisusMarketplace;\n\n              if (!(!ebisusMarketplace || !_listingId)) {\n                _context8.next = 3;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 3:\n              purchaseTx = ebisusMarketplace.makePurchase(_listingId, {\n                value: _cost\n              });\n              _context8.next = 6;\n              return purchaseTx.then( /*#__PURE__*/function () {\n                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tx) {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context7.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Success\",\n                            message: \"Item #\".concat(_skullId, \" purchased!\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 5:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x8) {\n                  return _ref9.apply(this, arguments);\n                };\n              }());\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/marketplace/marketplaceActions.js"],"names":["ethers","store","sendNotification","getSkullsData","fetchEbisusRequest","type","fetchEbisusSuccess","payload","fetchSkullsSuccess","updateState","loadEbisusData","sort","dispatch","fetch","json","rawSkullData","rawBlueData","rawRedData","collections","s","b","r","skullAvgPrice","averageSalePrice","skullFloorPrice","floorPrice","skullForSales","numberActive","skullSolds","numberOfSales","skullTotalVolume","totalVolume","blueAvgPrice","blueFloorPrice","blueForSales","blueSolds","blueTotalVolume","redAvgPrice","redFloorPrice","redForSales","redSolds","redTotalVolume","loadEbisusSkulls","loadEbisusSkullsNew","loadEbisusBlue","loadEbisusRed","getState","marketplace","saleSkulls","length","newPage","parseInt","concat","listings","console","log","key","value","i","skullList","reverse","getAttribute","rawResult","skullsList","attributeList","name","map","skull","attributes","at","trait_type","includes","push","saleBlue","saleRed","purchaseItem","_listingId","_cost","_skullId","ebisusMarketplace","blockchain","purchaseTx","makePurchase","then","tx","title","message","wait"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\r\n\r\nconst fetchEbisusRequest = () => {\r\n  return {\r\n    type: \"FETCH_EBISUS_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchEbisusSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_EBISUS_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nconst fetchSkullsSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_SKULLS_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nconst updateState = (payload) => {\r\n    return {\r\n        type: \"UPDATE_STATE\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadEbisusData = (sort) => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchEbisusRequest())\r\n        let rawSkullData = await (await fetch('https://api.ebisusbay.com/collections?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F')).json();\r\n        let rawBlueData = await (await fetch('https://api.ebisusbay.com/collections?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14')).json();\r\n        let rawRedData = await (await fetch('https://api.ebisusbay.com/collections?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9')).json();\r\n        \r\n        if( rawSkullData.collections[0] && rawBlueData.collections[0] && rawRedData.collections[0]){\r\n            let s = rawSkullData.collections[0];\r\n            let b = rawBlueData.collections[0];\r\n            let r = rawRedData.collections[0]\r\n            dispatch(fetchEbisusSuccess({\r\n                skullAvgPrice: s.averageSalePrice,\r\n                skullFloorPrice: s.floorPrice,\r\n                skullForSales: s.numberActive,\r\n                skullSolds: s.numberOfSales,\r\n                skullTotalVolume: s.totalVolume,\r\n                //blue stats\r\n                blueAvgPrice: b.averageSalePrice,\r\n                blueFloorPrice: b.floorPrice,\r\n                blueForSales: b.numberActive,\r\n                blueSolds: b.numberOfSales,\r\n                blueTotalVolume: b.totalVolume,\r\n                //redpotion stats\r\n                redAvgPrice: r.averageSalePrice,\r\n                redFloorPrice: r.floorPrice,\r\n                redForSales: r.numberActive,\r\n                redSolds: r.numberOfSales,\r\n                redTotalVolume: r.totalVolume,\r\n            }))\r\n        }\r\n        dispatch(loadEbisusSkulls())\r\n        dispatch(loadEbisusSkullsNew(sort))\r\n        dispatch(loadEbisusBlue())\r\n        dispatch(loadEbisusRed())\r\n    }\r\n}\r\n\r\nexport const loadEbisusSkulls = () => {\r\n    return async (dispatch) => {\r\n        let { marketplace } = store.getState()\r\n        let { saleSkulls, skullForSales } = marketplace\r\n        if( saleSkulls.length >= skullForSales) return\r\n        if( saleSkulls.length > 0 ) {\r\n            let newPage = parseInt(saleSkulls.length / 20) + 1\r\n            let rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=${newPage}&pageSize=20`)).json();\r\n            saleSkulls = saleSkulls.concat(\r\n                rawSkullData.listings\r\n            ) \r\n        }else{\r\n            let rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=20`)).json();\r\n            saleSkulls = rawSkullData.listings\r\n            console.log(rawSkullData)\r\n        }\r\n        dispatch(updateState({\r\n            key: \"saleSkulls\",\r\n            value: saleSkulls\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadEbisusSkullsNew = (i) => {\r\n    return async (dispatch) => {\r\n        let { marketplace } = store.getState()\r\n        let skullList;\r\n        console.log('skullist:'+skullList)\r\n        let rawSkullData;\r\n        switch (i){\r\n            case 0:\r\n            rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            break;\r\n            case 1:\r\n            rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            break;\r\n            case 2:\r\n                rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=price&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            break;\r\n            case 3:\r\n                rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=price&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            skullList = skullList.reverse();\r\n            break;\r\n            case 4:\r\n                rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=rank&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            break;\r\n            case 5:\r\n                rawSkullData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&sortBy=rank&page=1&pageSize=6666`)).json();\r\n            skullList = rawSkullData.listings;\r\n            skullList = skullList.reverse();\r\n            break;\r\n            default:\r\n                skullList=null;\r\n            break;\r\n        }\r\n\r\n        dispatch(updateState({\r\n            key: \"skullList\",\r\n            value: skullList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const getAttribute = () =>{\r\n    return async (dispatch) => {\r\n    const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n    let skullsList = await rawResult.json();\r\n    let attributeList = [\r\n        {name:'Background',value:[]},\r\n        {name:'Skull',value:[]},\r\n        {name:'Body',value:[]},\r\n        {name:'Nose',value:[]},\r\n        {name:'Eyes',value:[]},\r\n        {name:'Hat',value:[]},\r\n        {name:'Trait',value:[5,6]}\r\n        ];\r\n        console.log(skullsList);\r\n    skullsList.map(skull =>{\r\n        (skull.attributes).map( at =>{\r\n            switch (at.trait_type) {\r\n                case 'Background':\r\n                    if (!attributeList[0].value.includes(at.value))\r\n                        attributeList[0].value.push(at.value);\r\n                    break;\r\n                case 'Skull':\r\n                    if (!attributeList[1].value.includes(at.value))\r\n                        attributeList[1].value.push(at.value);\r\n                    break;\r\n                case 'Body':\r\n                    if (!attributeList[2].value.includes(at.value))\r\n                        attributeList[2].value.push(at.value);\r\n                    break;\r\n                case 'Nose':\r\n                    if (!attributeList[3].value.includes(at.value))\r\n                        attributeList[3].value.push(at.value);\r\n                    break;\r\n                case 'Eyes':\r\n                    if (!attributeList[4].value.includes(at.value))\r\n                        attributeList[4].value.push(at.value);\r\n                    break;\r\n                case 'Hat':\r\n                    if (!attributeList[5].value.includes(at.value))\r\n                        attributeList[5].value.push(at.value);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    })\r\n    dispatch(updateState({\r\n        key: \"attributesList\",\r\n        value: attributeList\r\n    }))\r\n    }\r\n  }\r\n\r\nexport const loadEbisusBlue = () => {\r\n    return async (dispatch) => {\r\n        let { marketplace } = store.getState()\r\n        let { saleBlue, blueForSales } = marketplace\r\n        if( saleBlue.length >= blueForSales) return\r\n        if( saleBlue.length > 0 ) {\r\n            let newPage = parseInt(saleBlue.length / 20) + 1\r\n            let rawBlueData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14&state=0&page=${newPage}&pageSize=20`)).json();\r\n            saleBlue = saleBlue.concat(\r\n                rawBlueData.listings\r\n            ) \r\n        }else{\r\n            let rawBlueData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xB929D3002208f405180D3C07616F88EDa45F3e14&state=0&page=1&pageSize=20`)).json();\r\n            saleBlue = rawBlueData.listings\r\n        }\r\n        dispatch(updateState({\r\n            key: \"saleBlue\",\r\n            value: saleBlue\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadEbisusRed = () => {\r\n    return async (dispatch) => {\r\n        let { marketplace } = store.getState()\r\n        let { saleRed } = marketplace\r\n        if( saleRed.length > 0 ) {\r\n            let newPage = parseInt(saleRed.length / 20) + 1\r\n            let rawRedData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9&state=0&sortBy=price&page=${newPage}&pageSize=20`)).json();\r\n            saleRed = saleRed.concat(\r\n                rawRedData.listings\r\n            ) \r\n        }else{\r\n            let rawRedData = await (await fetch(`https://api.ebisusbay.com/listings?collection=0x508378E99F5527Acb6eB4f0fc22f954c5783e5F9&state=0&sortBy=price&page=1&pageSize=20`)).json();\r\n            saleRed = rawRedData.listings\r\n        }\r\n        dispatch(updateState({\r\n            key: \"saleRed\",\r\n            value: saleRed\r\n        }))\r\n    }\r\n}\r\n\r\nexport const purchaseItem = ( { _listingId, _cost, _skullId } ) => {\r\n    return async (dispatch) => {\r\n        let { ebisusMarketplace } = store.getState().blockchain\r\n        if( ! ebisusMarketplace || ! _listingId) return\r\n        let purchaseTx = ebisusMarketplace.makePurchase(_listingId, {\r\n            value: _cost\r\n        })\r\n        await purchaseTx.then(\r\n            async (tx) => {\r\n                dispatch(sendNotification({\r\n                    title: `Transaction Sent`,\r\n                    message: 'Waiting for confirmation',\r\n                    tx,\r\n                    type: \"info\"\r\n                }))\r\n                await tx.wait(2)\r\n                dispatch(sendNotification({\r\n                    title: `Success`,\r\n                    message: `Item #${_skullId} purchased!`,\r\n                    tx,\r\n                    type: \"success\"\r\n                }))\r\n                dispatch(getSkullsData())\r\n            }\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}