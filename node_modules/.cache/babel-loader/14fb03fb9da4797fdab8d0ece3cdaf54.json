{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcClient = void 0;\n\nvar stream_1 = require(\"@cosmjs/stream\");\n\nvar types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\n\n\nvar JsonRpcClient = /*#__PURE__*/function () {\n  function JsonRpcClient(connection) {\n    _classCallCheck(this, JsonRpcClient);\n\n    this.connection = connection;\n  }\n\n  _createClass(JsonRpcClient, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n        var filteredStream, pendingResponses, response, error;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                filteredStream = this.connection.responseStream.filter(function (r) {\n                  return r.id === request.id;\n                });\n                pendingResponses = stream_1.firstEvent(filteredStream);\n                this.connection.sendRequest(request);\n                _context.next = 5;\n                return pendingResponses;\n\n              case 5:\n                response = _context.sent;\n\n                if (!types_1.isJsonRpcErrorResponse(response)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                error = response.error;\n                throw new Error(\"JSON RPC error: code=\".concat(error.code, \"; message='\").concat(error.message, \"'\"));\n\n              case 9:\n                return _context.abrupt(\"return\", response);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return JsonRpcClient;\n}();\n\nexports.JsonRpcClient = JsonRpcClient;","map":null,"metadata":{},"sourceType":"script"}