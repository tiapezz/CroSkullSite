{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\n\nvar json_rpc_1 = require(\"@cosmjs/json-rpc\");\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar rpcclient_1 = require(\"./rpcclient\");\n\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(\"Bad status on response: \".concat(res.status));\n  }\n\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nfunction http(_x, _x2, _x3) {\n  return _http.apply(this, arguments);\n}\n\nfunction _http() {\n  _http = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(method, url, request) {\n    var body;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof fetch !== \"undefined\")) {\n              _context2.next = 5;\n              break;\n            }\n\n            body = request ? JSON.stringify(request) : undefined;\n            return _context2.abrupt(\"return\", fetch(url, {\n              method: method,\n              body: body\n            }).then(filterBadStatus).then(function (res) {\n              return res.json();\n            }));\n\n          case 5:\n            return _context2.abrupt(\"return\", axios_1.default.request({\n              url: url,\n              method: method,\n              data: request\n            }).then(function (res) {\n              return res.data;\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _http.apply(this, arguments);\n}\n\nexports.http = http;\n\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient() {\n    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"http://localhost:46657\";\n\n    _classCallCheck(this, HttpClient);\n\n    // accept host.name:port and assume http protocol\n    this.url = rpcclient_1.hasProtocol(url) ? url : \"http://\" + url;\n  }\n\n  _createClass(HttpClient, [{\n    key: \"disconnect\",\n    value: function disconnect() {// nothing to be done\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = json_rpc_1;\n                _context.next = 3;\n                return http(\"POST\", this.url, request);\n\n              case 3:\n                _context.t1 = _context.sent;\n                response = _context.t0.parseJsonRpcResponse.call(_context.t0, _context.t1);\n\n                if (!json_rpc_1.isJsonRpcErrorResponse(response)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(JSON.stringify(response.error));\n\n              case 7:\n                return _context.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x4) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }]);\n\n  return HttpClient;\n}();\n\nexports.HttpClient = HttpClient;","map":null,"metadata":{},"sourceType":"script"}