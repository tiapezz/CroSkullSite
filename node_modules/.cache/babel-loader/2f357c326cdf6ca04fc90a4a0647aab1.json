{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJsonRpcResponse = exports.parseJsonRpcSuccessResponse = exports.parseJsonRpcErrorResponse = exports.parseJsonRpcRequest = exports.parseJsonRpcId = void 0;\n\nvar compatibility_1 = require(\"./compatibility\");\n/**\n * Extracts ID field from request or response object.\n *\n * Returns `null` when no valid ID was found.\n */\n\n\nfunction parseJsonRpcId(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  var id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    return null;\n  }\n\n  return id;\n}\n\nexports.parseJsonRpcId = parseJsonRpcId;\n\nfunction parseJsonRpcRequest(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(\"Got unexpected jsonrpc version: \".concat(data.jsonrpc));\n  }\n\n  var id = parseJsonRpcId(data);\n\n  if (id === null) {\n    throw new Error(\"Invalid id field\");\n  }\n\n  var method = data.method;\n\n  if (typeof method !== \"string\") {\n    throw new Error(\"Invalid method field\");\n  }\n\n  if (!compatibility_1.isJsonCompatibleArray(data.params) && !compatibility_1.isJsonCompatibleDictionary(data.params)) {\n    throw new Error(\"Invalid params field\");\n  }\n\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    method: method,\n    params: data.params\n  };\n}\n\nexports.parseJsonRpcRequest = parseJsonRpcRequest;\n\nfunction parseError(error) {\n  if (typeof error.code !== \"number\") {\n    throw new Error(\"Error property 'code' is not a number\");\n  }\n\n  if (typeof error.message !== \"string\") {\n    throw new Error(\"Error property 'message' is not a string\");\n  }\n\n  var maybeUndefinedData;\n\n  if (error.data === undefined) {\n    maybeUndefinedData = undefined;\n  } else if (compatibility_1.isJsonCompatibleValue(error.data)) {\n    maybeUndefinedData = error.data;\n  } else {\n    throw new Error(\"Error property 'data' is defined but not a JSON compatible value.\");\n  }\n\n  return Object.assign({\n    code: error.code,\n    message: error.message\n  }, maybeUndefinedData !== undefined ? {\n    data: maybeUndefinedData\n  } : {});\n}\n/** Throws if data is not a JsonRpcErrorResponse */\n\n\nfunction parseJsonRpcErrorResponse(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(\"Got unexpected jsonrpc version: \".concat(JSON.stringify(data)));\n  }\n\n  var id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\" && id !== null) {\n    throw new Error(\"Invalid id field\");\n  }\n\n  if (typeof data.error === \"undefined\" || !compatibility_1.isJsonCompatibleDictionary(data.error)) {\n    throw new Error(\"Invalid error field\");\n  }\n\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    error: parseError(data.error)\n  };\n}\n\nexports.parseJsonRpcErrorResponse = parseJsonRpcErrorResponse;\n/** Throws if data is not a JsonRpcSuccessResponse */\n\nfunction parseJsonRpcSuccessResponse(data) {\n  if (!compatibility_1.isJsonCompatibleDictionary(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(\"Got unexpected jsonrpc version: \".concat(JSON.stringify(data)));\n  }\n\n  var id = data.id;\n\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    throw new Error(\"Invalid id field\");\n  }\n\n  if (typeof data.result === \"undefined\") {\n    throw new Error(\"Invalid result field\");\n  }\n\n  var result = data.result;\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}\n\nexports.parseJsonRpcSuccessResponse = parseJsonRpcSuccessResponse;\n/**\n * Returns a JsonRpcErrorResponse if input can be parsed as a JSON-RPC error. Otherwise parses\n * input as JsonRpcSuccessResponse. Throws if input is neither a valid error nor success response.\n */\n\nfunction parseJsonRpcResponse(data) {\n  var response;\n\n  try {\n    response = parseJsonRpcErrorResponse(data);\n  } catch (_) {\n    response = parseJsonRpcSuccessResponse(data);\n  }\n\n  return response;\n}\n\nexports.parseJsonRpcResponse = parseJsonRpcResponse;","map":null,"metadata":{},"sourceType":"script"}