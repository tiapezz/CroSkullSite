{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DecProto = exports.IntProto = exports.DecCoin = exports.Coin = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nexports.protobufPackage = \"cosmos.base.v1beta1\";\nvar baseCoin = {\n  denom: \"\",\n  amount: \"\"\n};\nexports.Coin = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseCoin);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        case 2:\n          message.amount = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseCoin);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = String(object.amount);\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n\n    var message = Object.assign({}, baseCoin);\n    message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n    message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseDecCoin = {\n  denom: \"\",\n  amount: \"\"\n};\nexports.DecCoin = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    if (message.amount !== \"\") {\n      writer.uint32(18).string(message.amount);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseDecCoin);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        case 2:\n          message.amount = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseDecCoin);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = String(object.amount);\n    } else {\n      message.amount = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    message.amount !== undefined && (obj.amount = message.amount);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n\n    var message = Object.assign({}, baseDecCoin);\n    message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : \"\";\n    message.amount = (_b = object.amount) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseIntProto = {\n  int: \"\"\n};\nexports.IntProto = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.int !== \"\") {\n      writer.uint32(10).string(message.int);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseIntProto);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.int = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseIntProto);\n\n    if (object.int !== undefined && object.int !== null) {\n      message.int = String(object.int);\n    } else {\n      message.int = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.int !== undefined && (obj.int = message.int);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n\n    var message = Object.assign({}, baseIntProto);\n    message.int = (_a = object.int) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\nvar baseDecProto = {\n  dec: \"\"\n};\nexports.DecProto = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.dec !== \"\") {\n      writer.uint32(10).string(message.dec);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseDecProto);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.dec = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseDecProto);\n\n    if (object.dec !== undefined && object.dec !== null) {\n      message.dec = String(object.dec);\n    } else {\n      message.dec = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.dec !== undefined && (obj.dec = message.dec);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n\n    var message = Object.assign({}, baseDecProto);\n    message.dec = (_a = object.dec) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":null,"metadata":{},"sourceType":"script"}