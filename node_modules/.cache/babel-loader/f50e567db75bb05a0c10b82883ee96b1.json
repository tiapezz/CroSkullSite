{"ast":null,"code":"import _classCallCheck from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { ethers } from 'ethers';\nimport store from \"./redux/store\";\nimport Home from \"./components/Home/Home\";\nimport Graveyard from \"./components/Graveyard/Graveyard\";\nimport \"./App.css\";\nvar provider, contract, stakingContract, ethProvider;\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.subscribe = function () {\n      store.subscribe(function () {\n        _this.setState({\n          blockchain: store.getState().blockchain\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.subscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HashRouter, {\n        basename: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        render: function render(_ref) {\n          var location = _ref.location;\n          return /*#__PURE__*/React.createElement(TransitionGroup, {\n            className: location.pathname != '/' ? \"container-fluid \".concat(location.pathname.replace('/', '')) : 'home',\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }\n          }, /*#__PURE__*/React.createElement(Navbar, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 21\n            }\n          }), /*#__PURE__*/React.createElement(CSSTransition, {\n            key: location.pathname,\n            classNames: \"fade\",\n            timeout: 500,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Switch, {\n            location: location,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Route, {\n            path: \"/\",\n            exact: true,\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Home, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Route, {\n            path: \"/graveyard\",\n            render: function render() {\n              return /*#__PURE__*/React.createElement(Graveyard, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 29\n                }\n              });\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }\n          }))));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //export default connect(mapStateToProps)(App);\n\nvar formatEther = function formatEther(bn) {\n  return ethers.utils.formatEther(bn);\n};\n\nvar formatUnits = function formatUnits(value, unit) {\n  return ethers.utils.formatUnits(value, unit);\n};\n\nvar getAddress = function getAddress(address) {\n  return ethers.utils.getAddress(address);\n}; //preparing modal","map":{"version":3,"sources":["F:/Mattia/Visual studio/ProjectCroSkull/CroSkullSite/src/App.js"],"names":["React","Component","HashRouter","Route","Switch","TransitionGroup","CSSTransition","ethers","store","Home","Graveyard","provider","contract","stakingContract","ethProvider","App","props","subscribe","setState","blockchain","getState","location","pathname","replace","formatEther","bn","utils","formatUnits","value","unit","getAddress","address"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\n\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport { ethers } from 'ethers';\r\nimport store from \"./redux/store\";\r\n\r\nimport Home from \"./components/Home/Home\";\r\n\r\nimport Graveyard from \"./components/Graveyard/Graveyard\";\r\n\r\nimport \"./App.css\";\r\n\r\nlet provider, contract, stakingContract, ethProvider;\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.subscribe()\r\n  }\r\n\r\n\r\n  subscribe = () => {\r\n    store.subscribe(() => {\r\n      this.setState({\r\n        blockchain: store.getState().blockchain\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        {(\r\n          <>\r\n            <HashRouter\r\n              basename=\"/\">\r\n\r\n              <Route\r\n                render={({ location }) => (\r\n                  <TransitionGroup className={location.pathname != '/' ? `container-fluid ${location.pathname.replace('/', '')}` : 'home'}>\r\n                    <Navbar />\r\n                    <CSSTransition\r\n                      key={location.pathname}\r\n                      classNames=\"fade\"\r\n                      timeout={500}\r\n                    >\r\n                      <Switch\r\n                        location={location}\r\n                      >\r\n                        <Route\r\n                          path=\"/\"\r\n                          exact\r\n                          render={() => (\r\n                            <Home></Home>\r\n                          )}\r\n                        />\r\n                        <Route\r\n                          path=\"/graveyard\"\r\n                          render={() => (\r\n                            <Graveyard />\r\n                          )}\r\n                        />\r\n                      </Switch>\r\n                    </CSSTransition>\r\n                  </TransitionGroup>\r\n                )} />\r\n            </HashRouter>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//export default connect(mapStateToProps)(App);\r\n\r\n\r\nconst formatEther = bn => ethers.utils.formatEther(bn)\r\nconst formatUnits = (value, unit) => ethers.utils.formatUnits(value, unit)\r\nconst getAddress = address => ethers.utils.getAddress(address)\r\n//preparing modal\r\n"]},"metadata":{},"sourceType":"module"}