{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1 = void 0;\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\n\nvar secp256k1signature_1 = require(\"./secp256k1signature\");\n\nvar secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nvar secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\n\nvar Secp256k1 = /*#__PURE__*/function () {\n  function Secp256k1() {\n    _classCallCheck(this, Secp256k1);\n  }\n\n  _createClass(Secp256k1, null, [{\n    key: \"makeKeypair\",\n    value: function () {\n      var _makeKeypair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(privkey) {\n        var keypair, privkeyAsBigInteger, out;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(privkey.length !== 32)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 2:\n                keypair = secp256k1.keyFromPrivate(privkey);\n\n                if (!(keypair.validate().result !== true)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 5:\n                // range test that is not part of the elliptic implementation\n                privkeyAsBigInteger = new bn_js_1.default(privkey);\n\n                if (!privkeyAsBigInteger.gte(secp256k1N)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"input data is not a valid secp256k1 private key\");\n\n              case 8:\n                out = {\n                  privkey: encoding_1.fromHex(keypair.getPrivate(\"hex\")),\n                  // encodes uncompressed as\n                  // - 1-byte prefix \"04\"\n                  // - 32-byte x coordinate\n                  // - 32-byte y coordinate\n                  pubkey: Uint8Array.from(keypair.getPublic(\"array\"))\n                };\n                return _context.abrupt(\"return\", out);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function makeKeypair(_x) {\n        return _makeKeypair.apply(this, arguments);\n      }\n\n      return makeKeypair;\n    }() // Creates a signature that is\n    // - deterministic (RFC 6979)\n    // - lowS signature\n    // - DER encoded\n\n  }, {\n    key: \"createSignature\",\n    value: function () {\n      var _createSignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(messageHash, privkey) {\n        var keypair, _keypair$sign, r, s, recoveryParam;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Message hash must not be empty\");\n\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n\n              case 4:\n                keypair = secp256k1.keyFromPrivate(privkey); // the `canonical` option ensures creation of lowS signature representations\n\n                _keypair$sign = keypair.sign(messageHash, {\n                  canonical: true\n                }), r = _keypair$sign.r, s = _keypair$sign.s, recoveryParam = _keypair$sign.recoveryParam;\n\n                if (!(typeof recoveryParam !== \"number\")) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Recovery param missing\");\n\n              case 8:\n                return _context2.abrupt(\"return\", new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createSignature(_x2, _x3) {\n        return _createSignature.apply(this, arguments);\n      }\n\n      return createSignature;\n    }()\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(signature, messageHash, pubkey) {\n        var keypair;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(messageHash.length === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Message hash must not be empty\");\n\n              case 2:\n                if (!(messageHash.length > 32)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Message hash length must not exceed 32 bytes\");\n\n              case 4:\n                keypair = secp256k1.keyFromPublic(pubkey); // From https://github.com/indutny/elliptic:\n                //\n                //     Sign the message's hash (input must be an array, or a hex-string)\n                //\n                //     Signature MUST be either:\n                //     1) DER-encoded signature as hex-string; or\n                //     2) DER-encoded signature as buffer; or\n                //     3) object with two hex-string properties (r and s); or\n                //     4) object with two buffer properties (r and s)\n                //\n                // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n                // common to both types. Uint8Array is not an array of ints but the interface is\n                // similar\n\n                _context3.prev = 5;\n                return _context3.abrupt(\"return\", keypair.verify(messageHash, signature.toDer()));\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](5);\n                return _context3.abrupt(\"return\", false);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[5, 9]]);\n      }));\n\n      function verifySignature(_x4, _x5, _x6) {\n        return _verifySignature.apply(this, arguments);\n      }\n\n      return verifySignature;\n    }()\n  }, {\n    key: \"recoverPubkey\",\n    value: function recoverPubkey(signature, messageHash) {\n      var signatureForElliptic = {\n        r: encoding_1.toHex(signature.r()),\n        s: encoding_1.toHex(signature.s())\n      };\n      var point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n      var keypair = secp256k1.keyFromPublic(point);\n      return encoding_1.fromHex(keypair.getPublic(false, \"hex\"));\n    }\n  }, {\n    key: \"compressPubkey\",\n    value: function compressPubkey(pubkey) {\n      switch (pubkey.length) {\n        case 33:\n          return pubkey;\n\n        case 65:\n          return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, \"array\"));\n\n        default:\n          throw new Error(\"Invalid pubkey length\");\n      }\n    }\n  }, {\n    key: \"trimRecoveryByte\",\n    value: function trimRecoveryByte(signature) {\n      switch (signature.length) {\n        case 64:\n          return signature;\n\n        case 65:\n          return signature.slice(0, 64);\n\n        default:\n          throw new Error(\"Invalid signature length\");\n      }\n    }\n  }]);\n\n  return Secp256k1;\n}();\n\nexports.Secp256k1 = Secp256k1;","map":null,"metadata":{},"sourceType":"script"}