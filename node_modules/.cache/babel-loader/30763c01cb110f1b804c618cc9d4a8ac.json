{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {import('..').ImplementsMethod<'provide', import('ipfs-core/src/components/dht')>}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cids) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              cids = Array.isArray(cids) ? cids : [cids];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('dht/provide', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cids.map(function (cid) {\n                    return new CID(cid).toString();\n                  })\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 4:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 15;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 15:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 26;\n                break;\n              }\n\n              message = _value;\n              message = toCamel(message);\n              message.id = new CID(message.id);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (_ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (a) {\n                      return multiaddr(a);\n                    })\n                  };\n                });\n              } else {\n                message.responses = [];\n              }\n\n              _context.next = 23;\n              return message;\n\n            case 23:\n              _iteratorNormalCompletion = true;\n              _context.next = 9;\n              break;\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 37:\n              _context.prev = 37;\n\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context.finish(37);\n\n            case 41:\n              return _context.finish(32);\n\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 28, 32, 42], [33,, 37, 41]]);\n    }));\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":null,"metadata":{},"sourceType":"script"}