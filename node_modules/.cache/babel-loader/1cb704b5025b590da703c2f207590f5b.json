{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = symbolObservablePonyfill;\n\nfunction symbolObservablePonyfill(root) {\n  var result;\n  var _Symbol = root.Symbol;\n\n  if (typeof _Symbol === 'function') {\n    if (_Symbol.observable) {\n      result = _Symbol.observable;\n    } else {\n      // This just needs to be something that won't trample other user's Symbol.for use\n      // It also will guide people to the source of their issues, if this is problematic.\n      // META: It's a resource locator!\n      result = _Symbol['for']('https://github.com/benlesh/symbol-observable');\n\n      try {\n        _Symbol.observable = result;\n      } catch (err) {// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n        // if it is frozen assigning to it will throw. In this case, we don't care, because\n        // they will need to use the returned value from the ponyfill.\n      }\n    }\n  } else {\n    result = '@@observable';\n  }\n\n  return result;\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}