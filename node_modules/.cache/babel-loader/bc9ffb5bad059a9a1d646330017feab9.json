{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isJsonCompatibleDictionary = exports.isJsonCompatibleArray = exports.isJsonCompatibleValue = void 0;\n\nfunction isJsonCompatibleValue(value) {\n  if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null || // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  isJsonCompatibleArray(value) || // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  isJsonCompatibleDictionary(value)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexports.isJsonCompatibleValue = isJsonCompatibleValue;\n\nfunction isJsonCompatibleArray(value) {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(value),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n\n      if (!isJsonCompatibleValue(item)) {\n        return false;\n      }\n    } // all items okay\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n\nexports.isJsonCompatibleArray = isJsonCompatibleArray;\n\nfunction isJsonCompatibleDictionary(data) {\n  if (typeof data !== \"object\" || data === null) {\n    // data must be a non-null object\n    return false;\n  } // Exclude special kind of objects like Array, Date or Uint8Array\n  // Object.prototype.toString() returns a specified value:\n  // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n  if (Object.prototype.toString.call(data) !== \"[object Object]\") {\n    return false;\n  } // TODO: replace with Object.values when available (ES2017+)\n\n\n  var values = Object.getOwnPropertyNames(data).map(function (key) {\n    return data[key];\n  });\n  return values.every(isJsonCompatibleValue);\n}\n\nexports.isJsonCompatibleDictionary = isJsonCompatibleDictionary;","map":null,"metadata":{},"sourceType":"script"}