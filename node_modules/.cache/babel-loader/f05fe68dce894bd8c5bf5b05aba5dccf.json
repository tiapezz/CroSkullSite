{"ast":null,"code":"import _slicedToArray from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\src\\\\components\\\\Analytics\\\\Analytics.jsx\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport './analytics.css';\nimport CROIcon from \"../Navbar/crypto-com.svg\";\nimport { useDispatch } from \"react-redux\";\nimport Skull from '../Navbar/skull.png';\nimport MetricContainer from '../MetricContainer/MetricContainer';\nimport { loadEbisusData } from \"../../redux/marketplace/marketplaceActions\";\nimport { loadDexData } from \"../../redux/dexscreener/dexscreenerActions\";\nimport Grave from \"../Navbar/grave.png\";\nimport GraveBurn from \"../Navbar/grave-burn.png\";\nimport store from \"../../redux/store\";\n\nvar Analytics = function Analytics() {\n  var dispatch = useDispatch();\n\n  var _useState = useState('skulls'),\n      _useState2 = _slicedToArray(_useState, 2),\n      detailsView = _useState2[0],\n      setDetailsView = _useState2[1];\n\n  var _store$getState = store.getState(),\n      blockchain = _store$getState.blockchain,\n      marketplace = _store$getState.marketplace,\n      data = _store$getState.data,\n      dexscreener = _store$getState.dexscreener;\n\n  var formatEther = blockchain.formatEther;\n  useEffect(function () {\n    if (marketplace.redSolds) return;\n    dispatch(loadEbisusData());\n    dispatch(loadDexData());\n  }, []);\n  var totalSkullsStaked = data.totalSkullsStaked,\n      burnedGraves = data.burnedGraves;\n  var saleSkulls = marketplace.saleSkulls,\n      saleBlue = marketplace.saleBlue,\n      saleRed = marketplace.saleRed,\n      skullAvgPrice = marketplace.skullAvgPrice,\n      skullFloorPrice = marketplace.skullFloorPrice,\n      skullForSales = marketplace.skullForSales,\n      skullSolds = marketplace.skullSolds,\n      skullTotalVolume = marketplace.skullTotalVolume,\n      blueAvgPrice = marketplace.blueAvgPrice,\n      blueFloorPrice = marketplace.blueFloorPrice,\n      blueForSales = marketplace.blueForSales,\n      blueSolds = marketplace.blueSolds,\n      blueTotalVolume = marketplace.blueTotalVolume,\n      redAvgPrice = marketplace.redAvgPrice,\n      redFloorPrice = marketplace.redFloorPrice,\n      redForSales = marketplace.redForSales,\n      redSolds = marketplace.redSolds,\n      redTotalVolume = marketplace.redTotalVolume;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-flex sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container wd-66\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box sk-analytics\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-head\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, \"Analytics\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"SLiq\",\n    value: \"\".concat(totalSkullsStaked),\n    icon: Skull,\n    vertical: true,\n    tooltip: \"Stake Liquidity: amout of CroSkulls NFT staked in Adventures.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Stake Percent\",\n    value: \"\".concat(totalSkullsStaked ? parseFloat(100 / 6666 * totalSkullsStaked).toFixed(1) : 0, \"%\"),\n    icon: Skull,\n    vertical: true,\n    tooltip: \"Stake Percent: Percent of Staked skull based on the Total Supply (\".concat(totalSkullsStaked, \"/6666).\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"FDV\",\n    value: skullFloorPrice ? (totalSkullsStaked * skullFloorPrice).toLocaleString('en-US') : 0,\n    vertical: true,\n    icon: CROIcon,\n    tooltip: \"Fully Diluted Value: Total diluted market cap of the Adventure pool equal to ( SLiq * Current Floor Price).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"$FDV\",\n    value: skullFloorPrice && dexscreener ? \"$ \".concat((totalSkullsStaked * skullFloorPrice * dexscreener.croInUsd).toLocaleString('en-US')) : 0,\n    vertical: true,\n    tooltip: \"Fully Diluted Value in Dollars: Total diluted market cap of the Adventure pool equal to ( SLiq * Current Floor Price * CRO/USD).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"ADV\",\n    value: totalSkullsStaked ? parseInt(totalSkullsStaked * skullAvgPrice).toLocaleString('en-US') : 0,\n    vertical: true,\n    icon: CROIcon,\n    tooltip: \"Average Diluted Value: Diluted market cap of the Adventure pool equal to ( SLiq * Current Avg Sale Price).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Volume\",\n    value: redTotalVolume ? parseInt(Number(skullTotalVolume) + Number(blueTotalVolume) + Number(redTotalVolume)).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    vertical: true,\n    tooltip: \"Volume generated by all Collections related to CroSkull. (Skulls + Blue and Red Potions).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Volume USD\",\n    value: dexscreener && skullTotalVolume ? \"$ \".concat(parseInt((Number(skullTotalVolume) + Number(blueTotalVolume) + Number(redTotalVolume)) * dexscreener.croInUsd).toLocaleString('en-US')) : 0,\n    vertical: true,\n    tooltip: \"Volume generated by all Collections related to CroSkull in dollars. (Skulls + Blue and Red Potions).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Floor Price\",\n    value: redFloorPrice ? parseInt(Number(skullFloorPrice) + Number(blueFloorPrice) + Number(redFloorPrice)).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    vertical: true,\n    tooltip: \"Actual Floor Price if you want to buy a Skull + Blue + Red, will reflect the base evoSkull Price.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Sales\",\n    value: redSolds ? Number(skullSolds) + Number(blueSolds) + Number(redSolds) : 0,\n    icon: Skull,\n    vertical: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total for Sales\",\n    value: redForSales ? Number(skullForSales) + Number(blueForSales) + Number(redForSales) : 0,\n    icon: Skull,\n    vertical: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"GRVE/CRO\",\n    value: \"\".concat(dexscreener && dexscreener.graveInCro),\n    icon: CROIcon,\n    vertical: true,\n    tooltip: \"Actual Grave Value in CRO.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"GRVE/USD\",\n    value: \"$ \".concat(dexscreener && dexscreener.graveInUsd),\n    vertical: true,\n    tooltip: \"Actual Grave Value in USD.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Liquidity CRO\",\n    value: \"\".concat(dexscreener && dexscreener.liquidityCro.toLocaleString('en-US')),\n    vertical: true,\n    icon: CROIcon,\n    tooltip: \"Total amount of CRO used as Collateral\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Liquidity USD\",\n    value: \"$ \".concat(dexscreener && dexscreener.liquidityUsd.toLocaleString('en-US')),\n    vertical: true,\n    tooltip: \"Liquidity Pool Total Value in Dollars (do not include MMF pool).\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Grave\",\n    value: \"\".concat(dexscreener && data.graveTotalSupply ? formatEther(data.graveTotalSupply, 2).toLocaleString('en-US') : 0),\n    vertical: true,\n    icon: Grave,\n    tooltip: \"Actual Grave total supply.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Burned GRVE\",\n    value: \"\".concat(burnedGraves ? formatEther(burnedGraves, 2).toLocaleString('en-US') : 0),\n    icon: GraveBurn,\n    vertical: true,\n    tooltip: \"Total amount of burned grave.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Burned %\",\n    value: \"\".concat(burnedGraves ? parseFloat(100 / 45990000 * formatEther(burnedGraves, 2)).toFixed(2) : 0, \" %\"),\n    vertical: true,\n    icon: GraveBurn,\n    tooltip: \"Actual Burned Grave Percent.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Burned in USD\",\n    value: \"$ \".concat(burnedGraves && dexscreener ? (formatEther(burnedGraves) * dexscreener.graveInUsd).toFixed(0).toLocaleString('en-US') : 0),\n    vertical: true,\n    tooltip: \"Actual Burned Grave Value in USD.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 25\n    }\n  }, \"Data by \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 39\n    }\n  }, \"Ebisu's Bay\"), \" & \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 60\n    }\n  }, \"DexScreener\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container wd-33\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tab-head\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 29\n    }\n  }, \"Collections Stats\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"switcher-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \" switcher-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"switcher-button view-button \".concat(detailsView === 'skulls' ? 'active' : ''),\n    onClick: function onClick() {\n      return setDetailsView('skulls');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 33\n    }\n  }, \"CroSkull\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"switcher-button view-button \".concat(detailsView === 'blue' ? 'active' : ''),\n    onClick: function onClick() {\n      return setDetailsView('blue');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 33\n    }\n  }, \"Blue Potions\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"switcher-button view-button \".concat(detailsView === 'red' ? 'active' : ''),\n    onClick: function onClick() {\n      return setDetailsView('red');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 33\n    }\n  }, \"Red Potions\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-column first \".concat(detailsView === 'skulls' ? 'show' : 'hide'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Volume\",\n    value: skullTotalVolume ? parseInt(skullTotalVolume).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Floor Price\",\n    value: skullFloorPrice ? parseInt(skullFloorPrice).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Avg. Sale Price\",\n    value: skullAvgPrice ? parseFloat(skullAvgPrice).toFixed(2).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Skull Sales\",\n    value: skullSolds ? skullSolds : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Skull for Sales\",\n    value: skullForSales ? skullForSales : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-column \".concat(detailsView === 'blue' ? 'show' : 'hide'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Volume\",\n    value: blueTotalVolume ? parseInt(blueTotalVolume).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Floor Price\",\n    value: blueFloorPrice ? parseInt(blueFloorPrice).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Avg. Sale Price\",\n    value: blueAvgPrice ? parseFloat(blueAvgPrice).toFixed(2).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Blue Sales\",\n    value: blueSolds ? blueSolds : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Blue for Sales\",\n    value: blueForSales ? blueForSales : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-column \".concat(detailsView === 'red' ? 'show' : 'hide'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Total Volume\",\n    value: redTotalVolume ? parseInt(redTotalVolume).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Floor Price\",\n    value: redFloorPrice ? parseInt(redFloorPrice).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Avg. Sale Price\",\n    value: redAvgPrice ? parseFloat(redAvgPrice).toFixed(2).toLocaleString('en-US') : 0,\n    icon: CROIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Red Sales\",\n    value: redSolds ? redSolds : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(MetricContainer, {\n    label: \"Red for Sales\",\n    value: redForSales ? redForSales : 0,\n    icon: Skull,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 33\n    }\n  })))))));\n};\n\nexport default Analytics;","map":{"version":3,"sources":["F:/Mattia/Visual studio/ProjectCroSkull/croskull-nft-marketplace/src/components/Analytics/Analytics.jsx"],"names":["React","useEffect","useState","ethers","useDispatch","Skull","MetricContainer","loadEbisusData","loadDexData","Grave","GraveBurn","store","Analytics","dispatch","detailsView","setDetailsView","getState","blockchain","marketplace","data","dexscreener","formatEther","redSolds","totalSkullsStaked","burnedGraves","saleSkulls","saleBlue","saleRed","skullAvgPrice","skullFloorPrice","skullForSales","skullSolds","skullTotalVolume","blueAvgPrice","blueFloorPrice","blueForSales","blueSolds","blueTotalVolume","redAvgPrice","redFloorPrice","redForSales","redTotalVolume","parseFloat","toFixed","toLocaleString","CROIcon","croInUsd","parseInt","Number","graveInCro","graveInUsd","liquidityCro","liquidityUsd","graveTotalSupply"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from 'ethers';\r\nimport './analytics.css'\r\nimport CROIcon from '../Navbar/crypto-com.svg';\r\nimport { useDispatch } from \"react-redux\";\r\nimport Skull from '../Navbar/skull.png';\r\nimport MetricContainer from '../MetricContainer/MetricContainer';\r\nimport { loadEbisusData } from \"../../redux/marketplace/marketplaceActions\";\r\nimport { loadDexData } from \"../../redux/dexscreener/dexscreenerActions\";\r\nimport Grave from \"../Navbar/grave.png\";\r\nimport GraveBurn from \"../Navbar/grave-burn.png\";\r\nimport store from \"../../redux/store\";\r\n\r\nconst Analytics = () => {\r\n    let dispatch = useDispatch()\r\n    const [detailsView, setDetailsView] = useState('skulls')\r\n    let { blockchain, marketplace, data, dexscreener } = store.getState()\r\n    let { formatEther } = blockchain\r\n\r\n    useEffect( () => {\r\n        if( marketplace.redSolds ) return \r\n        dispatch(loadEbisusData())\r\n        dispatch(loadDexData())\r\n    }, [])\r\n\r\n    let {\r\n        totalSkullsStaked,\r\n        burnedGraves\r\n    } = data\r\n\r\n\r\n    let {\r\n        saleSkulls,\r\n        saleBlue,\r\n        saleRed,\r\n        //skull stats\r\n        skullAvgPrice,\r\n        skullFloorPrice,\r\n        skullForSales,\r\n        skullSolds,\r\n        skullTotalVolume,\r\n        //bluepotion stats\r\n        blueAvgPrice,\r\n        blueFloorPrice,\r\n        blueForSales,\r\n        blueSolds,\r\n        blueTotalVolume,\r\n        //redpotion stats\r\n        redAvgPrice,\r\n        redFloorPrice,\r\n        redForSales,\r\n        redSolds,\r\n        redTotalVolume,\r\n    } = marketplace\r\n\r\n    return (\r\n        <>\r\n            <div className=\"sk-flex sk-row\">\r\n                <div className=\"sk-container wd-66\">\r\n                    <div className=\"sk-box sk-analytics\">\r\n                        <div className=\"tab-head\">\r\n                            <h2>Analytics</h2>\r\n                        </div>\r\n                        <div className=\"sk-box-content sk-row\">\r\n                            <MetricContainer \r\n                                label=\"SLiq\"\r\n                                value={`${ totalSkullsStaked }`}\r\n                                icon={Skull}\r\n                                vertical={true}\r\n                                tooltip=\"Stake Liquidity: amout of CroSkulls NFT staked in Adventures.\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Stake Percent\"\r\n                                value={`${ totalSkullsStaked ? parseFloat( ( 100 / 6666 * totalSkullsStaked ) ).toFixed(1) : 0 }%`}\r\n                                icon={Skull}\r\n                                vertical={true}\r\n                                tooltip={`Stake Percent: Percent of Staked skull based on the Total Supply (${totalSkullsStaked}/6666).`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"FDV\"\r\n                                value={ skullFloorPrice ? ( totalSkullsStaked * skullFloorPrice ).toLocaleString('en-US') : 0}\r\n                                vertical={true}\r\n                                icon={CROIcon}\r\n                                tooltip=\"Fully Diluted Value: Total diluted market cap of the Adventure pool equal to ( SLiq * Current Floor Price).\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"$FDV\"\r\n                                value={ skullFloorPrice && dexscreener ? `$ ${( totalSkullsStaked * skullFloorPrice * dexscreener.croInUsd ).toLocaleString('en-US')}` : 0}\r\n                                vertical={true}\r\n                                tooltip=\"Fully Diluted Value in Dollars: Total diluted market cap of the Adventure pool equal to ( SLiq * Current Floor Price * CRO/USD).\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"ADV\"\r\n                                value={totalSkullsStaked  ? parseInt(totalSkullsStaked * skullAvgPrice).toLocaleString('en-US') : 0}\r\n                                vertical={true}\r\n                                icon={CROIcon}\r\n                                tooltip=\"Average Diluted Value: Diluted market cap of the Adventure pool equal to ( SLiq * Current Avg Sale Price).\"\r\n                            />\r\n                        </div>\r\n                        <div className={`sk-box-content sk-row`}>\r\n                            <MetricContainer \r\n                                label=\"Total Volume\"\r\n                                value={ redTotalVolume ? parseInt( Number(skullTotalVolume) + Number(blueTotalVolume) + Number(redTotalVolume) ).toLocaleString('en-US') : 0}\r\n                                icon={CROIcon}\r\n                                vertical={true}\r\n                                tooltip={`Volume generated by all Collections related to CroSkull. (Skulls + Blue and Red Potions).`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Total Volume USD\"\r\n                                value={ dexscreener && skullTotalVolume ? `$ ${parseInt( ( Number(skullTotalVolume) + Number(blueTotalVolume) + Number(redTotalVolume) ) * dexscreener.croInUsd ).toLocaleString('en-US')}` : 0}\r\n                                vertical={true}\r\n                                tooltip={`Volume generated by all Collections related to CroSkull in dollars. (Skulls + Blue and Red Potions).`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Floor Price\"\r\n                                value={ redFloorPrice ? parseInt( Number(skullFloorPrice) + Number(blueFloorPrice) + Number(redFloorPrice)).toLocaleString('en-US') : 0}\r\n                                icon={CROIcon}\r\n                                vertical={true}\r\n                                tooltip={`Actual Floor Price if you want to buy a Skull + Blue + Red, will reflect the base evoSkull Price.`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Total Sales\"\r\n                                value={ redSolds ? Number(skullSolds) + Number(blueSolds) + Number(redSolds) : 0 }\r\n                                icon={Skull}\r\n                                vertical={true}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Total for Sales\"\r\n                                value={ redForSales ? Number(skullForSales) +  Number(blueForSales) +  Number(redForSales) : 0}\r\n                                icon={Skull}\r\n                                vertical={true}\r\n                            />\r\n                        </div>\r\n                        <div className=\"sk-box-content sk-row\">\r\n                            <MetricContainer \r\n                                label=\"GRVE/CRO\"\r\n                                value={`${ dexscreener && dexscreener.graveInCro }`}\r\n                                icon={CROIcon}\r\n                                vertical={true}\r\n                                tooltip=\"Actual Grave Value in CRO.\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"GRVE/USD\"\r\n                                value={`$ ${ dexscreener && dexscreener.graveInUsd }` }\r\n                                vertical={true}\r\n                                tooltip={`Actual Grave Value in USD.`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Liquidity CRO\"\r\n                                value={ `${ dexscreener && ( dexscreener.liquidityCro ).toLocaleString('en-US')}` }\r\n                                vertical={true}\r\n                                icon={CROIcon}\r\n                                tooltip=\"Total amount of CRO used as Collateral\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Liquidity USD\"\r\n                                value={ `$ ${dexscreener && ( dexscreener.liquidityUsd ).toLocaleString('en-US')}` }\r\n                                vertical={true}\r\n                                tooltip=\"Liquidity Pool Total Value in Dollars (do not include MMF pool).\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"sk-box-content sk-row\">\r\n                            <MetricContainer \r\n                                label=\"Total Grave\"\r\n                                value={ `${dexscreener && data.graveTotalSupply ? formatEther(data.graveTotalSupply, 2).toLocaleString('en-US') : 0 }` }\r\n                                vertical={true}\r\n                                icon={Grave}\r\n                                tooltip=\"Actual Grave total supply.\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Burned GRVE\"\r\n                                value={`${ burnedGraves ? formatEther(burnedGraves, 2).toLocaleString('en-US') : 0 }`}\r\n                                icon={GraveBurn}\r\n                                vertical={true}\r\n                                tooltip=\"Total amount of burned grave.\"\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Burned %\"\r\n                                value={`${ burnedGraves ? parseFloat(100 / 45990000 * formatEther(burnedGraves, 2)).toFixed(2) : 0 } %` }\r\n                                vertical={true}\r\n                                icon={GraveBurn}\r\n                                tooltip={`Actual Burned Grave Percent.`}\r\n                            />\r\n                            <MetricContainer \r\n                                label=\"Burned in USD\"\r\n                                value={ `$ ${ burnedGraves && dexscreener ? ( formatEther(burnedGraves) * dexscreener.graveInUsd ).toFixed(0).toLocaleString('en-US') : 0 }` }\r\n                                vertical={true}\r\n                                tooltip=\"Actual Burned Grave Value in USD.\"\r\n                            />\r\n                        </div>\r\n                        <span>Data by <b>Ebisu's Bay</b> & <b>DexScreener</b></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sk-container wd-33\">\r\n                    <div className=\"sk-box\">\r\n                        <div className=\"tab-head\">\r\n                            <h2>Collections Stats</h2>\r\n                        </div>\r\n                        <div class=\"switcher-container\">\r\n                            <div className=\" switcher-wrapper\">\r\n                                <button\r\n                                    className={`switcher-button view-button ${ detailsView === 'skulls' ? 'active' : ''}`}\r\n                                    onClick={\r\n                                        () => setDetailsView('skulls')\r\n                                    }\r\n                                >\r\n                                    CroSkull\r\n                                </button>\r\n                                <button\r\n                                    className={`switcher-button view-button ${ detailsView === 'blue' ? 'active' : ''}`}\r\n                                    onClick={\r\n                                        () => setDetailsView('blue')\r\n                                    }\r\n                                >\r\n                                    Blue Potions\r\n                                </button>\r\n                                <button\r\n                                    className={`switcher-button view-button ${ detailsView === 'red' ? 'active' : ''}`}\r\n                                    onClick={\r\n                                        () => setDetailsView('red')\r\n                                    }\r\n                                >\r\n                                    Red Potions\r\n                                </button>\r\n                            </div>\r\n                            <div className={`sk-box-content sk-column first ${ detailsView === 'skulls' ? 'show' : 'hide'}`}>\r\n                                <MetricContainer \r\n                                    label=\"Total Volume\"\r\n                                    value={ skullTotalVolume ? parseInt(skullTotalVolume).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer\r\n                                    label=\"Floor Price\"\r\n                                    value={ skullFloorPrice ? parseInt(skullFloorPrice).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer\r\n                                    label=\"Avg. Sale Price\"\r\n                                    value={ skullAvgPrice ? parseFloat(skullAvgPrice).toFixed(2).toLocaleString('en-US') : 0 }\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Skull Sales\"\r\n                                    value={ skullSolds ? skullSolds : 0 }\r\n                                    icon={Skull}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Skull for Sales\"\r\n                                    value={skullForSales ? skullForSales : 0}\r\n                                    icon={Skull}\r\n                                />\r\n                            </div>\r\n                            <div className={`sk-box-content sk-column ${ detailsView === 'blue' ? 'show' : 'hide'}`}>\r\n                                <MetricContainer \r\n                                    label=\"Total Volume\"\r\n                                    value={ blueTotalVolume ? parseInt(blueTotalVolume).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Floor Price\"\r\n                                    value={blueFloorPrice ? parseInt(blueFloorPrice).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Avg. Sale Price\"\r\n                                    value={ blueAvgPrice ? parseFloat(blueAvgPrice).toFixed(2).toLocaleString('en-US') : 0 }\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Blue Sales\"\r\n                                    value={ blueSolds ? blueSolds : 0 }\r\n                                    icon={Skull}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Blue for Sales\"\r\n                                    value={ blueForSales ? blueForSales : 0}\r\n                                    icon={Skull}\r\n                                />\r\n                            </div>\r\n                            <div className={`sk-box-content sk-column ${ detailsView === 'red' ? 'show' : 'hide'}`}>\r\n                                <MetricContainer \r\n                                    label=\"Total Volume\"\r\n                                    value={ redTotalVolume ? parseInt(redTotalVolume).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Floor Price\"\r\n                                    value={ redFloorPrice ? parseInt(redFloorPrice).toLocaleString('en-US') : 0}\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Avg. Sale Price\"\r\n                                    value={ redAvgPrice ? parseFloat(redAvgPrice).toFixed(2).toLocaleString('en-US') : 0 }\r\n                                    icon={CROIcon}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Red Sales\"\r\n                                    value={ redSolds ? redSolds : 0 }\r\n                                    icon={Skull}\r\n                                />\r\n                                <MetricContainer \r\n                                    label=\"Red for Sales\"\r\n                                    value={ redForSales ? redForSales : 0}\r\n                                    icon={Skull}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Analytics;"]},"metadata":{},"sourceType":"module"}