{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\CroSkullSite\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\nimport evoSkull from './evo.json';\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nexport var loadAllSkull = function loadAllSkull(page) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _store$getState, gallery, rawResult, rawList, skullsList, i;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _store$getState = store.getState(), gallery = _store$getState.gallery;\n              _context.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context.sent;\n              _context.next = 6;\n              return rawResult.json();\n\n            case 6:\n              rawList = _context.sent;\n              skullsList = gallery.skullsList;\n              if (!skullsList) skullsList = [];\n\n              for (i = page * 100; i < page * 100 + 100; i++) {\n                skullsList.push(rawList[i]);\n              }\n\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loadEvoSkull = function loadEvoSkull() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState2, gallery, evoList;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('evo');\n              _store$getState2 = store.getState(), gallery = _store$getState2.gallery;\n              evoList = evoSkull;\n              console.log('evoList');\n              dispatch(updateState({\n                key: \"evoList\",\n                value: evoList\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var loadFilterSkull = function loadFilterSkull(filter, page) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _store$getState3, gallery, skullsList, rawResult, rawList, i, start, end;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _store$getState3 = store.getState(), gallery = _store$getState3.gallery;\n              skullsList = gallery.skullsList;\n              _context3.next = 4;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 4:\n              rawResult = _context3.sent;\n              _context3.next = 7;\n              return rawResult.json();\n\n            case 7:\n              rawList = _context3.sent;\n              i = 0;\n              start = page * 100;\n              end = page * 100 + 100;\n              if (!skullsList) skullsList = [];\n              rawList.map(function (skull) {\n                if (checkFilter(skull, filter)) {\n                  if (i >= start && i < end) {\n                    skullsList.push(skull);\n                  }\n\n                  i++;\n                }\n              });\n              if (skullsList.length == 0) skullsList = null;\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getFilterSkullLenght = function getFilterSkullLenght(filter) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var _store$getState4, gallery, rawResult, rawList, i;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _store$getState4 = store.getState(), gallery = _store$getState4.gallery;\n              _context4.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context4.sent;\n              _context4.next = 6;\n              return rawResult.json();\n\n            case 6:\n              rawList = _context4.sent;\n              i = 0;\n              rawList.map(function (skull) {\n                if (checkFilter(skull, filter)) {\n                  i++;\n                }\n              });\n              dispatch(updateState({\n                key: \"skullsFilterLenght\",\n                value: i\n              }));\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\n\nfunction checkFilter(cr, filter) {\n  var flag = true;\n  filter.map(function (f, i) {\n    if (f.value.length > 0 && flag) {\n      if (f.name == 'Trait') {\n        if (f.value.includes(5)) {\n          console.log(5);\n          cr.attributes.map(function (at) {\n            if (at.trait_type == 'Hat' && flag) {\n              if (at.value.includes('none')) flag = true;else {\n                flag = false;\n              }\n            }\n          });\n        }\n\n        if (f.value.includes(6)) {\n          console.log(6);\n          cr.attributes.map(function (at) {\n            if (at.trait_type == 'Hat' && flag) {\n              if (at.value.includes('none')) flag = false;else {\n                flag = true;\n              }\n            }\n          });\n        }\n      } else {\n        cr.attributes.map(function (at) {\n          if (at.trait_type == f.name && flag) {\n            if (f.value.includes(at.value)) flag = true;else {\n              flag = false;\n            }\n          }\n        });\n      }\n    }\n  });\n  return flag;\n}\n\nexport var resetSkullList = function resetSkullList() {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var _store$getState5, gallery, skullsList;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _store$getState5 = store.getState(), gallery = _store$getState5.gallery;\n              skullsList = null;\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var resetAttributeList = function resetAttributeList() {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      var _store$getState6, gallery, attributeList;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _store$getState6 = store.getState(), gallery = _store$getState6.gallery;\n              attributeList = null;\n              dispatch(updateState({\n                key: \"attributeList\",\n                value: attributeList\n              }));\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport var resetSkullsFilterLenght = function resetSkullsFilterLenght() {\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch) {\n      var _store$getState7, gallery, attributeList;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _store$getState7 = store.getState(), gallery = _store$getState7.gallery;\n              attributeList = null;\n              dispatch(updateState({\n                key: \"skullsFilterLenght\",\n                value: 6666\n              }));\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n};\nexport var loadSkull = function loadSkull(i) {\n  return /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch) {\n      var _store$getState8, gallery, rawResult, skullsList, skull;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _store$getState8 = store.getState(), gallery = _store$getState8.gallery;\n              _context8.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context8.sent;\n              _context8.next = 6;\n              return rawResult.json();\n\n            case 6:\n              skullsList = _context8.sent;\n              skull = [];\n\n              if (i) {\n                skullsList.map(function (s) {\n                  if (s.edition == i) skull.push(s);\n                });\n                dispatch(updateState({\n                  key: \"skullsList\",\n                  value: skull\n                }));\n              }\n\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n};\nexport var getEbisusLink = function getEbisusLink(skull) {\n  return /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(dispatch) {\n      var _store$getState9, gallery, rawResult, skullsList, link, linkGenerate;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _store$getState9 = store.getState(), gallery = _store$getState9.gallery;\n              _context9.next = 3;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666\");\n\n            case 3:\n              _context9.next = 5;\n              return _context9.sent.json();\n\n            case 5:\n              rawResult = _context9.sent;\n              _context9.next = 8;\n              return rawResult.listings;\n\n            case 8:\n              skullsList = _context9.sent;\n              link = 'https://app.ebisusbay.com/listing/';\n              linkGenerate = null;\n              skullsList.map(function (s) {\n                if (s.nftId == skull.edition) linkGenerate = link + s.listingId;\n              });\n              dispatch(updateState({\n                key: \"ebisusLink\",\n                value: linkGenerate\n              }));\n\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function (_x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n};\nexport var getAttributeNew = function getAttributeNew() {\n  return /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(dispatch) {\n      var rawResult, skullsList, attributeList, list, flag;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 2:\n              rawResult = _context10.sent;\n              _context10.next = 5;\n              return rawResult.json();\n\n            case 5:\n              skullsList = _context10.sent;\n              attributeList = [{\n                name: 'Background',\n                value: []\n              }, {\n                name: 'Skull',\n                value: []\n              }, {\n                name: 'Body',\n                value: []\n              }, {\n                name: 'Nose',\n                value: []\n              }, {\n                name: 'Eyes',\n                value: []\n              }, {\n                name: 'Hat',\n                value: []\n              }, {\n                name: 'Trait',\n                value: [{\n                  name: 5,\n                  cont: 0\n                }, {\n                  name: 6,\n                  cont: 0\n                }]\n              }];\n              flag = false;\n              skullsList.map(function (skull) {\n                skull.attributes.map(function (at) {\n                  switch (at.trait_type) {\n                    case 'Background':\n                      list = attributeList[0].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        attributeList[0].value.push({\n                          name: at.value,\n                          cont: 1\n                        });\n                      }\n\n                      break;\n\n                    case 'Skull':\n                      list = attributeList[1].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        attributeList[1].value.push({\n                          name: at.value,\n                          cont: 1\n                        });\n                      }\n\n                      break;\n\n                    case 'Body':\n                      list = attributeList[2].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        attributeList[2].value.push({\n                          name: at.value,\n                          cont: 1\n                        });\n                      }\n\n                      break;\n\n                    case 'Nose':\n                      list = attributeList[3].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        attributeList[3].value.push({\n                          name: at.value,\n                          cont: 1\n                        });\n                      }\n\n                      break;\n\n                    case 'Eyes':\n                      list = attributeList[4].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        attributeList[4].value.push({\n                          name: at.value,\n                          cont: 1\n                        });\n                      }\n\n                      break;\n\n                    case 'Hat':\n                      list = attributeList[5].value;\n                      flag = false;\n\n                      if (list.length > 0) {\n                        list.map(function (l) {\n                          if (l.name == at.value) {\n                            l.cont++;\n                            flag = true;\n                            attributeList[6].value[1].cont++;\n                          }\n                        });\n                      }\n\n                      if (!flag) {\n                        if (at.value == 'none') {\n                          attributeList[6].value[0].cont++;\n                        } else {\n                          attributeList[5].value.push({\n                            name: at.value,\n                            cont: 1\n                          });\n                        }\n                      }\n\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n              });\n              dispatch(updateState({\n                key: \"attributeList\",\n                value: attributeList\n              }));\n\n            case 10:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function (_x10) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/ProjectCroSkull/CroSkullSite/src/redux/gallery/galleryAction.js"],"names":["ethers","store","evoSkull","updateState","payload","type","loadAllSkull","page","dispatch","getState","gallery","fetch","rawResult","json","rawList","skullsList","i","push","key","value","loadEvoSkull","console","log","evoList","loadFilterSkull","filter","start","end","map","skull","checkFilter","length","getFilterSkullLenght","cr","flag","f","name","includes","attributes","at","trait_type","resetSkullList","resetAttributeList","attributeList","resetSkullsFilterLenght","loadSkull","s","edition","getEbisusLink","listings","link","linkGenerate","nftId","listingId","getAttributeNew","cont","list","l"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\nimport evoSkull from './evo.json';\r\n\r\n\r\n\r\n\r\n\r\nconst updateState = (payload) => {\r\n    return {\r\n        type: \"UPDATE_STATE\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadAllSkull = (page) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let {skullsList} = gallery;\r\n        if(!skullsList)\r\n        skullsList = []\r\n        for(let i=page*100; i<page*100+100; i++)\r\n        {\r\n            skullsList.push(rawList[i]);\r\n        }\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList,\r\n        }))\r\n    }\r\n}\r\nexport const loadEvoSkull = () => {\r\n    return async (dispatch) => {\r\n        console.log('evo');\r\n        let { gallery } = store.getState()\r\n        let evoList = evoSkull;\r\n        console.log('evoList');\r\n        dispatch(updateState({\r\n            key: \"evoList\",\r\n            value: evoList,\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadFilterSkull = (filter,page) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let {skullsList} = gallery;\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let i=0;\r\n        let start=page*100;\r\n        let end = page*100+100\r\n        if(!skullsList)\r\n            skullsList = []\r\n        rawList.map( skull =>{\r\n            \r\n                if(checkFilter(skull,filter))\r\n                {\r\n                    if(i>=start && i<end)\r\n                {\r\n                    skullsList.push(skull);\r\n                 }\r\n                    i++;\r\n                }\r\n            })\r\n            \r\n        if(skullsList.length ==0)\r\n            skullsList = null;\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList,\r\n        }))\r\n    }\r\n}\r\nexport const getFilterSkullLenght = (filter) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let i=0;\r\n        rawList.map( skull =>{\r\n\r\n                if(checkFilter(skull,filter))\r\n                {\r\n                    i++;\r\n                }\r\n            })\r\n            \r\n        dispatch(updateState({\r\n            key: \"skullsFilterLenght\",\r\n            value: i,\r\n        }))\r\n    }\r\n}\r\n\r\nfunction checkFilter(cr,filter) {\r\n    let flag = true;\r\n    filter.map((f,i) => {\r\n        if (f.value.length > 0 && flag) {\r\n            if(f.name == 'Trait')\r\n            {\r\n               \r\n                if(f.value.includes(5))\r\n                {   console.log(5)\r\n                    cr.attributes.map(at => {\r\n                        if (at.trait_type == 'Hat' && flag) {\r\n                            if (at.value.includes('none'))\r\n                                flag = true\r\n                            else {\r\n                                flag = false;\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                if(f.value.includes(6))\r\n                {\r\n                    console.log(6)\r\n                    cr.attributes.map(at => {\r\n                        if (at.trait_type == 'Hat' && flag) {\r\n                            if (at.value.includes('none'))\r\n                                flag = false\r\n                            else {\r\n                                flag = true;\r\n                            }\r\n                        }\r\n                    })\r\n                } \r\n            }else{\r\n                cr.attributes.map(at => {\r\n                    if (at.trait_type == f.name && flag) {\r\n                        if (f.value.includes(at.value))\r\n                            flag = true\r\n                        else {\r\n                            flag = false;\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    })\r\n    return flag;\r\n}\r\n\r\n\r\n\r\nexport const resetSkullList = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let skullsList = null;\r\n\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\nexport const resetAttributeList = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let attributeList = null;\r\n\r\n        dispatch(updateState({\r\n            key: \"attributeList\",\r\n            value: attributeList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const resetSkullsFilterLenght = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let attributeList = null;\r\n\r\n        dispatch(updateState({\r\n            key: \"skullsFilterLenght\",\r\n            value: 6666\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadSkull= (i) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let skullsList = await rawResult.json();\r\n        let skull = [];\r\n        if(i)\r\n        {\r\n        skullsList.map(s =>{\r\n            if(s.edition == i)\r\n                skull.push(s);\r\n        })\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skull\r\n        }))\r\n    }\r\n    }\r\n}\r\n\r\nexport const getEbisusLink= (skull) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666`)).json();\r\n        let skullsList = await rawResult.listings;\r\n        const link = 'https://app.ebisusbay.com/listing/';\r\n        let linkGenerate = null;\r\n        \r\n        skullsList.map(s =>{\r\n            if(s.nftId == skull.edition )\r\n                linkGenerate = link+s.listingId\r\n        })\r\n        dispatch(updateState({\r\n            key: \"ebisusLink\",\r\n            value: linkGenerate\r\n        }))\r\n    }\r\n}\r\n\r\n\r\n  export const getAttributeNew = () =>{\r\n    return async (dispatch) => {\r\n    const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n    let skullsList = await rawResult.json();\r\n    let attributeList = [\r\n        {name:'Background',value:[]},\r\n        {name:'Skull',value:[]},\r\n        {name:'Body',value:[]},\r\n        {name:'Nose',value:[]},\r\n        {name:'Eyes',value:[]},\r\n        {name:'Hat',value:[]},\r\n        {name:'Trait',value:[{name:5,cont:0},{name:6,cont:0}]}];\r\n    let list;\r\n    let flag = false;\r\n    skullsList.map(skull =>{\r\n        (skull.attributes).map( at =>{\r\n            switch (at.trait_type) {\r\n                case 'Background':\r\n                    list=attributeList[0].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[0].value.push({name:at.value,cont:1})\r\n                        }\r\n                        \r\n                    break;\r\n                case 'Skull':\r\n                    list=attributeList[1].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[1].value.push({name:at.value,cont:1})\r\n                        }\r\n                    break;\r\n                case 'Body':\r\n                    list=attributeList[2].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[2].value.push({name:at.value,cont:1})\r\n                        }\r\n                    break;\r\n                case 'Nose':\r\n                    list=attributeList[3].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[3].value.push({name:at.value,cont:1})\r\n                        }\r\n                    break;\r\n                case 'Eyes':\r\n                    list=attributeList[4].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[4].value.push({name:at.value,cont:1})\r\n                        }\r\n                    break;\r\n                case 'Hat':\r\n                    list=attributeList[5].value;\r\n                        flag = false;\r\n                        if(list.length>0){                \r\n                        list.map(l =>{\r\n                            if(l.name ==(at.value))\r\n                            {\r\n                                l.cont++;\r\n                                flag = true;\r\n                                attributeList[6].value[1].cont++;\r\n                            }\r\n                            \r\n                        })\r\n                    }\r\n                        if(!flag)\r\n                        {   if(at.value=='none')\r\n                            {\r\n                                attributeList[6].value[0].cont++;\r\n                            }\r\n                            else{\r\n                                attributeList[5].value.push({name:at.value,cont:1})\r\n                            }\r\n                        }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n            \r\n            \r\n        })\r\n    })\r\n    dispatch(updateState({\r\n        key: \"attributeList\",\r\n        value: attributeList\r\n    }))\r\n\r\n\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}