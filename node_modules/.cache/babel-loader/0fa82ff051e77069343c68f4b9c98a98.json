{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstEvent = exports.toListPromise = exports.fromListPromise = void 0;\n\nvar xstream_1 = require(\"xstream\");\n/**\n * Emits one event for each list element as soon as the promise resolves\n */\n\n\nfunction fromListPromise(promise) {\n  var producer = {\n    start: function start(listener) {\n      // the code in `start` runs as soon as anyone listens to the stream\n      promise.then(function (iterable) {\n        var _iterator = _createForOfIteratorHelper(iterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var element = _step.value;\n            listener.next(element);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        listener.complete();\n      }).catch(function (error) {\n        return listener.error(error);\n      });\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    stop: function stop() {}\n  };\n  return xstream_1.Stream.create(producer);\n}\n\nexports.fromListPromise = fromListPromise;\n/**\n * Listens to stream and collects events. When `count` events are collected,\n * the promise resolves with an array of events.\n *\n * Rejects if stream completes before `count` events are collected.\n */\n\nfunction toListPromise(_x, _x2) {\n  return _toListPromise.apply(this, arguments);\n}\n\nfunction _toListPromise() {\n  _toListPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, count) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (count === 0) {\n                resolve([]);\n                return;\n              }\n\n              var events = new Array(); // take() unsubscribes from source stream automatically\n\n              // take() unsubscribes from source stream automatically\n              stream.take(count).subscribe({\n                next: function next(event) {\n                  events.push(event);\n\n                  if (events.length === count) {\n                    resolve(events);\n                  }\n                },\n                complete: function complete() {\n                  reject(\"Stream completed before all events could be collected. \" + \"Collected \".concat(events.length, \", expected \").concat(count));\n                },\n                error: function error(_error) {\n                  return reject(_error);\n                }\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toListPromise.apply(this, arguments);\n}\n\nexports.toListPromise = toListPromise;\n/**\n * Listens to stream, collects one event and revolves.\n *\n * Rejects if stream completes before one event was fired.\n */\n\nfunction firstEvent(_x3) {\n  return _firstEvent.apply(this, arguments);\n}\n\nfunction _firstEvent() {\n  _firstEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return toListPromise(stream, 1);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent[0]);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _firstEvent.apply(this, arguments);\n}\n\nexports.firstEvent = firstEvent;","map":null,"metadata":{},"sourceType":"script"}