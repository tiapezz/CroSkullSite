{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nexport var loadAllSkull = function loadAllSkull(page) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _store$getState, gallery, rawResult, rawList, skullsList, i;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _store$getState = store.getState(), gallery = _store$getState.gallery;\n              _context.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context.sent;\n              _context.next = 6;\n              return rawResult.json();\n\n            case 6:\n              rawList = _context.sent;\n              skullsList = gallery.skullsList;\n              if (!skullsList) skullsList = [];\n\n              for (i = page * 100; i < page * 100 + 100; i++) {\n                skullsList.push(rawList[i]);\n              }\n\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var loadFilterSkull = function loadFilterSkull(filter, page) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState2, gallery, skullsList, rawResult, rawList, i, start, end;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState2 = store.getState(), gallery = _store$getState2.gallery;\n              skullsList = gallery.skullsList;\n              _context2.next = 4;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 4:\n              rawResult = _context2.sent;\n              _context2.next = 7;\n              return rawResult.json();\n\n            case 7:\n              rawList = _context2.sent;\n              i = 0;\n              start = page * 100;\n              end = page * 100 + 100;\n              if (!skullsList) skullsList = [];\n              console.log(skullsList);\n              console.log(page);\n              rawList.map(function (skull) {\n                if (checkFilter(skull, filter)) {\n                  if (i >= start && i < end) {\n                    skullsList.push(skull);\n                  }\n\n                  i++;\n                }\n              });\n              if (skullsList.length == 0) skullsList = null;\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getFilterSkullLenght = function getFilterSkullLenght(filter) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _store$getState3, gallery, rawResult, rawList, i;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _store$getState3 = store.getState(), gallery = _store$getState3.gallery;\n              _context3.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context3.sent;\n              _context3.next = 6;\n              return rawResult.json();\n\n            case 6:\n              rawList = _context3.sent;\n              i = 0;\n              rawList.map(function (skull) {\n                if (checkFilter(skull, filter)) {\n                  i++;\n                }\n              });\n              dispatch(updateState({\n                key: \"skullsFilterLenght\",\n                value: i\n              }));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\n\nfunction checkFilter(cr, filter) {\n  var flag = true;\n  filter.map(function (f) {\n    if (f.value.length > 0 && flag) {\n      cr.attributes.map(function (at) {\n        if (at.trait_type == f.name && flag) {\n          if (f.value.includes(at.value)) flag = true;else {\n            flag = false;\n          }\n        }\n      });\n    }\n  });\n  return flag;\n}\n\nexport var resetSkullList = function resetSkullList() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var _store$getState4, gallery, skullsList;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _store$getState4 = store.getState(), gallery = _store$getState4.gallery;\n              skullsList = null;\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var loadSkull = function loadSkull(i) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var _store$getState5, gallery, rawResult, skullsList, skull;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _store$getState5 = store.getState(), gallery = _store$getState5.gallery;\n              _context5.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context5.sent;\n              _context5.next = 6;\n              return rawResult.json();\n\n            case 6:\n              skullsList = _context5.sent;\n              skullsList.map(function (s) {\n                if (s.edition = i) skull = s;\n              });\n              dispatch(updateState({\n                key: \"skullsList\",\n                value: skullsList\n              }));\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var getEbisusLink = function getEbisusLink(skull) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      var _store$getState6, gallery, rawResult, skullsList, link, linkGenerate;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _store$getState6 = store.getState(), gallery = _store$getState6.gallery;\n              _context6.next = 3;\n              return fetch(\"https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666\");\n\n            case 3:\n              _context6.next = 5;\n              return _context6.sent.json();\n\n            case 5:\n              rawResult = _context6.sent;\n              _context6.next = 8;\n              return rawResult.listings;\n\n            case 8:\n              skullsList = _context6.sent;\n              link = 'https://app.ebisusbay.com/listing/';\n              linkGenerate = null;\n              console.log(skull.edition);\n              skullsList.map(function (s) {\n                console.log(s.nftId == skull.edition);\n                if (s.nftId == skull.edition) linkGenerate = link + s.listingId;\n              });\n              dispatch(updateState({\n                key: \"ebisusLink\",\n                value: linkGenerate\n              }));\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport var getAttribute = function getAttribute() {\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch) {\n      var rawResult, skullsList, attributeList;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 2:\n              rawResult = _context7.sent;\n              _context7.next = 5;\n              return rawResult.json();\n\n            case 5:\n              skullsList = _context7.sent;\n              attributeList = [{\n                name: 'Background',\n                value: []\n              }, {\n                name: 'Skull',\n                value: []\n              }, {\n                name: 'Body',\n                value: []\n              }, {\n                name: 'Nose',\n                value: []\n              }, {\n                name: 'Eyes',\n                value: []\n              }, {\n                name: 'Hat',\n                value: []\n              }, {\n                name: 'Trait',\n                value: [5, 6]\n              }];\n              skullsList.map(function (skull) {\n                skull.attributes.map(function (at) {\n                  switch (at.trait_type) {\n                    case 'Background':\n                      if (!attributeList[0].value.includes(at.value)) attributeList[0].value.push(at.value);\n                      break;\n\n                    case 'Skull':\n                      if (!attributeList[1].value.includes(at.value)) attributeList[1].value.push(at.value);\n                      break;\n\n                    case 'Body':\n                      if (!attributeList[2].value.includes(at.value)) attributeList[2].value.push(at.value);\n                      break;\n\n                    case 'Nose':\n                      if (!attributeList[3].value.includes(at.value)) attributeList[3].value.push(at.value);\n                      break;\n\n                    case 'Eyes':\n                      if (!attributeList[4].value.includes(at.value)) attributeList[4].value.push(at.value);\n                      break;\n\n                    case 'Hat':\n                      if (!attributeList[5].value.includes(at.value)) attributeList[5].value.push(at.value);\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n              });\n              dispatch(updateState({\n                key: \"attributesList\",\n                value: attributeList\n              }));\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n};\nexport var getAttributeNew = function getAttributeNew() {\n  return /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch) {\n      var rawResult, skullsList, attributeList, list;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 2:\n              rawResult = _context8.sent;\n              _context8.next = 5;\n              return rawResult.json();\n\n            case 5:\n              skullsList = _context8.sent;\n              attributeList = [{\n                name: 'Background',\n                value: []\n              }, {\n                name: 'Skull',\n                value: []\n              }, {\n                name: 'Body',\n                value: []\n              }, {\n                name: 'Nose',\n                value: []\n              }, {\n                name: 'Eyes',\n                value: []\n              }, {\n                name: 'Hat',\n                value: []\n              }, {\n                name: 'Trait',\n                value: [{\n                  name: 5,\n                  cont: 0\n                }, {\n                  name: 6,\n                  cont: 0\n                }]\n              }];\n              skullsList.map(function (skull) {\n                skull.attributes.map(function (at) {\n                  switch (at.trait_type) {\n                    case 'Background':\n                      list = attributeList[0].value;\n                      var flag = false;\n                      list.map(function (l) {\n                        if (l.name.includes(at.value)) l.cont++;\n                        flag = true;\n                      });\n\n                      if (!flag) {\n                        attributeList[0].push(at.value, 1);\n                      }\n\n                      break;\n\n                    case 'Skull':\n                      if (!attributeList[1].value.includes(at.value)) attributeList[1].value.push(at.value);\n                      break;\n\n                    case 'Body':\n                      if (!attributeList[2].value.includes(at.value)) attributeList[2].value.push(at.value);\n                      break;\n\n                    case 'Nose':\n                      if (!attributeList[3].value.includes(at.value)) attributeList[3].value.push(at.value);\n                      break;\n\n                    case 'Eyes':\n                      if (!attributeList[4].value.includes(at.value)) attributeList[4].value.push(at.value);\n                      break;\n\n                    case 'Hat':\n                      if (!attributeList[5].value.includes(at.value)) attributeList[5].value.push(at.value);\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n                console.log(attributeList);\n              });\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/gallery/galleryAction.js"],"names":["ethers","store","updateState","payload","type","loadAllSkull","page","dispatch","getState","gallery","fetch","rawResult","json","rawList","skullsList","i","push","key","value","loadFilterSkull","filter","start","end","console","log","map","skull","checkFilter","length","getFilterSkullLenght","cr","flag","f","attributes","at","trait_type","name","includes","resetSkullList","loadSkull","s","edition","getEbisusLink","listings","link","linkGenerate","nftId","listingId","getAttribute","attributeList","getAttributeNew","cont","list","l"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\n\r\n\r\n\r\n\r\n\r\nconst updateState = (payload) => {\r\n    return {\r\n        type: \"UPDATE_STATE\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadAllSkull = (page) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let {skullsList} = gallery;\r\n        if(!skullsList)\r\n        skullsList = []\r\n        for(let i=page*100; i<page*100+100; i++)\r\n        {\r\n            skullsList.push(rawList[i]);\r\n        }\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList,\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadFilterSkull = (filter,page) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let {skullsList} = gallery;\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let i=0;\r\n        let start=page*100;\r\n        let end = page*100+100\r\n        if(!skullsList)\r\n            skullsList = []\r\n        console.log(skullsList)\r\n        console.log(page)\r\n        rawList.map( skull =>{\r\n            \r\n                if(checkFilter(skull,filter))\r\n                {\r\n                    if(i>=start && i<end)\r\n                {\r\n                    skullsList.push(skull);\r\n                 }\r\n                    i++;\r\n                }\r\n            })\r\n            \r\n        if(skullsList.length ==0)\r\n            skullsList = null;\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList,\r\n        }))\r\n    }\r\n}\r\nexport const getFilterSkullLenght = (filter) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let rawList = await rawResult.json();\r\n        let i=0;\r\n        rawList.map( skull =>{\r\n            \r\n                if(checkFilter(skull,filter))\r\n                {\r\n                    i++;\r\n                }\r\n            })\r\n            \r\n        dispatch(updateState({\r\n            key: \"skullsFilterLenght\",\r\n            value: i,\r\n        }))\r\n    }\r\n}\r\n\r\nfunction checkFilter(cr,filter) {\r\n    let flag = true;\r\n    filter.map(f => {\r\n        if (f.value.length > 0 && flag) {\r\n            cr.attributes.map(at => {\r\n                if (at.trait_type == f.name && flag) {\r\n                    if (f.value.includes(at.value))\r\n                        flag = true\r\n                    else {\r\n                        flag = false;\r\n                    }\r\n                }\r\n            })\r\n\r\n        }\r\n    })\r\n    return flag;\r\n}\r\n\r\n\r\n\r\nexport const resetSkullList = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let skullsList = null;\r\n\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadSkull= (i) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let skullsList = await rawResult.json();\r\n        let skull;\r\n        skullsList.map(s =>{\r\n            if(s.edition = i)\r\n                skull=s;\r\n        })\r\n        dispatch(updateState({\r\n            key: \"skullsList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const getEbisusLink= (skull) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await (await fetch(`https://api.ebisusbay.com/listings?collection=0xF87A517A5CaecaA03d7cCa770789BdB61e09e05F&state=0&page=1&pageSize=6666`)).json();\r\n        let skullsList = await rawResult.listings;\r\n        const link = 'https://app.ebisusbay.com/listing/';\r\n        let linkGenerate = null;\r\n        \r\n        console.log(skull.edition);\r\n        skullsList.map(s =>{\r\n            console.log(s.nftId == skull.edition);\r\n            if(s.nftId == skull.edition )\r\n                linkGenerate = link+s.listingId\r\n        })\r\n        dispatch(updateState({\r\n            key: \"ebisusLink\",\r\n            value: linkGenerate\r\n        }))\r\n    }\r\n}\r\n\r\nexport const getAttribute = () =>{\r\n    return async (dispatch) => {\r\n    const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n    let skullsList = await rawResult.json();\r\n    let attributeList = [\r\n        {name:'Background',value:[]},\r\n        {name:'Skull',value:[]},\r\n        {name:'Body',value:[]},\r\n        {name:'Nose',value:[]},\r\n        {name:'Eyes',value:[]},\r\n        {name:'Hat',value:[]},\r\n        {name:'Trait',value:[5,6]}\r\n        ];\r\n    skullsList.map(skull =>{\r\n        (skull.attributes).map( at =>{\r\n            switch (at.trait_type) {\r\n                case 'Background':\r\n                    if (!attributeList[0].value.includes(at.value))\r\n                        attributeList[0].value.push(at.value);\r\n                    break;\r\n                case 'Skull':\r\n                    if (!attributeList[1].value.includes(at.value))\r\n                        attributeList[1].value.push(at.value);\r\n                    break;\r\n                case 'Body':\r\n                    if (!attributeList[2].value.includes(at.value))\r\n                        attributeList[2].value.push(at.value);\r\n                    break;\r\n                case 'Nose':\r\n                    if (!attributeList[3].value.includes(at.value))\r\n                        attributeList[3].value.push(at.value);\r\n                    break;\r\n                case 'Eyes':\r\n                    if (!attributeList[4].value.includes(at.value))\r\n                        attributeList[4].value.push(at.value);\r\n                    break;\r\n                case 'Hat':\r\n                    if (!attributeList[5].value.includes(at.value))\r\n                        attributeList[5].value.push(at.value);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    })\r\n    dispatch(updateState({\r\n        key: \"attributesList\",\r\n        value: attributeList\r\n    }))\r\n    }\r\n  }\r\n\r\n  export const getAttributeNew = () =>{\r\n    return async (dispatch) => {\r\n    const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n    let skullsList = await rawResult.json();\r\n    let attributeList = [\r\n        {name:'Background',value:[]},\r\n        {name:'Skull',value:[]},\r\n        {name:'Body',value:[]},\r\n        {name:'Nose',value:[]},\r\n        {name:'Eyes',value:[]},\r\n        {name:'Hat',value:[]},\r\n        {name:'Trait',value:[{name:5,cont:0},{name:6,cont:0}]}];\r\n    let list;\r\n    \r\n    skullsList.map(skull =>{\r\n        (skull.attributes).map( at =>{\r\n            switch (at.trait_type) {\r\n                case 'Background':\r\n                    list=attributeList[0].value;\r\n                        let flag = false;\r\n                        list.map(l =>{\r\n                            if(l.name.includes(at.value))\r\n                            l.cont++;\r\n                            flag = true;\r\n                        })\r\n                        if(!flag)\r\n                        {\r\n                            attributeList[0].push(at.value,1)\r\n                        }\r\n                    break;\r\n                case 'Skull':\r\n                    if (!attributeList[1].value.includes(at.value))\r\n                        attributeList[1].value.push(at.value);\r\n                    break;\r\n                case 'Body':\r\n                    if (!attributeList[2].value.includes(at.value))\r\n                        attributeList[2].value.push(at.value);\r\n                    break;\r\n                case 'Nose':\r\n                    if (!attributeList[3].value.includes(at.value))\r\n                        attributeList[3].value.push(at.value);\r\n                    break;\r\n                case 'Eyes':\r\n                    if (!attributeList[4].value.includes(at.value))\r\n                        attributeList[4].value.push(at.value);\r\n                    break;\r\n                case 'Hat':\r\n                    if (!attributeList[5].value.includes(at.value))\r\n                        attributeList[5].value.push(at.value);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            \r\n            \r\n        })\r\n        console.log(attributeList);\r\n    })\r\n\r\n\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}