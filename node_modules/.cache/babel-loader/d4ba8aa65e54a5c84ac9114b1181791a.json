{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgClientImpl = exports.MsgSubmitMisbehaviourResponse = exports.MsgSubmitMisbehaviour = exports.MsgUpgradeClientResponse = exports.MsgUpgradeClient = exports.MsgUpdateClientResponse = exports.MsgUpdateClient = exports.MsgCreateClientResponse = exports.MsgCreateClient = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nvar any_1 = require(\"../../../../google/protobuf/any\");\n\nexports.protobufPackage = \"ibc.core.client.v1\";\nvar baseMsgCreateClient = {\n  signer: \"\"\n};\nexports.MsgCreateClient = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.clientState !== undefined) {\n      any_1.Any.encode(message.clientState, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.consensusState !== undefined) {\n      any_1.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgCreateClient);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientState = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.consensusState = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.signer = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgCreateClient);\n\n    if (object.clientState !== undefined && object.clientState !== null) {\n      message.clientState = any_1.Any.fromJSON(object.clientState);\n    } else {\n      message.clientState = undefined;\n    }\n\n    if (object.consensusState !== undefined && object.consensusState !== null) {\n      message.consensusState = any_1.Any.fromJSON(object.consensusState);\n    } else {\n      message.consensusState = undefined;\n    }\n\n    if (object.signer !== undefined && object.signer !== null) {\n      message.signer = String(object.signer);\n    } else {\n      message.signer = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.clientState !== undefined && (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);\n    message.consensusState !== undefined && (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a;\n\n    var message = Object.assign({}, baseMsgCreateClient);\n\n    if (object.clientState !== undefined && object.clientState !== null) {\n      message.clientState = any_1.Any.fromPartial(object.clientState);\n    } else {\n      message.clientState = undefined;\n    }\n\n    if (object.consensusState !== undefined && object.consensusState !== null) {\n      message.consensusState = any_1.Any.fromPartial(object.consensusState);\n    } else {\n      message.consensusState = undefined;\n    }\n\n    message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : \"\";\n    return message;\n  }\n};\nvar baseMsgCreateClientResponse = {};\nexports.MsgCreateClientResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgCreateClientResponse);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgCreateClientResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgCreateClientResponse);\n    return message;\n  }\n};\nvar baseMsgUpdateClient = {\n  clientId: \"\",\n  signer: \"\"\n};\nexports.MsgUpdateClient = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n\n    if (message.header !== undefined) {\n      any_1.Any.encode(message.header, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgUpdateClient);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n\n        case 2:\n          message.header = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.signer = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgUpdateClient);\n\n    if (object.clientId !== undefined && object.clientId !== null) {\n      message.clientId = String(object.clientId);\n    } else {\n      message.clientId = \"\";\n    }\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = any_1.Any.fromJSON(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    if (object.signer !== undefined && object.signer !== null) {\n      message.signer = String(object.signer);\n    } else {\n      message.signer = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.header !== undefined && (obj.header = message.header ? any_1.Any.toJSON(message.header) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n\n    var message = Object.assign({}, baseMsgUpdateClient);\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n\n    if (object.header !== undefined && object.header !== null) {\n      message.header = any_1.Any.fromPartial(object.header);\n    } else {\n      message.header = undefined;\n    }\n\n    message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseMsgUpdateClientResponse = {};\nexports.MsgUpdateClientResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgUpdateClientResponse);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgUpdateClientResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgUpdateClientResponse);\n    return message;\n  }\n};\nvar baseMsgUpgradeClient = {\n  clientId: \"\",\n  signer: \"\"\n};\nexports.MsgUpgradeClient = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n\n    if (message.clientState !== undefined) {\n      any_1.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.consensusState !== undefined) {\n      any_1.Any.encode(message.consensusState, writer.uint32(26).fork()).ldelim();\n    }\n\n    if (message.proofUpgradeClient.length !== 0) {\n      writer.uint32(34).bytes(message.proofUpgradeClient);\n    }\n\n    if (message.proofUpgradeConsensusState.length !== 0) {\n      writer.uint32(42).bytes(message.proofUpgradeConsensusState);\n    }\n\n    if (message.signer !== \"\") {\n      writer.uint32(50).string(message.signer);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgUpgradeClient);\n    message.proofUpgradeClient = new Uint8Array();\n    message.proofUpgradeConsensusState = new Uint8Array();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n\n        case 2:\n          message.clientState = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.consensusState = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.proofUpgradeClient = reader.bytes();\n          break;\n\n        case 5:\n          message.proofUpgradeConsensusState = reader.bytes();\n          break;\n\n        case 6:\n          message.signer = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgUpgradeClient);\n    message.proofUpgradeClient = new Uint8Array();\n    message.proofUpgradeConsensusState = new Uint8Array();\n\n    if (object.clientId !== undefined && object.clientId !== null) {\n      message.clientId = String(object.clientId);\n    } else {\n      message.clientId = \"\";\n    }\n\n    if (object.clientState !== undefined && object.clientState !== null) {\n      message.clientState = any_1.Any.fromJSON(object.clientState);\n    } else {\n      message.clientState = undefined;\n    }\n\n    if (object.consensusState !== undefined && object.consensusState !== null) {\n      message.consensusState = any_1.Any.fromJSON(object.consensusState);\n    } else {\n      message.consensusState = undefined;\n    }\n\n    if (object.proofUpgradeClient !== undefined && object.proofUpgradeClient !== null) {\n      message.proofUpgradeClient = bytesFromBase64(object.proofUpgradeClient);\n    }\n\n    if (object.proofUpgradeConsensusState !== undefined && object.proofUpgradeConsensusState !== null) {\n      message.proofUpgradeConsensusState = bytesFromBase64(object.proofUpgradeConsensusState);\n    }\n\n    if (object.signer !== undefined && object.signer !== null) {\n      message.signer = String(object.signer);\n    } else {\n      message.signer = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.clientState !== undefined && (obj.clientState = message.clientState ? any_1.Any.toJSON(message.clientState) : undefined);\n    message.consensusState !== undefined && (obj.consensusState = message.consensusState ? any_1.Any.toJSON(message.consensusState) : undefined);\n    message.proofUpgradeClient !== undefined && (obj.proofUpgradeClient = base64FromBytes(message.proofUpgradeClient !== undefined ? message.proofUpgradeClient : new Uint8Array()));\n    message.proofUpgradeConsensusState !== undefined && (obj.proofUpgradeConsensusState = base64FromBytes(message.proofUpgradeConsensusState !== undefined ? message.proofUpgradeConsensusState : new Uint8Array()));\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b, _c, _d;\n\n    var message = Object.assign({}, baseMsgUpgradeClient);\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n\n    if (object.clientState !== undefined && object.clientState !== null) {\n      message.clientState = any_1.Any.fromPartial(object.clientState);\n    } else {\n      message.clientState = undefined;\n    }\n\n    if (object.consensusState !== undefined && object.consensusState !== null) {\n      message.consensusState = any_1.Any.fromPartial(object.consensusState);\n    } else {\n      message.consensusState = undefined;\n    }\n\n    message.proofUpgradeClient = (_b = object.proofUpgradeClient) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.proofUpgradeConsensusState = (_c = object.proofUpgradeConsensusState) !== null && _c !== void 0 ? _c : new Uint8Array();\n    message.signer = (_d = object.signer) !== null && _d !== void 0 ? _d : \"\";\n    return message;\n  }\n};\nvar baseMsgUpgradeClientResponse = {};\nexports.MsgUpgradeClientResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgUpgradeClientResponse);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgUpgradeClientResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgUpgradeClientResponse);\n    return message;\n  }\n};\nvar baseMsgSubmitMisbehaviour = {\n  clientId: \"\",\n  signer: \"\"\n};\nexports.MsgSubmitMisbehaviour = {\n  encode: function encode(message) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n\n    if (message.clientId !== \"\") {\n      writer.uint32(10).string(message.clientId);\n    }\n\n    if (message.misbehaviour !== undefined) {\n      any_1.Any.encode(message.misbehaviour, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (message.signer !== \"\") {\n      writer.uint32(26).string(message.signer);\n    }\n\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgSubmitMisbehaviour);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientId = reader.string();\n          break;\n\n        case 2:\n          message.misbehaviour = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.signer = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(object) {\n    var message = Object.assign({}, baseMsgSubmitMisbehaviour);\n\n    if (object.clientId !== undefined && object.clientId !== null) {\n      message.clientId = String(object.clientId);\n    } else {\n      message.clientId = \"\";\n    }\n\n    if (object.misbehaviour !== undefined && object.misbehaviour !== null) {\n      message.misbehaviour = any_1.Any.fromJSON(object.misbehaviour);\n    } else {\n      message.misbehaviour = undefined;\n    }\n\n    if (object.signer !== undefined && object.signer !== null) {\n      message.signer = String(object.signer);\n    } else {\n      message.signer = \"\";\n    }\n\n    return message;\n  },\n  toJSON: function toJSON(message) {\n    var obj = {};\n    message.clientId !== undefined && (obj.clientId = message.clientId);\n    message.misbehaviour !== undefined && (obj.misbehaviour = message.misbehaviour ? any_1.Any.toJSON(message.misbehaviour) : undefined);\n    message.signer !== undefined && (obj.signer = message.signer);\n    return obj;\n  },\n  fromPartial: function fromPartial(object) {\n    var _a, _b;\n\n    var message = Object.assign({}, baseMsgSubmitMisbehaviour);\n    message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : \"\";\n\n    if (object.misbehaviour !== undefined && object.misbehaviour !== null) {\n      message.misbehaviour = any_1.Any.fromPartial(object.misbehaviour);\n    } else {\n      message.misbehaviour = undefined;\n    }\n\n    message.signer = (_b = object.signer) !== null && _b !== void 0 ? _b : \"\";\n    return message;\n  }\n};\nvar baseMsgSubmitMisbehaviourResponse = {};\nexports.MsgSubmitMisbehaviourResponse = {\n  encode: function encode(_) {\n    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : minimal_1.default.Writer.create();\n    return writer;\n  },\n  decode: function decode(input, length) {\n    var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    var end = length === undefined ? reader.len : reader.pos + length;\n    var message = Object.assign({}, baseMsgSubmitMisbehaviourResponse);\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n  fromJSON: function fromJSON(_) {\n    var message = Object.assign({}, baseMsgSubmitMisbehaviourResponse);\n    return message;\n  },\n  toJSON: function toJSON(_) {\n    var obj = {};\n    return obj;\n  },\n  fromPartial: function fromPartial(_) {\n    var message = Object.assign({}, baseMsgSubmitMisbehaviourResponse);\n    return message;\n  }\n};\n\nvar MsgClientImpl = /*#__PURE__*/function () {\n  function MsgClientImpl(rpc) {\n    _classCallCheck(this, MsgClientImpl);\n\n    this.rpc = rpc;\n    this.CreateClient = this.CreateClient.bind(this);\n    this.UpdateClient = this.UpdateClient.bind(this);\n    this.UpgradeClient = this.UpgradeClient.bind(this);\n    this.SubmitMisbehaviour = this.SubmitMisbehaviour.bind(this);\n  }\n\n  _createClass(MsgClientImpl, [{\n    key: \"CreateClient\",\n    value: function CreateClient(request) {\n      var data = exports.MsgCreateClient.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.client.v1.Msg\", \"CreateClient\", data);\n      return promise.then(function (data) {\n        return exports.MsgCreateClientResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"UpdateClient\",\n    value: function UpdateClient(request) {\n      var data = exports.MsgUpdateClient.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.client.v1.Msg\", \"UpdateClient\", data);\n      return promise.then(function (data) {\n        return exports.MsgUpdateClientResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"UpgradeClient\",\n    value: function UpgradeClient(request) {\n      var data = exports.MsgUpgradeClient.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.client.v1.Msg\", \"UpgradeClient\", data);\n      return promise.then(function (data) {\n        return exports.MsgUpgradeClientResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }, {\n    key: \"SubmitMisbehaviour\",\n    value: function SubmitMisbehaviour(request) {\n      var data = exports.MsgSubmitMisbehaviour.encode(request).finish();\n      var promise = this.rpc.request(\"ibc.core.client.v1.Msg\", \"SubmitMisbehaviour\", data);\n      return promise.then(function (data) {\n        return exports.MsgSubmitMisbehaviourResponse.decode(new minimal_1.default.Reader(data));\n      });\n    }\n  }]);\n\n  return MsgClientImpl;\n}();\n\nexports.MsgClientImpl = MsgClientImpl;\n\nvar globalThis = function () {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n}();\n\nvar atob = globalThis.atob || function (b64) {\n  return globalThis.Buffer.from(b64, \"base64\").toString(\"binary\");\n};\n\nfunction bytesFromBase64(b64) {\n  var bin = atob(b64);\n  var arr = new Uint8Array(bin.length);\n\n  for (var i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nvar btoa = globalThis.btoa || function (bin) {\n  return globalThis.Buffer.from(bin, \"binary\").toString(\"base64\");\n};\n\nfunction base64FromBytes(arr) {\n  var bin = [];\n\n  var _iterator = _createForOfIteratorHelper(arr),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      bin.push(String.fromCharCode(byte));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":null,"metadata":{},"sourceType":"script"}