{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar errCode = require('err-code');\n\nvar CID = require('cids');\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var iterator, first, _iterator3, _step3, cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _cid, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!CID.isCID(input)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toPin({\n              cid: input\n            });\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toPin({\n              path: input\n            });\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return toPin(input);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            if (!input[Symbol.iterator]) {\n              _context.next = 62;\n              break;\n            }\n\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 19:\n            if (!(CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 22;\n            return toPin({\n              cid: first.value\n            });\n\n          case 22:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 23;\n\n            _iterator3.s();\n\n          case 25:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 31;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 29;\n            return toPin({\n              cid: cid\n            });\n\n          case 29:\n            _context.next = 25;\n            break;\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](23);\n\n            _iterator3.e(_context.t0);\n\n          case 36:\n            _context.prev = 36;\n\n            _iterator3.f();\n\n            return _context.finish(36);\n\n          case 39:\n            return _context.abrupt(\"return\");\n\n          case 40:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 61;\n              break;\n            }\n\n            _context.next = 43;\n            return toPin(first.value);\n\n          case 43:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 44;\n\n            _iterator4.s();\n\n          case 46:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 52;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 50;\n            return toPin(obj);\n\n          case 50:\n            _context.next = 46;\n            break;\n\n          case 52:\n            _context.next = 57;\n            break;\n\n          case 54:\n            _context.prev = 54;\n            _context.t1 = _context[\"catch\"](44);\n\n            _iterator4.e(_context.t1);\n\n          case 57:\n            _context.prev = 57;\n\n            _iterator4.f();\n\n            return _context.finish(57);\n\n          case 60:\n            return _context.abrupt(\"return\");\n\n          case 61:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 62:\n            if (!input[Symbol.asyncIterator]) {\n              _context.next = 146;\n              break;\n            }\n\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 66;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 66:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 69;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 69:\n            if (!(CID.isCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 107;\n              break;\n            }\n\n            _context.next = 72;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 72:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 74;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 76:\n            _context.next = 78;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 78:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 82;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 82:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 90;\n              break;\n            }\n\n            _cid = _value;\n            _context.next = 87;\n            return toPin({\n              cid: _cid\n            });\n\n          case 87:\n            _iteratorNormalCompletion = true;\n            _context.next = 76;\n            break;\n\n          case 90:\n            _context.next = 96;\n            break;\n\n          case 92:\n            _context.prev = 92;\n            _context.t2 = _context[\"catch\"](74);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 96:\n            _context.prev = 96;\n            _context.prev = 97;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 101;\n              break;\n            }\n\n            _context.next = 101;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 101:\n            _context.prev = 101;\n\n            if (!_didIteratorError) {\n              _context.next = 104;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 104:\n            return _context.finish(101);\n\n          case 105:\n            return _context.finish(96);\n\n          case 106:\n            return _context.abrupt(\"return\");\n\n          case 107:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 145;\n              break;\n            }\n\n            _context.next = 110;\n            return toPin(_first.value);\n\n          case 110:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 112;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 114:\n            _context.next = 116;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 116:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 120;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 120:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 128;\n              break;\n            }\n\n            _obj = _value2;\n            _context.next = 125;\n            return toPin(_obj);\n\n          case 125:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 114;\n            break;\n\n          case 128:\n            _context.next = 134;\n            break;\n\n          case 130:\n            _context.prev = 130;\n            _context.t3 = _context[\"catch\"](112);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 134:\n            _context.prev = 134;\n            _context.prev = 135;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 139;\n              break;\n            }\n\n            _context.next = 139;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 139:\n            _context.prev = 139;\n\n            if (!_didIteratorError2) {\n              _context.next = 142;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 142:\n            return _context.finish(139);\n\n          case 143:\n            return _context.finish(134);\n\n          case 144:\n            return _context.abrupt(\"return\");\n\n          case 145:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 146:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 147:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[23, 33, 36, 39], [44, 54, 57, 60], [74, 92, 96, 106], [97,, 101, 105], [112, 130, 134, 144], [135,, 139, 143]]);\n  }));\n\n  function normaliseInput(_x) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @param {ToPinWithPath|ToPinWithCID} input\n * @returns {Pin}\n */\n\n\nfunction toPin(input) {\n  var pin = {\n    path: input.path == null ? input.cid : \"\".concat(input.path),\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n/**\n * @typedef {Object} ToPinWithPath\n * @property {string | InstanceType<typeof window.String> | CID} path\n * @property {undefined} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {Object} ToPinWithCID\n * @property {undefined} [path]\n * @property {CID} cid\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */","map":null,"metadata":{},"sourceType":"script"}