{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\n\nvar query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\n\nvar utils_1 = require(\"./utils\");\n\nfunction setupGovExtension(base) {\n  var rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  var queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: function () {\n        var _params = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parametersType) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return queryService.Params({\n                    paramsType: parametersType\n                  });\n\n                case 2:\n                  response = _context.sent;\n                  return _context.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function params(_x) {\n          return _params.apply(this, arguments);\n        }\n\n        return params;\n      }(),\n      proposals: function () {\n        var _proposals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proposalStatus, depositorAddress, voterAddress, paginationKey) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return queryService.Proposals({\n                    proposalStatus: proposalStatus,\n                    depositor: depositorAddress,\n                    voter: voterAddress,\n                    pagination: utils_1.createPagination(paginationKey)\n                  });\n\n                case 2:\n                  response = _context2.sent;\n                  return _context2.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function proposals(_x2, _x3, _x4, _x5) {\n          return _proposals.apply(this, arguments);\n        }\n\n        return proposals;\n      }(),\n      proposal: function () {\n        var _proposal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(proposalId) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return queryService.Proposal({\n                    proposalId: utils_1.longify(proposalId)\n                  });\n\n                case 2:\n                  response = _context3.sent;\n                  return _context3.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        function proposal(_x6) {\n          return _proposal.apply(this, arguments);\n        }\n\n        return proposal;\n      }(),\n      deposits: function () {\n        var _deposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proposalId, paginationKey) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return queryService.Deposits({\n                    proposalId: utils_1.longify(proposalId),\n                    pagination: utils_1.createPagination(paginationKey)\n                  });\n\n                case 2:\n                  response = _context4.sent;\n                  return _context4.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        function deposits(_x7, _x8) {\n          return _deposits.apply(this, arguments);\n        }\n\n        return deposits;\n      }(),\n      deposit: function () {\n        var _deposit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(proposalId, depositorAddress) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return queryService.Deposit({\n                    proposalId: utils_1.longify(proposalId),\n                    depositor: depositorAddress\n                  });\n\n                case 2:\n                  response = _context5.sent;\n                  return _context5.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        function deposit(_x9, _x10) {\n          return _deposit.apply(this, arguments);\n        }\n\n        return deposit;\n      }(),\n      tally: function () {\n        var _tally = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(proposalId) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return queryService.TallyResult({\n                    proposalId: utils_1.longify(proposalId)\n                  });\n\n                case 2:\n                  response = _context6.sent;\n                  return _context6.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n\n        function tally(_x11) {\n          return _tally.apply(this, arguments);\n        }\n\n        return tally;\n      }(),\n      votes: function () {\n        var _votes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(proposalId, paginationKey) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.next = 2;\n                  return queryService.Votes({\n                    proposalId: utils_1.longify(proposalId),\n                    pagination: utils_1.createPagination(paginationKey)\n                  });\n\n                case 2:\n                  response = _context7.sent;\n                  return _context7.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        function votes(_x12, _x13) {\n          return _votes.apply(this, arguments);\n        }\n\n        return votes;\n      }(),\n      vote: function () {\n        var _vote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(proposalId, voterAddress) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return queryService.Vote({\n                    proposalId: utils_1.longify(proposalId),\n                    voter: voterAddress\n                  });\n\n                case 2:\n                  response = _context8.sent;\n                  return _context8.abrupt(\"return\", response);\n\n                case 4:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        function vote(_x14, _x15) {\n          return _vote.apply(this, arguments);\n        }\n\n        return vote;\n      }()\n    }\n  };\n}\n\nexports.setupGovExtension = setupGovExtension;","map":null,"metadata":{},"sourceType":"script"}