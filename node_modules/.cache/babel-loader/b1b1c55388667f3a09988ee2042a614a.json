{"ast":null,"code":"import _defineProperty from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\src\\\\components\\\\Stories\\\\Stories.jsx\";\n\nimport { ethers } from 'ethers';\nimport React, { useEffect, useState } from \"react\";\nimport { getSkullsData, toTavern, toMission, sendNotification, getStakingData, approveStories, refreshSkullsStories } from \"../../redux/data/dataActions\";\nimport store from \"../../redux/store\";\nimport { useDispatch } from \"react-redux\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDungeon, faRunning, faCoins, faSkullCrossbones, faSpinner, faRedoAlt } from '@fortawesome/free-solid-svg-icons';\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport ReactQuill from \"react-quill\";\nimport IpfsHttpClient from \"ipfs-http-client\";\nimport \"react-quill/dist/quill.snow.css\";\nimport './Stories.css';\nvar ipfsUri480 = \"https://croskull.mypinata.cloud/ipfs/QmWu9bKunKbv8Kkq8wEWGpCaW47oMBbH6ep4ZWBzAxHtgj/\";\nvar ipfsUri128 = \"https://croskull.mypinata.cloud/ipfs/QmZn1HvYE1o1J8LhNpxFTj5k8LQb2bWT49YvbrhB3r19Xx/\";\n\nvar Stories = function Stories() {\n  var dispatch = useDispatch();\n\n  var _store$getState = store.getState(),\n      blockchain = _store$getState.blockchain,\n      data = _store$getState.data;\n\n  var _useState = useState({\n    display: false,\n    tokenId: 0,\n    title: \"\",\n    description: \"\",\n    birthDate: 0,\n    deathDate: 0,\n    hobby: \"\",\n    twitter: \"\",\n    faction: \"\",\n    ownerOf: \"\",\n    x: 0,\n    y: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storyState = _useState2[0],\n      setStoryState = _useState2[1];\n\n  var _useState3 = useState({\n    display: false,\n    tokenId: 0,\n    title: \"\",\n    description: \"\",\n    birthDate: 0,\n    deathDate: 0,\n    hobby: \"\",\n    twitter: \"\",\n    faction: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      editorStory = _useState4[0],\n      setEditorStory = _useState4[1];\n\n  var _useState5 = useState({\n    x: 0,\n    y: 0\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mousePos = _useState6[0],\n      setMousePos = _useState6[1];\n\n  useEffect(function () {\n    if (viewStories) toggleStories(false);\n    if (viewInventory) toggleInventory(false);\n  }, [viewState]);\n  useEffect(function () {\n    if (viewInventory && viewStories) toggleInventory(false);\n  }, [viewStories]);\n  useEffect(function () {\n    if (viewStories && viewInventory) toggleStories(false);\n  }, [viewInventory]);\n  useEffect(function () {\n    setEditorStory(_objectSpread({}, editorStory, {\n      tokenId: storyState.tokenId\n    }));\n  }, [storyState.tokenId]);\n\n  var fetchSkullDescription = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var tokenId, ownerOf, croSkullsDescription, accountAddress, ipfsHash, hashMetadata, _yield$hashMetadata$j, _name, _description, _birthDate, _deathDate, _hobby, _twitter, _faction;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tokenId = _ref.tokenId, ownerOf = _ref.ownerOf;\n              croSkullsDescription = blockchain.croSkullsDescription, accountAddress = blockchain.accountAddress;\n              console.log(tokenId);\n              _context.next = 5;\n              return croSkullsDescription.descriptionHashes(tokenId);\n\n            case 5:\n              ipfsHash = _context.sent;\n              ipfsHash = ipfsHash.toString();\n\n              if (!ipfsHash) {\n                _context.next = 26;\n                break;\n              }\n\n              ipfsHash = ipfsHash.replace('ipfs://', 'https://ipfs.infura.io/ipfs/');\n              _context.next = 11;\n              return fetch(ipfsHash);\n\n            case 11:\n              hashMetadata = _context.sent;\n              _context.next = 14;\n              return hashMetadata.json();\n\n            case 14:\n              _yield$hashMetadata$j = _context.sent;\n              _name = _yield$hashMetadata$j.name;\n              _description = _yield$hashMetadata$j.description;\n              _birthDate = _yield$hashMetadata$j.birthDate;\n              _deathDate = _yield$hashMetadata$j.deathDate;\n              _hobby = _yield$hashMetadata$j.hobby;\n              _twitter = _yield$hashMetadata$j.twitter;\n              _faction = _yield$hashMetadata$j.faction;\n              setStoryState(_objectSpread({}, storyState, {\n                name: _name,\n                description: _description,\n                birthDate: _birthDate,\n                deathDate: _deathDate,\n                hobby: _hobby,\n                twitter: _twitter,\n                faction: _faction,\n                display: true,\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\n                x: mousePos.x,\n                y: mousePos.y\n              }));\n              setEditorStory(_objectSpread({}, editorStory, {\n                name: _name,\n                description: _description,\n                birthDate: _birthDate,\n                deathDate: _deathDate,\n                hobby: _hobby,\n                twitter: _twitter,\n                faction: _faction,\n                display: false,\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : storyState.ownerOf\n              }));\n              _context.next = 27;\n              break;\n\n            case 26:\n              setStoryState({\n                tokenId: tokenId,\n                ownerOf: ownerOf ? ownerOf : accountAddress,\n                display: true\n              });\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchSkullDescription(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var saveSkullStory = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var croSkullsDescription, storyfied, descriptionBuffer, client, ipfsResponse, path, skullStoryTx;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              croSkullsDescription = blockchain.croSkullsDescription;\n              storyfied = JSON.stringify(editorStory);\n              descriptionBuffer = Buffer.from(storyfied);\n              _context3.prev = 3;\n              client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\n              _context3.next = 7;\n              return client.add(descriptionBuffer);\n\n            case 7:\n              ipfsResponse = _context3.sent;\n\n              if (!(ipfsResponse.path !== \"\")) {\n                _context3.next = 13;\n                break;\n              }\n\n              path = \"ipfs://\".concat(ipfsResponse.path);\n              skullStoryTx = croSkullsDescription.updateUsingGrave(editorStory.tokenId.toString(), //tokenId\n              path // ipfs string hash with prefix\n              );\n              _context3.next = 13;\n              return skullStoryTx.then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tx) {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          console.log(tx);\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context2.next = 4;\n                          return tx.wait(2);\n\n                        case 4:\n                          dispatch(sendNotification({\n                            title: \"Story Updated!\",\n                            message: \"Skull #\".concat(editorStory.tokenId, \"'s story updated succesful\"),\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          fetchSkullDescription({\n                            tokenId: editorStory.tokenId\n                          });\n                          setEditorStory(_objectSpread({}, editorStory, {\n                            display: false\n                          }));\n                          dispatch(getSkullsData());\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n\n            case 13:\n              _context3.next = 18;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](3);\n              console.log(_context3.t0.message);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[3, 15]]);\n    }));\n\n    return function saveSkullStory() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleFieldChange = function handleFieldChange(event) {\n    var value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event;\n    var name = event.target ? event.target.id : \"description\";\n    var type = event.target ? event.target.type : \"description\";\n    console.log(value, name, type);\n\n    if (type === 'date') {\n      value = parseInt(new Date(value).getTime() / 1000);\n    }\n\n    setEditorStory(_objectSpread({}, editorStory, _defineProperty({}, name, value)));\n  }; //quill description editor setting\n\n\n  var storiesLoading = data.storiesLoading,\n      redCount = data.redCount,\n      blueCount = data.blueCount,\n      croSkullsStaked = data.croSkullsStaked,\n      croSkulls = data.croSkulls,\n      skullsStories = data.skullsStories,\n      approval = data.approval,\n      advancedMetadata = data.advancedMetadata,\n      loading = data.loading,\n      croSkullsContractOwner = data.croSkullsContractOwner,\n      petEggsMintedByUser = data.petEggsMintedByUser,\n      storyAllowance = data.storyAllowance;\n  var accountAddress = blockchain.accountAddress;\n  var tokenId = storyState.tokenId,\n      name = storyState.name,\n      description = storyState.description,\n      birthDate = storyState.birthDate,\n      deathDate = storyState.deathDate,\n      hobby = storyState.hobby,\n      twitter = storyState.twitter,\n      faction = storyState.faction,\n      display = storyState.display;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"\".concat(ipfsUri128, \"27.webp\"),\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }))));\n};\n\nvar modules = {\n  toolbar: [[{\n    'header': [1, 2, false]\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }, {\n    'indent': '-1'\n  }, {\n    'indent': '+1'\n  }], ['clean']]\n};\nvar formats = ['header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent'];\nexport default Stories;","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/components/Stories/Stories.jsx"],"names":["ethers","React","useEffect","useState","getSkullsData","toTavern","toMission","sendNotification","getStakingData","approveStories","refreshSkullsStories","store","useDispatch","FontAwesomeIcon","faDungeon","faRunning","faCoins","faSkullCrossbones","faSpinner","faRedoAlt","LazyLoadImage","ReactQuill","IpfsHttpClient","ipfsUri480","ipfsUri128","Stories","dispatch","getState","blockchain","data","display","tokenId","title","description","birthDate","deathDate","hobby","twitter","faction","ownerOf","x","y","storyState","setStoryState","editorStory","setEditorStory","mousePos","setMousePos","viewStories","toggleStories","viewInventory","toggleInventory","viewState","fetchSkullDescription","croSkullsDescription","accountAddress","console","log","descriptionHashes","ipfsHash","toString","replace","fetch","hashMetadata","json","name","saveSkullStory","storyfied","JSON","stringify","descriptionBuffer","Buffer","from","client","URL","add","ipfsResponse","path","skullStoryTx","updateUsingGrave","then","tx","message","type","wait","handleFieldChange","event","value","target","id","parseInt","Date","getTime","storiesLoading","redCount","blueCount","croSkullsStaked","croSkulls","skullsStories","approval","advancedMetadata","loading","croSkullsContractOwner","petEggsMintedByUser","storyAllowance","width","modules","toolbar","formats"],"mappings":"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","sourcesContent":["import {\r\n  ethers\r\n} from 'ethers';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getSkullsData, toTavern, toMission, sendNotification, getStakingData, approveStories, refreshSkullsStories } from \"../../redux/data/dataActions\";\r\nimport store from \"../../redux/store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDungeon, faRunning, faCoins, faSkullCrossbones, faSpinner, faRedoAlt  } from '@fortawesome/free-solid-svg-icons';\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport ReactQuill from \"react-quill\";\r\nimport IpfsHttpClient from \"ipfs-http-client\";\r\n\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport './Stories.css';\r\n\r\nconst ipfsUri480 = \"https://croskull.mypinata.cloud/ipfs/QmWu9bKunKbv8Kkq8wEWGpCaW47oMBbH6ep4ZWBzAxHtgj/\"\r\nconst ipfsUri128 = \"https://croskull.mypinata.cloud/ipfs/QmZn1HvYE1o1J8LhNpxFTj5k8LQb2bWT49YvbrhB3r19Xx/\"\r\nconst Stories = () => {\r\n  let dispatch = useDispatch()\r\n  let { blockchain, data } = store.getState()\r\n\r\n\r\n  const [storyState, setStoryState] = useState( {\r\n    display: false,\r\n    tokenId: 0,\r\n    title: \"\",\r\n    description: \"\",\r\n    birthDate: 0,\r\n    deathDate: 0,\r\n    hobby: \"\",\r\n    twitter: \"\",\r\n    faction: \"\",\r\n    ownerOf: \"\",\r\n    x: 0,\r\n    y: 0\r\n  })\r\n\r\n  const [editorStory, setEditorStory] = useState( {\r\n    display: false,\r\n    tokenId: 0,\r\n    title: \"\",\r\n    description: \"\",\r\n    birthDate: 0,\r\n    deathDate: 0,\r\n    hobby: \"\",\r\n    twitter: \"\",\r\n    faction: \"\"\r\n  } )\r\n\r\n  const [mousePos, setMousePos] = useState({ \r\n    x: 0, \r\n    y: 0 \r\n  })\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    if( viewStories )\r\n      toggleStories( false )\r\n    if( viewInventory )\r\n      toggleInventory( false )\r\n  }, [viewState])\r\n\r\n  useEffect(() => {\r\n    if( viewInventory && viewStories )\r\n      toggleInventory( false )\r\n  }, [viewStories])\r\n\r\n  useEffect(() => {\r\n    if( viewStories  && viewInventory )\r\n      toggleStories( false )\r\n  }, [viewInventory])\r\n\r\n  useEffect( () => {\r\n    setEditorStory( { \r\n      ...editorStory,\r\n      tokenId: storyState.tokenId\r\n    })\r\n  }, [storyState.tokenId])\r\n  \r\n  const fetchSkullDescription = async ( { tokenId, ownerOf } ) => {\r\n    let { croSkullsDescription, accountAddress } = blockchain\r\n    console.log( tokenId )\r\n    let ipfsHash = await croSkullsDescription.descriptionHashes( tokenId )\r\n    ipfsHash = ipfsHash.toString()\r\n    if( ipfsHash ) {\r\n      ipfsHash = ipfsHash.replace('ipfs://', 'https://ipfs.infura.io/ipfs/')\r\n      let hashMetadata = await fetch( ipfsHash );\r\n      let { name, description, birthDate, deathDate, hobby, twitter, faction} = await hashMetadata.json();\r\n      \r\n      setStoryState( {\r\n        ...storyState,\r\n        name,\r\n        description,\r\n        birthDate,\r\n        deathDate,\r\n        hobby,\r\n        twitter,\r\n        faction,\r\n        display: true,\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\r\n        x: mousePos.x,\r\n        y: mousePos.y\r\n      } )\r\n      setEditorStory( {\r\n        ...editorStory,\r\n        name,\r\n        description,\r\n        birthDate,\r\n        deathDate,\r\n        hobby,\r\n        twitter,\r\n        faction,\r\n        display: false,\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : storyState.ownerOf,\r\n      } )\r\n    } else {\r\n      setStoryState( {\r\n        tokenId,\r\n        ownerOf: ownerOf ? ownerOf : accountAddress,\r\n        display: true\r\n      })\r\n    }\r\n  }\r\n\r\n  const saveSkullStory = async ( ) => {\r\n    let { croSkullsDescription } = blockchain\r\n    let storyfied = JSON.stringify(editorStory)\r\n    let descriptionBuffer = Buffer.from(storyfied)\r\n    try {\r\n      const client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\r\n      const ipfsResponse = await client.add(descriptionBuffer);\r\n      if( ipfsResponse.path !== \"\" ){\r\n          let path = `ipfs://${ipfsResponse.path}`\r\n          let skullStoryTx = croSkullsDescription.updateUsingGrave( \r\n            editorStory.tokenId.toString(), //tokenId\r\n            path, // ipfs string hash with prefix\r\n          )\r\n\r\n           await skullStoryTx.then(\r\n            async (tx) => {\r\n              console.log( tx )\r\n              dispatch(sendNotification({\r\n                title: `Transaction Sent`,\r\n                message: 'Waiting for confirmation...',\r\n                tx,\r\n                type: \"info\"\r\n              }))\r\n              await tx.wait(2)\r\n              dispatch(sendNotification({\r\n                title: `Story Updated!`,\r\n                message: `Skull #${editorStory.tokenId}'s story updated succesful`,\r\n                tx,\r\n                type: \"success\"\r\n              }))\r\n              fetchSkullDescription( { tokenId: editorStory.tokenId })\r\n              setEditorStory({\r\n                ...editorStory,\r\n                display: false\r\n              })\r\n              dispatch(getSkullsData())\r\n            }\r\n          )\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const handleFieldChange = ( event ) => {\r\n    let value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event\r\n    let name = event.target ? event.target.id : \"description\"\r\n    let type = event.target ? event.target.type : \"description\"\r\n    console.log( value, name, type )\r\n    if( type === 'date' ){\r\n      value = parseInt( new Date( value ).getTime() / 1000 )\r\n    }\r\n    setEditorStory( {\r\n      ...editorStory,\r\n      [name]: value\r\n    } )\r\n  }\r\n\r\n  //quill description editor setting\r\n\r\n  let { storiesLoading, redCount, blueCount, croSkullsStaked, croSkulls, skullsStories, approval, advancedMetadata, loading, croSkullsContractOwner, petEggsMintedByUser, storyAllowance } = data;\r\n  let { accountAddress } = blockchain\r\n  let { \r\n    tokenId,\r\n    name,\r\n    description,\r\n    birthDate,\r\n    deathDate,\r\n    hobby,\r\n    twitter,\r\n    faction,\r\n    display\r\n  } = storyState\r\n  return (\r\n    <>\r\n          <div className='sk-container'>\r\n            <div className='sk-box'>\r\n              <img src={`${ipfsUri128}27.webp`} style={{width: '100%'}}/>\r\n            </div>\r\n          </div>\r\n    </ >\r\n  )\r\n}\r\n\r\nlet modules = {\r\n    toolbar: [\r\n      [{ 'header': [1, 2, false] }],\r\n      ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n      ['clean']\r\n    ],\r\n  };\r\n\r\n  let formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n  ];\r\n\r\nexport default Stories;\r\n"]},"metadata":{},"sourceType":"module"}