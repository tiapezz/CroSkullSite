{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nexport var loadAllSkull = function loadAllSkull() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _store$getState, gallery, rawResult, skullsList;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _store$getState = store.getState(), gallery = _store$getState.gallery;\n              _context.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context.sent;\n              _context.next = 6;\n              return rawResult.json();\n\n            case 6:\n              skullsList = _context.sent;\n              console.log(skullsList);\n              dispatch(updateState({\n                key: \"skullList\",\n                value: skullsList\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var resetSkullList = function resetSkullList() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _store$getState2, gallery, skullsList;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _store$getState2 = store.getState(), gallery = _store$getState2.gallery;\n              skullsList = null;\n              console.log(skullsList);\n              dispatch(updateState({\n                key: \"skullList\",\n                value: skullsList\n              }));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var loadSkull = function loadSkull(i) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var _store$getState3, gallery, rawResult, skullsList, skull;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _store$getState3 = store.getState(), gallery = _store$getState3.gallery;\n              _context3.next = 3;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 3:\n              rawResult = _context3.sent;\n              _context3.next = 6;\n              return rawResult.json();\n\n            case 6:\n              skullsList = _context3.sent;\n              skullsList.map(function (s) {\n                if (s.edition = i) skull = s;\n              });\n              console.log(skull);\n              dispatch(updateState({\n                key: \"skullList\",\n                value: skullsList\n              }));\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getAttribute = function getAttribute() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var rawResult, skullsList, attributeList;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch('https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata');\n\n            case 2:\n              rawResult = _context4.sent;\n              _context4.next = 5;\n              return rawResult.json();\n\n            case 5:\n              skullsList = _context4.sent;\n              attributeList = [{\n                name: 'Background',\n                value: []\n              }, {\n                name: 'Skull',\n                value: []\n              }, {\n                name: 'Body',\n                value: []\n              }, {\n                name: 'Nose',\n                value: []\n              }, {\n                name: 'Eyes',\n                value: []\n              }, {\n                name: 'Hat',\n                value: []\n              }, {\n                name: 'Trait',\n                value: [5, 6]\n              }];\n              console.log(skullsList);\n              skullsList.map(function (skull) {\n                skull.attributes.map(function (at) {\n                  switch (at.trait_type) {\n                    case 'Background':\n                      if (!attributeList[0].value.includes(at.value)) attributeList[0].value.push(at.value);\n                      break;\n\n                    case 'Skull':\n                      if (!attributeList[1].value.includes(at.value)) attributeList[1].value.push(at.value);\n                      break;\n\n                    case 'Body':\n                      if (!attributeList[2].value.includes(at.value)) attributeList[2].value.push(at.value);\n                      break;\n\n                    case 'Nose':\n                      if (!attributeList[3].value.includes(at.value)) attributeList[3].value.push(at.value);\n                      break;\n\n                    case 'Eyes':\n                      if (!attributeList[4].value.includes(at.value)) attributeList[4].value.push(at.value);\n                      break;\n\n                    case 'Hat':\n                      if (!attributeList[5].value.includes(at.value)) attributeList[5].value.push(at.value);\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n              });\n              dispatch(updateState({\n                key: \"attributesList\",\n                value: attributeList\n              }));\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/gallery/galleryAction.js"],"names":["ethers","store","updateState","payload","type","loadAllSkull","dispatch","getState","gallery","fetch","rawResult","json","skullsList","console","log","key","value","resetSkullList","loadSkull","i","map","s","edition","skull","getAttribute","attributeList","name","attributes","at","trait_type","includes","push"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\n\r\n\r\n\r\n\r\n\r\nconst updateState = (payload) => {\r\n    return {\r\n        type: \"UPDATE_STATE\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadAllSkull = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let skullsList = await rawResult.json();\r\n        console.log(skullsList);\r\n        dispatch(updateState({\r\n            key: \"skullList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const resetSkullList = () => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        let skullsList = null;\r\n        console.log(skullsList);\r\n        dispatch(updateState({\r\n            key: \"skullList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const loadSkull= (i) => {\r\n    return async (dispatch) => {\r\n        let { gallery } = store.getState()\r\n        const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n        let skullsList = await rawResult.json();\r\n        let skull;\r\n        skullsList.map(s =>{\r\n            if(s.edition = i)\r\n                skull=s;\r\n        })\r\n        console.log(skull);\r\n        dispatch(updateState({\r\n            key: \"skullList\",\r\n            value: skullsList\r\n        }))\r\n    }\r\n}\r\n\r\nexport const getAttribute = () =>{\r\n    return async (dispatch) => {\r\n    const rawResult = await fetch( 'https://croskull.mypinata.cloud/ipfs/QmSrjCsmQ9e5m1HFYXRSYgxHi9K6u9a6DXRsWz7KWW5i6p/_metadata' );\r\n    let skullsList = await rawResult.json();\r\n    let attributeList = [\r\n        {name:'Background',value:[]},\r\n        {name:'Skull',value:[]},\r\n        {name:'Body',value:[]},\r\n        {name:'Nose',value:[]},\r\n        {name:'Eyes',value:[]},\r\n        {name:'Hat',value:[]},\r\n        {name:'Trait',value:[5,6]}\r\n        ];\r\n        console.log(skullsList);\r\n    skullsList.map(skull =>{\r\n        (skull.attributes).map( at =>{\r\n            switch (at.trait_type) {\r\n                case 'Background':\r\n                    if (!attributeList[0].value.includes(at.value))\r\n                        attributeList[0].value.push(at.value);\r\n                    break;\r\n                case 'Skull':\r\n                    if (!attributeList[1].value.includes(at.value))\r\n                        attributeList[1].value.push(at.value);\r\n                    break;\r\n                case 'Body':\r\n                    if (!attributeList[2].value.includes(at.value))\r\n                        attributeList[2].value.push(at.value);\r\n                    break;\r\n                case 'Nose':\r\n                    if (!attributeList[3].value.includes(at.value))\r\n                        attributeList[3].value.push(at.value);\r\n                    break;\r\n                case 'Eyes':\r\n                    if (!attributeList[4].value.includes(at.value))\r\n                        attributeList[4].value.push(at.value);\r\n                    break;\r\n                case 'Hat':\r\n                    if (!attributeList[5].value.includes(at.value))\r\n                        attributeList[5].value.push(at.value);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    })\r\n    dispatch(updateState({\r\n        key: \"attributesList\",\r\n        value: attributeList\r\n    }))\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}