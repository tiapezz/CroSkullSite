{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\src\\\\components\\\\Raffle\\\\Raffle.jsx\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport { useDispatch } from \"react-redux\";\nimport store from \"../../redux/store\";\nimport { loadRaffleData } from '../../redux/raffle/raffleActions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHourglassHalf, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { sendNotification, updateUserBalance } from \"../../redux/data/dataActions\";\nimport IpfsHttpClient from \"ipfs-http-client\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport Grave from \"../Navbar/grave.png\";\nimport \"react-quill/dist/quill.snow.css\";\nimport './Raffle.css';\n\nvar Raffle = function Raffle() {\n  var dispatch = useDispatch();\n\n  var _store$getState = store.getState(),\n      blockchain = _store$getState.blockchain,\n      raffle = _store$getState.raffle,\n      data = _store$getState.data;\n\n  var formatEther = blockchain.formatEther,\n      accountAddress = blockchain.accountAddress,\n      croRaffle = blockchain.croRaffle,\n      croSkullsGrave = blockchain.croSkullsGrave;\n  var userGraveBalance = data.userGraveBalance;\n  var isManager = raffle.isManager,\n      raffles = raffle.raffles,\n      allowance = raffle.allowance;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasData = _useState2[0],\n      toggleData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      onlyActive = _useState4[0],\n      toggleActive = _useState4[1];\n\n  useEffect(function () {\n    if (blockchain.croRaffle) dispatch(loadRaffleData());\n  }, [blockchain.croRaffle]);\n\n  var _useState5 = useState({\n    title: '',\n    winners: [],\n    prize: 1,\n    coin: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalState = _useState6[0],\n      setModalState = _useState6[1];\n\n  var _useState7 = useState({\n    display: false,\n    image: 0,\n    type: 0,\n    title: \"Thrid Raffle\",\n    winnersCount: 0,\n    maxParticipants: 0,\n    cost: 0,\n    collectionName: '',\n    collectionAddress: 0,\n    startTimestamp: 0,\n    endTimestamp: 0,\n    description: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      raffleCreator = _useState8[0],\n      setRaffleCreator = _useState8[1];\n\n  var handleFieldChange = function handleFieldChange(event) {\n    var value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event;\n    var name = event.target ? event.target.id : \"description\";\n    var type = event.target ? event.target.type : \"description\";\n\n    if (type === 'date') {\n      value = parseInt(new Date(value).getTime() / 1000);\n    }\n\n    setRaffleCreator(_objectSpread({}, raffleCreator, _defineProperty({}, name, value)));\n  };\n\n  var openModal = function openModal(raf) {\n    setModalState({\n      title: raf.title,\n      winners: raf.winners\n    });\n    var modal = document.getElementById(\"modal-winners\");\n    modal.style.display = \"block\";\n  };\n\n  var closeModal = function closeModal() {\n    var modal = document.getElementById(\"modal-winners\");\n    modal.style.display = \"none\";\n  };\n\n  var DAY_IN_SEC = 60 * 60 * 24;\n  var HUNDRED_DAYS_IN_SEC = 100 * DAY_IN_SEC; //100 * DAY_IN_SEC;\n\n  var formatDate = function formatDate(timestamp) {\n    var tsHours = timestamp / 60 / 60;\n    var days = parseInt(timestamp / DAY_IN_SEC);\n    var hoursDiff = tsHours - days * 24;\n    var hours = parseInt(hoursDiff);\n    var tsMinutes = hoursDiff * 60;\n    var minutes = parseInt(tsMinutes - hours * 60);\n    return {\n      days: days,\n      hours: hours,\n      minutes: minutes\n    };\n  };\n\n  var retrieveImage = function retrieveImage(e) {\n    var data = e.target.files[0];\n    var reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n\n    reader.onloadend = function () {\n      setRaffleCreator(_objectSpread({}, raffleCreator, {\n        image: Buffer(reader.result)\n      }));\n    };\n\n    e.preventDefault();\n  };\n\n  var participateRaffle = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(raffleId) {\n      var participateTx;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              participateTx = croRaffle.participateRaffle(raffleId);\n              _context2.next = 3;\n              return participateTx.then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          console.log(tx);\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context.next = 4;\n                          return tx.wait(1);\n\n                        case 4:\n                          dispatch(sendNotification({\n                            title: \"Success!\",\n                            message: \"You are now participating\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(updateUserBalance());\n                          dispatch(loadRaffleData());\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function participateRaffle(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var increaseAllowance = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var approvalTx;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              approvalTx = croSkullsGrave.increaseAllowance(croRaffle.address, ethers.constants.MaxUint256.toString());\n              _context4.next = 3;\n              return approvalTx.then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx) {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context3.next = 3;\n                          return tx.wait(1);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Approved!\",\n                            message: \"You can now participate\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(loadRaffleData());\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x3) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function increaseAllowance() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var addRaffle = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var newRaffle, client, ipfsImage, rafflefied, descriptionBuffer, ipfsResponse, ipfsPath, addRaffleTx;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              setRaffleCreator(_objectSpread({}, raffleCreator, {\n                startTimestamp: parseInt(new Date().getTime() / 1000)\n              }));\n              _context6.prev = 1;\n              newRaffle = raffleCreator;\n              client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\n\n              if (!raffleCreator.image) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 7;\n              return client.add(raffleCreator.image);\n\n            case 7:\n              ipfsImage = _context6.sent;\n              newRaffle.image = \"ipfs://\".concat(ipfsImage.path);\n\n            case 9:\n              rafflefied = JSON.stringify(raffleCreator);\n              descriptionBuffer = Buffer.from(rafflefied);\n              _context6.next = 13;\n              return client.add(descriptionBuffer);\n\n            case 13:\n              ipfsResponse = _context6.sent;\n\n              if (!(ipfsResponse.path !== \"\")) {\n                _context6.next = 19;\n                break;\n              }\n\n              ipfsPath = \"ipfs://\".concat(ipfsResponse.path);\n              addRaffleTx = croRaffle.addRaffle(raffleCreator.winnersCount, raffleCreator.collectionAddress, ethers.utils.parseEther(raffleCreator.cost), raffleCreator.endTimestamp, ipfsPath, raffleCreator.type * 100, raffleCreator.maxParticipants); //return;\n\n              _context6.next = 19;\n              return addRaffleTx.then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tx) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context5.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Raffle Created!\",\n                            message: \"Raffle Created Succesful\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          setRaffleCreator(_objectSpread({}, raffleCreator, {\n                            display: false\n                          }));\n                          dispatch(loadRaffleData());\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x4) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n\n            case 19:\n              _context6.next = 24;\n              break;\n\n            case 21:\n              _context6.prev = 21;\n              _context6.t0 = _context6[\"catch\"](1);\n              console.log(_context6.t0.message);\n\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 21]]);\n    }));\n\n    return function addRaffle() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var generateWinners = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(raffleId) {\n      var generateTx;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              generateTx = croRaffle.generateWinners(raffleId);\n              _context8.next = 3;\n              return generateTx.then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tx) {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          console.log(tx);\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"info\"\n                          }));\n                          _context7.next = 4;\n                          return tx.wait(1);\n\n                        case 4:\n                          dispatch(sendNotification({\n                            title: \"Generated!\",\n                            message: \"Winners generated succesful\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(loadRaffleData());\n\n                        case 6:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x6) {\n                  return _ref8.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function generateWinners(_x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    id: \"modal-winners\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-w-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"raffle-head sk-flex\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }, modalState.title), /*#__PURE__*/React.createElement(\"span\", {\n    class: \"close-btn\",\n    onClick: function onClick() {\n      closeModal();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, \"Prize\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  }, \"Address\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"winners-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, modalState.winners.map(function (winner, i) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-header\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }\n    }, i + 1), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, winner));\n  }))))), raffleCreator.display && isManager ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"story-modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }, \"Raffle Image\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    onChange: retrieveImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"endTimestamp\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 17\n    }\n  }, \"Finish date\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"endTimestamp\",\n    type: \"date\",\n    name: \"endTimestamp\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"type\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  }, \"Fast Raffle ( 0 = deactivated )\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"type\",\n    type: \"number\",\n    name: \"type\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"maxParticipants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }\n  }, \"Max Participants ( 0 = deactivated )\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"maxParticipants\",\n    type: \"number\",\n    name: \"maxParticipants\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"maxParticipants\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }\n  }, \"Ticket Cost\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cost\",\n    type: \"number\",\n    name: \"cost\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"winnersCount\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, \"Winners ( max 10 )\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"winnersCount\",\n    type: \"number\",\n    name: \"winnersCount\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"metadata\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"close-icon\",\n    onClick: function onClick() {\n      setRaffleCreator(_objectSpread({}, raffleCreator, {\n        display: false\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 19\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      fontSize: '18px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 19\n    }\n  }, \"Create a new Raffle\"), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"collectionName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }, \"Collection Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"collectionName\",\n    type: \"text\",\n    name: \"collectionName\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"collectionAddress\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, \"Collection Address\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"collectionAddress\",\n    type: \"text\",\n    name: \"collectionAddress\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 19\n    }\n  }, \"Raffle Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"title\",\n    type: \"text\",\n    name: \"title\",\n    onChange: handleFieldChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 19\n    }\n  }, \"Raffle Description\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflowY: 'scroll'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ReactQuill, {\n    className: \"description-editor\",\n    modules: modules,\n    formats: formats,\n    value: raffleCreator.description,\n    onChange: handleFieldChange,\n    placeholder: \"Write something awesome...\",\n    name: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pay-action\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"skull-button save-grave\",\n    onClick: function onClick() {\n      return addRaffle();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 21\n    }\n  }, \"Add Raffle\"))))) : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box sk-column sk-raffle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sk-flex sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }\n  }, \"Bonesville Raffle\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tooltip-toggle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faQuestionCircle,\n    className: \"tooltip-icon\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sk-tooltip sk-tooltip-full\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 17\n    }\n  }, \"There are two types of raffles: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 51\n    }\n  }, \"Normal\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 69\n    }\n  }, \"Fast\"), \" Raffle.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 19\n    }\n  }, \"Normal\"), \" raffle has a maximum number of 10 prizes, a maximum number of participants and a time limit for entry. Once the maximum number of participants, or the time limit is reached, the smart contract will start a random draw and choose the winning wallets at random.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 19\n    }\n  }, \"Fast\"), \": The crazy raffle has a maximum number of 10 prizes, and no limit to number of participants. Each time a user purchases a raffle ticket, the time limit for the draw will be reduced by 2% of the remaining time for each new participant. (With a lot of participation, the raffle will end quickly!). The reduction % per new participants can vary. Once the time is up, the smart contract will draw the winners through a random draw, choosing the winning wallets at random. 1 prize per wallet per raffle.\"))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: onlyActive,\n    onChange: function onChange() {\n      return toggleActive(!onlyActive);\n    },\n    className: \"only-active\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 15\n    }\n  }), \"Only Active\")), isManager ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"skull-button\",\n    onClick: function onClick() {\n      return setRaffleCreator(_objectSpread({}, raffleCreator, {\n        display: true\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 15\n    }\n  }, \"Add Raffle\") : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-raffle-list sk-flex sk-column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 11\n    }\n  }, raffles && raffles.length > 0 ? raffles.map(function (raf) {\n    var type = raf.type,\n        title = raf.title,\n        winnersCount = raf.winnersCount,\n        maxParticipants = raf.maxParticipants,\n        cost = raf.cost,\n        image = raf.image,\n        isParticipant = raf.isParticipant,\n        endTimestamp = raf.endTimestamp,\n        description = raf.description,\n        participants = raf.participants,\n        winners = raf.winners,\n        id = raf.id;\n    var currentTimestamp = parseInt(new Date().getTime() / 1000);\n    if (onlyActive && (winners.length > 0 || endTimestamp < currentTimestamp)) return;\n    var raffleDuration = currentTimestamp < endTimestamp ? endTimestamp - currentTimestamp : 0;\n    var raffleDurationFormatted = formatDate(raffleDuration);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sk-raffle-item sk-flex sk-row\",\n      key: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wd-22\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: String(image).replace('ipfs://', 'https://ipfs.infura.io/ipfs/'),\n      className: \"img-raffle\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-box-1 wd-44 sk-flex sk-column\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sk-raffle-details\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 25\n      }\n    }, \"\".concat(type > 0 ? \"\\uD83D\\uDD25 Fast Raffle \".concat(type, \"%\") : '☠️ Normal Raffle', \" | \\uD83C\\uDFC6 \").concat(winnersCount, \" Winners | \\uD83E\\uDD3E\\u200D\\u2642\\uFE0F \").concat(maxParticipants > 0 ? \"\".concat(participants, \"/\").concat(maxParticipants) : participants, \" Participants\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 25\n      }\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: description.replace('<p><br></p>', '').replace('<p><br></p>', '')\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-box-2 wd-33\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 23\n      }\n    }, winners.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 33\n      }\n    }, \"Cost: \", cost, /*#__PURE__*/React.createElement(\"img\", {\n      src: Grave,\n      className: \"skull-icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 33\n      }\n    }, \"Finished \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 48\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button winners-button\",\n      onClick: function onClick() {\n        openModal(raf);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 31\n      }\n    }, \"View Winners\")) : !winners.length && endTimestamp < currentTimestamp ? isManager ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 35\n      }\n    }, \"End \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button participated-button\",\n      onClick: function onClick() {\n        return generateWinners(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 33\n      }\n    }, \"Generate Winners\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 35\n      }\n    }, \"End \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button participated-button\",\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 33\n      }\n    }, \"Finished\"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 33\n      }\n    }, \"A community manage will Generate the Winners, please wait...\")) : isParticipant ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 33\n      }\n    }, \"Cost: \", cost, /*#__PURE__*/React.createElement(\"img\", {\n      src: Grave,\n      className: \"skull-icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 33\n      }\n    }, \"Ending in: \", raffleDurationFormatted.days, \"d \", raffleDurationFormatted.hours, \"h \", raffleDurationFormatted.minutes, \"m \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 150\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button participated-button\",\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 31\n      }\n    }, \"Already Participated\")) : userGraveBalance && ethers.utils.parseEther(cost).gte(ethers.utils.parseEther(userGraveBalance)) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 33\n      }\n    }, \"Cost: \", cost, /*#__PURE__*/React.createElement(\"img\", {\n      src: Grave,\n      className: \"skull-icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 33\n      }\n    }, \"Ending in: \", raffleDurationFormatted.days, \"d \", raffleDurationFormatted.hours, \"h \", raffleDurationFormatted.minutes, \"m \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 150\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button buy-button\",\n      onClick: function onClick() {\n        return window.open('https://mm.finance/swap?outputCurrency=0x9885488cD6864DF90eeBa6C5d07B35f08CEb05e9');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 31\n      }\n    }, \"Buy Grave\")) : ethers.utils.parseEther(allowance).gte(ethers.utils.parseEther(cost)) ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"raffle-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 33\n      }\n    }, \"Cost: \", cost, /*#__PURE__*/React.createElement(\"img\", {\n      src: Grave,\n      className: \"skull-icon\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 33\n      }\n    }, \"Ending in: \", raffleDurationFormatted.days, \"d \", raffleDurationFormatted.hours, \"h \", raffleDurationFormatted.minutes, \"m \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faHourglassHalf,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 150\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button participate-button\",\n      onClick: function onClick() {\n        participateRaffle(raf.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 31\n      }\n    }, \"Participate\")) : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skull-button winners-button\",\n      onClick: function onClick() {\n        increaseAllowance();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 29\n      }\n    }, \"Approve\")));\n  }) : ''))));\n};\n\nvar modules = {\n  toolbar: [[{\n    'header': [1, 2, false]\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }, {\n    'indent': '-1'\n  }, {\n    'indent': '+1'\n  }], ['clean']]\n};\nvar formats = ['header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'list', 'bullet', 'indent'];\nexport default Raffle;","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/components/Raffle/Raffle.jsx"],"names":["React","useEffect","useState","ethers","useDispatch","store","loadRaffleData","FontAwesomeIcon","faHourglassHalf","faQuestionCircle","sendNotification","updateUserBalance","IpfsHttpClient","ReactQuill","Grave","Raffle","dispatch","getState","blockchain","raffle","data","formatEther","accountAddress","croRaffle","croSkullsGrave","userGraveBalance","isManager","raffles","allowance","hasData","toggleData","onlyActive","toggleActive","title","winners","prize","coin","modalState","setModalState","display","image","type","winnersCount","maxParticipants","cost","collectionName","collectionAddress","startTimestamp","endTimestamp","description","raffleCreator","setRaffleCreator","handleFieldChange","event","value","target","replace","name","id","parseInt","Date","getTime","openModal","raf","modal","document","getElementById","style","closeModal","DAY_IN_SEC","HUNDRED_DAYS_IN_SEC","formatDate","timestamp","tsHours","days","hoursDiff","hours","tsMinutes","minutes","retrieveImage","e","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","preventDefault","participateRaffle","raffleId","participateTx","then","tx","console","log","message","wait","increaseAllowance","approvalTx","address","constants","MaxUint256","toString","addRaffle","newRaffle","client","URL","add","ipfsImage","path","rafflefied","JSON","stringify","descriptionBuffer","from","ipfsResponse","ipfsPath","addRaffleTx","utils","parseEther","generateWinners","generateTx","map","winner","i","fontSize","overflowY","modules","formats","length","isParticipant","participants","currentTimestamp","raffleDuration","raffleDurationFormatted","String","__html","gte","open","toolbar"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from 'ethers';\r\nimport { useDispatch } from \"react-redux\";\r\nimport store from \"../../redux/store\";\r\nimport { loadRaffleData } from '../../redux/raffle/raffleActions';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHourglassHalf, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { sendNotification, updateUserBalance } from \"../../redux/data/dataActions\";\r\nimport IpfsHttpClient from \"ipfs-http-client\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport Grave from \"../Navbar/grave.png\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport './Raffle.css';\r\n\r\nconst Raffle = () => {\r\n  let dispatch = useDispatch()\r\n  let { blockchain, raffle, data } = store.getState()\r\n  let { formatEther, accountAddress, croRaffle, croSkullsGrave } = blockchain\r\n  let { userGraveBalance } = data\r\n  let { isManager, raffles, allowance } = raffle\r\n  const [hasData, toggleData] = useState(false)\r\n  const [onlyActive, toggleActive] = useState(false)\r\n\r\n  useEffect( () => {\r\n    if(blockchain.croRaffle )\r\n      dispatch(loadRaffleData())\r\n  }, [blockchain.croRaffle])\r\n\r\n  const [modalState, setModalState] = useState({\r\n    title: '',\r\n    winners: [],\r\n    prize: 1,\r\n    coin: ''\r\n  });\r\n\r\n  const [raffleCreator, setRaffleCreator] = useState( {\r\n    display: false,\r\n    image: 0,\r\n    type: 0,\r\n    title: \"Thrid Raffle\",\r\n    winnersCount: 0,\r\n    maxParticipants: 0,\r\n    cost: 0,\r\n    collectionName: '',\r\n    collectionAddress: 0,\r\n    startTimestamp: 0,\r\n    endTimestamp: 0,\r\n    description: '',\r\n  } )\r\n\r\n  const handleFieldChange = ( event ) => {\r\n    let value = event.target ? event.target.value.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\") : event\r\n    let name = event.target ? event.target.id : \"description\"\r\n    let type = event.target ? event.target.type : \"description\"\r\n    if( type === 'date' ){\r\n      value = parseInt( new Date( value ).getTime() / 1000 )\r\n    }\r\n    setRaffleCreator( {\r\n      ...raffleCreator,\r\n      [name]: value\r\n    } )\r\n  }\r\n\r\n\r\n  const openModal = (raf) => {\r\n    setModalState({\r\n      title: raf.title,\r\n      winners: raf.winners\r\n    })\r\n    let modal = document.getElementById(\"modal-winners\");\r\n    modal.style.display = \"block\";\r\n  }\r\n  const closeModal = () => {\r\n    let modal = document.getElementById(\"modal-winners\");\r\n    modal.style.display = \"none\";\r\n  }\r\n\r\n  const DAY_IN_SEC = 60 * 60 * 24;\r\n  const HUNDRED_DAYS_IN_SEC = 100 * DAY_IN_SEC//100 * DAY_IN_SEC;\r\n  const formatDate = (timestamp) => {\r\n    let tsHours = timestamp / 60 / 60\r\n    let days = parseInt(timestamp / DAY_IN_SEC)\r\n    let hoursDiff = tsHours - (days * 24)\r\n    let hours = parseInt(hoursDiff)\r\n    let tsMinutes = hoursDiff * 60\r\n    let minutes = parseInt(tsMinutes - (hours * 60))\r\n    return {\r\n      days,\r\n      hours,\r\n      minutes\r\n    }\r\n  }\r\n\r\n  const retrieveImage = (e) => {\r\n    const data = e.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(data);\r\n    reader.onloadend = () => {\r\n      setRaffleCreator({\r\n        ...raffleCreator,\r\n        image: Buffer(reader.result)\r\n      });\r\n    }\r\n    e.preventDefault();  \r\n  }\r\n\r\n\r\n  const participateRaffle = async (raffleId) => {\r\n    let participateTx = croRaffle.participateRaffle(\r\n      raffleId\r\n    )\r\n    await participateTx.then(\r\n      async (tx) => {\r\n        console.log( tx )\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmation...',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(1)\r\n        dispatch(sendNotification({\r\n          title: `Success!`,\r\n          message: `You are now participating`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch(updateUserBalance())\r\n        dispatch(loadRaffleData())\r\n      }\r\n    )\r\n  }\r\n\r\n  const increaseAllowance = async () => {\r\n    let approvalTx = croSkullsGrave.increaseAllowance(\r\n      croRaffle.address,\r\n      ethers.constants.MaxUint256.toString()\r\n    )\r\n    await approvalTx.then(\r\n      async (tx) => {\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmation...',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(1)\r\n        dispatch(sendNotification({\r\n          title: `Approved!`,\r\n          message: `You can now participate`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch(loadRaffleData())\r\n      }\r\n    )\r\n  }\r\n\r\n  const addRaffle = async ( ) => {\r\n    setRaffleCreator({\r\n      ...raffleCreator,\r\n      startTimestamp: parseInt( new Date( ).getTime() / 1000 ),\r\n    })\r\n    try {\r\n      let newRaffle = raffleCreator;\r\n      const client = IpfsHttpClient(new URL('https://ipfs.infura.io:5001/api/v0'));\r\n      if( raffleCreator.image ){\r\n        const ipfsImage = await client.add(raffleCreator.image);\r\n        newRaffle.image = `ipfs://${ipfsImage.path}`\r\n      }\r\n      let rafflefied = JSON.stringify(raffleCreator)\r\n      let descriptionBuffer = Buffer.from(rafflefied)\r\n      const ipfsResponse = await client.add(descriptionBuffer);\r\n      if( ipfsResponse.path !== \"\" ){\r\n          let ipfsPath = `ipfs://${ipfsResponse.path}`\r\n          let addRaffleTx = croRaffle.addRaffle(\r\n            raffleCreator.winnersCount,\r\n            raffleCreator.collectionAddress,\r\n            ethers.utils.parseEther(raffleCreator.cost),\r\n            raffleCreator.endTimestamp,\r\n            ipfsPath,\r\n            raffleCreator.type * 100,\r\n            raffleCreator.maxParticipants\r\n          )\r\n            //return;\r\n            await addRaffleTx.then(\r\n              async (tx) => {\r\n                dispatch(sendNotification({\r\n                  title: `Transaction Sent`,\r\n                  message: 'Waiting for confirmation...',\r\n                  tx,\r\n                  type: \"info\"\r\n                }))\r\n                await tx.wait(2)\r\n                dispatch(sendNotification({\r\n                  title: `Raffle Created!`,\r\n                  message: `Raffle Created Succesful`,\r\n                  tx,\r\n                  type: \"success\"\r\n                }))\r\n                setRaffleCreator({\r\n                  ...raffleCreator,\r\n                  display: false\r\n                })\r\n                dispatch(loadRaffleData())\r\n              }\r\n          )\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  const generateWinners = async (raffleId) => {\r\n    let generateTx = croRaffle.generateWinners(\r\n      raffleId\r\n    )\r\n    await generateTx.then(\r\n      async (tx) => {\r\n        console.log( tx )\r\n        dispatch(sendNotification({\r\n          title: `Transaction Sent`,\r\n          message: 'Waiting for confirmation...',\r\n          tx,\r\n          type: \"info\"\r\n        }))\r\n        await tx.wait(1)\r\n        dispatch(sendNotification({\r\n          title: `Generated!`,\r\n          message: `Winners generated succesful`,\r\n          tx,\r\n          type: \"success\"\r\n        }))\r\n        dispatch(loadRaffleData())\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"modal\" id=\"modal-winners\">\r\n        <div className=\"modal-w-content\">\r\n          <div className=\"sk-box\">\r\n            <div class=\"raffle-head sk-flex\">\r\n              <h1>{modalState.title}</h1>\r\n              <span class=\"close-btn\" onClick={() => { closeModal() }}>\r\n                &times;\r\n              </span>\r\n            </div>\r\n            <div className=\"modal-header\"> \r\n              <h3>Prize</h3>\r\n              <span>\r\n                <h3>Address</h3>\r\n              </span>\r\n            </div>\r\n            <div className=\"winners-list\">\r\n            {\r\n              modalState.winners.map((winner,i) => {\r\n                return (\r\n                  <div className=\"modal-header\">\r\n                    <h3>{i+1}</h3>\r\n                    <span className=\"address\">{winner}</span>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        {\r\n          raffleCreator.display && isManager ? (\r\n            <div className=\"story-modal\">\r\n              <div \r\n                className=\"sk-box container\" \r\n              >\r\n              <div className=\"image\">\r\n                <label for=\"image\">Raffle Image</label>\r\n                <input type=\"file\" name=\"image\" onChange={retrieveImage} />\r\n                <label for=\"endTimestamp\">Finish date</label>\r\n                <input\r\n                  id=\"endTimestamp\"\r\n                  type=\"date\"\r\n                  name=\"endTimestamp\"\r\n                  onChange={handleFieldChange}\r\n                />\r\n                <label htmlFor=\"type\">Fast Raffle ( 0 = deactivated )</label>\r\n                <input\r\n                  id=\"type\"\r\n                  type=\"number\"\r\n                  name=\"type\"\r\n                  onChange={handleFieldChange}\r\n                />\r\n                <label htmlFor=\"maxParticipants\">Max Participants ( 0 = deactivated )</label>\r\n                <input\r\n                  id=\"maxParticipants\"\r\n                  type=\"number\"\r\n                  name=\"maxParticipants\"\r\n                  onChange={handleFieldChange}\r\n                />\r\n                <label htmlFor=\"maxParticipants\">Ticket Cost</label>\r\n                <input\r\n                  id=\"cost\"\r\n                  type=\"number\"\r\n                  name=\"cost\"\r\n                  onChange={handleFieldChange}\r\n                />\r\n                <label htmlFor=\"winnersCount\">Winners ( max 10 )</label>\r\n                <input\r\n                  id=\"winnersCount\"\r\n                  type=\"number\"\r\n                  name=\"winnersCount\"\r\n                  onChange={handleFieldChange}\r\n                />\r\n              </div>\r\n                <div className=\"metadata\">\r\n                  <div\r\n                    className=\"close-icon\"\r\n                    onClick={ () => {\r\n                      setRaffleCreator({\r\n                        ...raffleCreator,\r\n                        display: false\r\n                      })\r\n                    }}\r\n                  >\r\n                    Back\r\n                  </div>\r\n                  <h2 style={{ fontSize: '18px' }}>Create a new Raffle</h2>\r\n                  <label for=\"collectionName\">Collection Name</label>\r\n                  <input\r\n                    id=\"collectionName\"\r\n                    type=\"text\"\r\n                    name=\"collectionName\"\r\n                    onChange={handleFieldChange}\r\n                  />\r\n                  <label for=\"collectionAddress\">Collection Address</label>\r\n                  <input\r\n                    id=\"collectionAddress\"\r\n                    type=\"text\"\r\n                    name=\"collectionAddress\"\r\n                    onChange={handleFieldChange}\r\n                  />\r\n                  <label for=\"title\">Raffle Title</label>\r\n                  <input\r\n                    id=\"title\"\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    onChange={handleFieldChange}\r\n                  />\r\n                  <label for=\"description\">Raffle Description</label>\r\n                  <div\r\n                    style={{ overflowY: 'scroll'}}\r\n                  >\r\n                    <ReactQuill\r\n                      className=\"description-editor\"\r\n                      modules={modules}\r\n                      formats={formats}\r\n                      value={raffleCreator.description}\r\n                      onChange={handleFieldChange}\r\n                      placeholder={\"Write something awesome...\"}\r\n                      name=\"description\"\r\n                    />\r\n                  </div>\r\n                  <div\r\n                    className=\"pay-action\"\r\n                  >\r\n                    <button\r\n                      className=\"skull-button save-grave\"\r\n                      onClick={ () => addRaffle() }\r\n                    >\r\n                      Add Raffle\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : \r\n          ('')\r\n        }\r\n      <div className=\"sk-container sk-row\">\r\n        <div className=\"sk-box sk-column sk-raffle\">\r\n          <span className=\"sk-flex sk-row\">\r\n            <h3>Bonesville Raffle</h3>\r\n            <div className=\"tooltip-toggle\">\r\n              <FontAwesomeIcon \r\n                  icon={faQuestionCircle} \r\n                  className=\"tooltip-icon\"\r\n              /> \r\n              <span className=\"sk-tooltip sk-tooltip-full\">\r\n                <p>\r\n                  There are two types of raffles: <b>Normal</b> and <b>Fast</b> Raffle.\r\n                </p>\r\n                <p>\r\n                  <b>Normal</b> raffle has a maximum number of 10 prizes, a maximum number of participants and a time limit for entry. Once the maximum number of participants, or the time limit is reached, the smart contract will start a random draw and choose the winning wallets at random.\r\n                </p>\r\n                <p>\r\n                  <b>Fast</b>: The crazy raffle has a maximum number of 10 prizes, and no limit to number of participants. Each time a user purchases a raffle ticket, the time limit for the draw will be reduced by 2% of the remaining time for each new participant. (With a lot of participation, the raffle will end quickly!). The reduction % per new participants can vary. Once the time is up, the smart contract will draw the winners through a random draw, choosing the winning wallets at random. 1 prize per wallet per raffle.\r\n                </p>\r\n              </span>\r\n            </div>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={onlyActive}\r\n                onChange={ () => toggleActive(!onlyActive)}\r\n                className=\"only-active\"\r\n              />\r\n              Only Active\r\n            </label>\r\n          </span>\r\n            {\r\n              isManager ? (\r\n              <button \r\n                className=\"skull-button\"\r\n                onClick={ () => \r\n                  setRaffleCreator({\r\n                    ...raffleCreator,\r\n                    display: true\r\n                  })\r\n                }\r\n              >\r\n                Add Raffle\r\n              </button>\r\n              ) : ('')\r\n            }\r\n          <div className=\"sk-raffle-list sk-flex sk-column\">\r\n            { raffles && raffles.length > 0 ?\r\n              raffles.map( raf => {\r\n                let {\r\n                  type, \r\n                  title, \r\n                  winnersCount, \r\n                  maxParticipants, \r\n                  cost,\r\n                  image,\r\n                  isParticipant,\r\n                  endTimestamp, \r\n                  description,\r\n                  participants,\r\n                  winners,\r\n                  id\r\n                } = raf\r\n                let currentTimestamp = parseInt( new Date( ).getTime() / 1000 )\r\n                if(  onlyActive && ( winners.length > 0 || endTimestamp < currentTimestamp ) ) return\r\n                let raffleDuration = currentTimestamp < endTimestamp ? endTimestamp - currentTimestamp : 0\r\n                let raffleDurationFormatted = formatDate(raffleDuration)\r\n                return (\r\n                  <div className=\"sk-raffle-item sk-flex sk-row\" key={id} >\r\n                    <div className=\"wd-22\">\r\n                      <img src={String(image).replace('ipfs://', 'https://ipfs.infura.io/ipfs/')} className=\"img-raffle\" />\r\n                    </div>\r\n                    <div className=\"raffle-box-1 wd-44 sk-flex sk-column\">\r\n                        <span className=\"sk-raffle-details\">\r\n                          { `${type > 0 ? `🔥 Fast Raffle ${type}%` : '☠️ Normal Raffle'} | 🏆 ${winnersCount} Winners | 🤾‍♂️ ${ maxParticipants > 0 ? `${participants}/${maxParticipants}` : participants } Participants` }\r\n                        </span>\r\n                        <h3>{title}</h3>\r\n                        <div\r\n                          dangerouslySetInnerHTML={{ __html: description.replace('<p><br></p>', '').replace('<p><br></p>', '') }}\r\n                        >\r\n                        </div>\r\n                    </div>\r\n                      <div className=\"raffle-box-2 wd-33\">\r\n                        {\r\n                          winners.length ? (\r\n                            <>\r\n                              <div className=\"raffle-info\">\r\n                                <span>Cost: { cost }<img src={Grave} className=\"skull-icon\" /></span>\r\n                                <span>Finished <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                              </div>\r\n                              <button\r\n                                className=\"skull-button winners-button\" \r\n                                onClick={ () => { openModal(raf) }}\r\n                              >\r\n                                View Winners\r\n                              </button>\r\n                            </>\r\n                          ) : ! winners.length && endTimestamp < currentTimestamp ? (\r\n                              isManager ? (\r\n                              <>\r\n                                <div className=\"raffle-info\">\r\n                                  <span>End <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                                </div>\r\n                                <button\r\n                                  className=\"skull-button participated-button\"\r\n                                  onClick={ () => generateWinners(id)}\r\n                                >\r\n                                  Generate Winners\r\n                                </button>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <div className=\"raffle-info\">\r\n                                  <span>End <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                                </div>\r\n                                <button\r\n                                  className=\"skull-button participated-button\"\r\n                                  disabled\r\n                                >\r\n                                  Finished\r\n                                </button>\r\n                                <span>A community manage will Generate the Winners, please wait...</span>\r\n                              </>\r\n                            )\r\n                          ) : isParticipant ? (\r\n                            <>\r\n                              <div className=\"raffle-info\">\r\n                                <span>Cost: { cost }<img src={Grave} className=\"skull-icon\" /></span>\r\n                                <span>Ending in: {raffleDurationFormatted.days}d {raffleDurationFormatted.hours}h {raffleDurationFormatted.minutes}m <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                              </div>\r\n                              <button\r\n                                className=\"skull-button participated-button\"\r\n                                disabled\r\n                              >\r\n                                Already Participated\r\n                              </button>\r\n                            </>\r\n                          ) : userGraveBalance && ethers.utils.parseEther(cost).gte(ethers.utils.parseEther(userGraveBalance)) ? (\r\n                            <>\r\n                              <div className=\"raffle-info\">\r\n                                <span>Cost: { cost }<img src={Grave} className=\"skull-icon\" /></span>\r\n                                <span>Ending in: {raffleDurationFormatted.days}d {raffleDurationFormatted.hours}h {raffleDurationFormatted.minutes}m <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                              </div>\r\n                              <button \r\n                                className=\"skull-button buy-button\" \r\n                                onClick={\r\n                                  () => window.open('https://mm.finance/swap?outputCurrency=0x9885488cD6864DF90eeBa6C5d07B35f08CEb05e9')\r\n                                }\r\n                              >\r\n                                Buy Grave\r\n                              </button>\r\n                            </>\r\n                          ) : ethers.utils.parseEther(allowance).gte(ethers.utils.parseEther(cost)) ? (\r\n                            <>\r\n                              <div className=\"raffle-info\">\r\n                                <span>Cost: { cost }<img src={Grave} className=\"skull-icon\" /></span>\r\n                                <span>Ending in: {raffleDurationFormatted.days}d {raffleDurationFormatted.hours}h {raffleDurationFormatted.minutes}m <FontAwesomeIcon icon={faHourglassHalf} /></span>\r\n                              </div>\r\n                              <button \r\n                                className=\"skull-button participate-button\" \r\n                                onClick={ () => { participateRaffle(raf.id) } }\r\n                              >\r\n                                Participate\r\n                              </button>\r\n                            </>\r\n                          ) : (\r\n                            <button\r\n                              className=\"skull-button winners-button\" \r\n                              onClick={ () => { increaseAllowance() } }\r\n                            >\r\n                              Approve\r\n                            </button>\r\n                          )\r\n                        }\r\n                      </div>\r\n                  </div>\r\n                )\r\n              }) :\r\n                ('')\r\n              }\r\n          </div>\r\n        </div>\r\n          </div>\r\n    </>\r\n  )\r\n}\r\n\r\nlet modules = {\r\n  toolbar: [\r\n    [{ 'header': [1, 2, false] }],\r\n    ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n    [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n    ['clean']\r\n  ],\r\n};\r\n\r\nlet formats = [\r\n  'header',\r\n  'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n  'list', 'bullet', 'indent',\r\n];\r\n\r\nexport default Raffle;\r\n"]},"metadata":{},"sourceType":"module"}