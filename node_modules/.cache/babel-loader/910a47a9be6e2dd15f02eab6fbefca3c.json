{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildQuery = exports.SubscriptionEventType = exports.Method = void 0;\n/**\n * RPC methods as documented in https://docs.tendermint.com/master/rpc/\n *\n * Enum raw value must match the spelling in the \"shell\" example call (snake_case)\n */\n\nvar Method;\n\n(function (Method) {\n  Method[\"AbciInfo\"] = \"abci_info\";\n  Method[\"AbciQuery\"] = \"abci_query\";\n  Method[\"Block\"] = \"block\";\n  /** Get block headers for minHeight <= height <= maxHeight. */\n\n  Method[\"Blockchain\"] = \"blockchain\";\n  Method[\"BlockResults\"] = \"block_results\";\n  Method[\"BroadcastTxAsync\"] = \"broadcast_tx_async\";\n  Method[\"BroadcastTxSync\"] = \"broadcast_tx_sync\";\n  Method[\"BroadcastTxCommit\"] = \"broadcast_tx_commit\";\n  Method[\"Commit\"] = \"commit\";\n  Method[\"Genesis\"] = \"genesis\";\n  Method[\"Health\"] = \"health\";\n  Method[\"Status\"] = \"status\";\n  Method[\"Subscribe\"] = \"subscribe\";\n  Method[\"Tx\"] = \"tx\";\n  Method[\"TxSearch\"] = \"tx_search\";\n  Method[\"Validators\"] = \"validators\";\n  Method[\"Unsubscribe\"] = \"unsubscribe\";\n})(Method = exports.Method || (exports.Method = {}));\n/**\n * Raw values must match the tendermint event name\n *\n * @see https://godoc.org/github.com/tendermint/tendermint/types#pkg-constants\n */\n\n\nvar SubscriptionEventType;\n\n(function (SubscriptionEventType) {\n  SubscriptionEventType[\"NewBlock\"] = \"NewBlock\";\n  SubscriptionEventType[\"NewBlockHeader\"] = \"NewBlockHeader\";\n  SubscriptionEventType[\"Tx\"] = \"Tx\";\n})(SubscriptionEventType = exports.SubscriptionEventType || (exports.SubscriptionEventType = {}));\n\nfunction buildQuery(components) {\n  var tags = components.tags ? components.tags : [];\n  var tagComponents = tags.map(function (tag) {\n    return \"\".concat(tag.key, \"='\").concat(tag.value, \"'\");\n  });\n  var rawComponents = components.raw ? [components.raw] : [];\n  return [].concat(_toConsumableArray(tagComponents), rawComponents).join(\" AND \");\n}\n\nexports.buildQuery = buildQuery;","map":null,"metadata":{},"sourceType":"script"}