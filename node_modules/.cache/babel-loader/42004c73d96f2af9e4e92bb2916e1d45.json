{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar keys_1 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\n\nvar keys_2 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\n\nvar any_1 = require(\"cosmjs-types/google/protobuf/any\");\n\nfunction encodePubkey(pubkey) {\n  if (amino_1.isSecp256k1Pubkey(pubkey)) {\n    var pubkeyProto = keys_2.PubKey.fromPartial({\n      key: encoding_1.fromBase64(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if (amino_1.isMultisigThresholdPubkey(pubkey)) {\n    var _pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(_pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(\"Pubkey type \".concat(pubkey.type, \" not recognized\"));\n  }\n}\n\nexports.encodePubkey = encodePubkey;\n\nfunction decodeSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        var _keys_2$PubKey$decode = keys_2.PubKey.decode(pubkey.value),\n            key = _keys_2$PubKey$decode.key;\n\n        return amino_1.encodeSecp256k1Pubkey(key);\n      }\n\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized as single public key type\"));\n  }\n}\n\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        return decodeSinglePubkey(pubkey);\n      }\n\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        var _keys_1$LegacyAminoPu = keys_1.LegacyAminoPubKey.decode(pubkey.value),\n            threshold = _keys_1$LegacyAminoPu.threshold,\n            publicKeys = _keys_1$LegacyAminoPu.publicKeys;\n\n        var out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(decodeSinglePubkey)\n          }\n        };\n        return out;\n      }\n\n    default:\n      throw new Error(\"Pubkey type_url \".concat(pubkey.typeUrl, \" not recognized\"));\n  }\n}\n\nexports.decodePubkey = decodePubkey;","map":null,"metadata":{},"sourceType":"script"}