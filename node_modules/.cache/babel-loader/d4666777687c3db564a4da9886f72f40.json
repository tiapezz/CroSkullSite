{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _toConsumableArray = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\n\nvar amino_1 = require(\"@cosmjs/amino\");\n\nvar encoding_1 = require(\"@cosmjs/encoding\");\n\nvar math_1 = require(\"@cosmjs/math\");\n\nvar proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nvar tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nvar utils_1 = require(\"@cosmjs/utils\");\n\nvar tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\n\nvar tx_2 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\n\nvar tx_3 = require(\"cosmjs-types/cosmos/gov/v1beta1/tx\");\n\nvar tx_4 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\n\nvar signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nvar tx_5 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nvar tx_6 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\n\nvar tx_7 = require(\"cosmjs-types/ibc/core/channel/v1/tx\");\n\nvar tx_8 = require(\"cosmjs-types/ibc/core/client/v1/tx\");\n\nvar tx_9 = require(\"cosmjs-types/ibc/core/connection/v1/tx\");\n\nvar long_1 = __importDefault(require(\"long\"));\n\nvar aminotypes_1 = require(\"./aminotypes\");\n\nvar stargateclient_1 = require(\"./stargateclient\");\n\nexports.defaultRegistryTypes = [[\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend], [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", tx_2.MsgFundCommunityPool], [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_2.MsgSetWithdrawAddress], [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_2.MsgWithdrawDelegatorReward], [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", tx_2.MsgWithdrawValidatorCommission], [\"/cosmos.gov.v1beta1.MsgDeposit\", tx_3.MsgDeposit], [\"/cosmos.gov.v1beta1.MsgSubmitProposal\", tx_3.MsgSubmitProposal], [\"/cosmos.gov.v1beta1.MsgVote\", tx_3.MsgVote], [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_4.MsgBeginRedelegate], [\"/cosmos.staking.v1beta1.MsgCreateValidator\", tx_4.MsgCreateValidator], [\"/cosmos.staking.v1beta1.MsgDelegate\", tx_4.MsgDelegate], [\"/cosmos.staking.v1beta1.MsgEditValidator\", tx_4.MsgEditValidator], [\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_4.MsgUndelegate], [\"/ibc.core.channel.v1.MsgChannelOpenInit\", tx_7.MsgChannelOpenInit], [\"/ibc.core.channel.v1.MsgChannelOpenTry\", tx_7.MsgChannelOpenTry], [\"/ibc.core.channel.v1.MsgChannelOpenAck\", tx_7.MsgChannelOpenAck], [\"/ibc.core.channel.v1.MsgChannelOpenConfirm\", tx_7.MsgChannelOpenConfirm], [\"/ibc.core.channel.v1.MsgChannelCloseInit\", tx_7.MsgChannelCloseInit], [\"/ibc.core.channel.v1.MsgChannelCloseConfirm\", tx_7.MsgChannelCloseConfirm], [\"/ibc.core.channel.v1.MsgRecvPacket\", tx_7.MsgRecvPacket], [\"/ibc.core.channel.v1.MsgTimeout\", tx_7.MsgTimeout], [\"/ibc.core.channel.v1.MsgTimeoutOnClose\", tx_7.MsgTimeoutOnClose], [\"/ibc.core.channel.v1.MsgAcknowledgement\", tx_7.MsgAcknowledgement], [\"/ibc.core.client.v1.MsgCreateClient\", tx_8.MsgCreateClient], [\"/ibc.core.client.v1.MsgUpdateClient\", tx_8.MsgUpdateClient], [\"/ibc.core.client.v1.MsgUpgradeClient\", tx_8.MsgUpgradeClient], [\"/ibc.core.client.v1.MsgSubmitMisbehaviour\", tx_8.MsgSubmitMisbehaviour], [\"/ibc.core.connection.v1.MsgConnectionOpenInit\", tx_9.MsgConnectionOpenInit], [\"/ibc.core.connection.v1.MsgConnectionOpenTry\", tx_9.MsgConnectionOpenTry], [\"/ibc.core.connection.v1.MsgConnectionOpenAck\", tx_9.MsgConnectionOpenAck], [\"/ibc.core.connection.v1.MsgConnectionOpenConfirm\", tx_9.MsgConnectionOpenConfirm], [\"/ibc.applications.transfer.v1.MsgTransfer\", tx_6.MsgTransfer]];\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\n\nvar SigningStargateClient = /*#__PURE__*/function (_stargateclient_1$Sta) {\n  _inherits(SigningStargateClient, _stargateclient_1$Sta);\n\n  function SigningStargateClient(tmClient, signer, options) {\n    var _this;\n\n    _classCallCheck(this, SigningStargateClient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SigningStargateClient).call(this, tmClient));\n    var _options$registry = options.registry,\n        registry = _options$registry === void 0 ? createDefaultRegistry() : _options$registry,\n        _options$aminoTypes = options.aminoTypes,\n        aminoTypes = _options$aminoTypes === void 0 ? new aminotypes_1.AminoTypes({\n      prefix: options.prefix\n    }) : _options$aminoTypes;\n    _this.registry = registry;\n    _this.aminoTypes = aminoTypes;\n    _this.signer = signer;\n    _this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    _this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    return _this;\n  }\n\n  _createClass(SigningStargateClient, [{\n    key: \"sendTokens\",\n    value: function () {\n      var _sendTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(senderAddress, recipientAddress, amount, fee) {\n        var memo,\n            sendMsg,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                memo = _args.length > 4 && _args[4] !== undefined ? _args[4] : \"\";\n                sendMsg = {\n                  typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n                  value: {\n                    fromAddress: senderAddress,\n                    toAddress: recipientAddress,\n                    amount: _toConsumableArray(amount)\n                  }\n                };\n                return _context.abrupt(\"return\", this.signAndBroadcast(senderAddress, [sendMsg], fee, memo));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sendTokens(_x, _x2, _x3, _x4) {\n        return _sendTokens.apply(this, arguments);\n      }\n\n      return sendTokens;\n    }()\n  }, {\n    key: \"delegateTokens\",\n    value: function () {\n      var _delegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n            delegateMsg,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                memo = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : \"\";\n                delegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n                  value: tx_4.MsgDelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context2.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function delegateTokens(_x5, _x6, _x7, _x8) {\n        return _delegateTokens.apply(this, arguments);\n      }\n\n      return delegateTokens;\n    }()\n  }, {\n    key: \"undelegateTokens\",\n    value: function () {\n      var _undelegateTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(delegatorAddress, validatorAddress, amount, fee) {\n        var memo,\n            undelegateMsg,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                memo = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : \"\";\n                undelegateMsg = {\n                  typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n                  value: tx_4.MsgUndelegate.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                    amount: amount\n                  })\n                };\n                return _context3.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function undelegateTokens(_x9, _x10, _x11, _x12) {\n        return _undelegateTokens.apply(this, arguments);\n      }\n\n      return undelegateTokens;\n    }()\n  }, {\n    key: \"withdrawRewards\",\n    value: function () {\n      var _withdrawRewards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(delegatorAddress, validatorAddress, fee) {\n        var memo,\n            withdrawMsg,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                memo = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : \"\";\n                withdrawMsg = {\n                  typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n                  value: tx_2.MsgWithdrawDelegatorReward.fromPartial({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress\n                  })\n                };\n                return _context4.abrupt(\"return\", this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function withdrawRewards(_x13, _x14, _x15) {\n        return _withdrawRewards.apply(this, arguments);\n      }\n\n      return withdrawRewards;\n    }()\n  }, {\n    key: \"sendIbcTokens\",\n    value: function () {\n      var _sendIbcTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight,\n      /** timeout in seconds */\n      timeoutTimestamp, fee) {\n        var memo,\n            timeoutTimestampNanoseconds,\n            transferMsg,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                memo = _args5.length > 8 && _args5[8] !== undefined ? _args5[8] : \"\";\n                timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n                transferMsg = {\n                  typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                  value: tx_6.MsgTransfer.fromPartial({\n                    sourcePort: sourcePort,\n                    sourceChannel: sourceChannel,\n                    sender: senderAddress,\n                    receiver: recipientAddress,\n                    token: transferAmount,\n                    timeoutHeight: timeoutHeight,\n                    timeoutTimestamp: timeoutTimestampNanoseconds\n                  })\n                };\n                return _context5.abrupt(\"return\", this.signAndBroadcast(senderAddress, [transferMsg], fee, memo));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function sendIbcTokens(_x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23) {\n        return _sendIbcTokens.apply(this, arguments);\n      }\n\n      return sendIbcTokens;\n    }()\n  }, {\n    key: \"signAndBroadcast\",\n    value: function () {\n      var _signAndBroadcast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(signerAddress, messages, fee) {\n        var memo,\n            txRaw,\n            txBytes,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                memo = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : \"\";\n                _context6.next = 3;\n                return this.sign(signerAddress, messages, fee, memo);\n\n              case 3:\n                txRaw = _context6.sent;\n                txBytes = tx_5.TxRaw.encode(txRaw).finish();\n                return _context6.abrupt(\"return\", this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function signAndBroadcast(_x24, _x25, _x26) {\n        return _signAndBroadcast.apply(this, arguments);\n      }\n\n      return signAndBroadcast;\n    }()\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     *\n     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n     *\n     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n     * (See the SigningStargateClient.offline constructor).\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(signerAddress, messages, fee, memo, explicitSignerData) {\n        var signerData, _yield$this$getSequen, accountNumber, sequence, chainId;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!explicitSignerData) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                signerData = explicitSignerData;\n                _context7.next = 13;\n                break;\n\n              case 4:\n                _context7.next = 6;\n                return this.getSequence(signerAddress);\n\n              case 6:\n                _yield$this$getSequen = _context7.sent;\n                accountNumber = _yield$this$getSequen.accountNumber;\n                sequence = _yield$this$getSequen.sequence;\n                _context7.next = 11;\n                return this.getChainId();\n\n              case 11:\n                chainId = _context7.sent;\n                signerData = {\n                  accountNumber: accountNumber,\n                  sequence: sequence,\n                  chainId: chainId\n                };\n\n              case 13:\n                return _context7.abrupt(\"return\", proto_signing_1.isOfflineDirectSigner(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData));\n\n              case 14:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function sign(_x27, _x28, _x29, _x30, _x31) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"signAmino\",\n    value: function () {\n      var _signAmino = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(signerAddress, messages, fee, memo, _ref) {\n        var _this2 = this;\n\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, signMode, msgs, signDoc, _yield$this$signer$si, signature, signed, signedTxBody, signedTxBodyEncodeObject, signedTxBodyBytes, signedGasLimit, signedSequence, signedAuthInfoBytes;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                accountNumber = _ref.accountNumber, sequence = _ref.sequence, chainId = _ref.chainId;\n                utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n                _context8.next = 4;\n                return this.signer.getAccounts();\n\n              case 4:\n                accountFromSigner = _context8.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n\n                if (accountFromSigner) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Failed to retrieve account from signer\");\n\n              case 7:\n                pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n                signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n                msgs = messages.map(function (msg) {\n                  return _this2.aminoTypes.toAmino(msg);\n                });\n                signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n                _context8.next = 13;\n                return this.signer.signAmino(signerAddress, signDoc);\n\n              case 13:\n                _yield$this$signer$si = _context8.sent;\n                signature = _yield$this$signer$si.signature;\n                signed = _yield$this$signer$si.signed;\n                signedTxBody = {\n                  messages: signed.msgs.map(function (msg) {\n                    return _this2.aminoTypes.fromAmino(msg);\n                  }),\n                  memo: signed.memo\n                };\n                signedTxBodyEncodeObject = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: signedTxBody\n                };\n                signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n                signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n                signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n                signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n                  pubkey: pubkey,\n                  sequence: signedSequence\n                }], signed.fee.amount, signedGasLimit, signMode);\n                return _context8.abrupt(\"return\", tx_5.TxRaw.fromPartial({\n                  bodyBytes: signedTxBodyBytes,\n                  authInfoBytes: signedAuthInfoBytes,\n                  signatures: [encoding_1.fromBase64(signature.signature)]\n                }));\n\n              case 23:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function signAmino(_x32, _x33, _x34, _x35, _x36) {\n        return _signAmino.apply(this, arguments);\n      }\n\n      return signAmino;\n    }()\n  }, {\n    key: \"signDirect\",\n    value: function () {\n      var _signDirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(signerAddress, messages, fee, memo, _ref2) {\n        var accountNumber, sequence, chainId, accountFromSigner, pubkey, txBodyEncodeObject, txBodyBytes, gasLimit, authInfoBytes, signDoc, _yield$this$signer$si2, signature, signed;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                accountNumber = _ref2.accountNumber, sequence = _ref2.sequence, chainId = _ref2.chainId;\n                utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n                _context9.next = 4;\n                return this.signer.getAccounts();\n\n              case 4:\n                accountFromSigner = _context9.sent.find(function (account) {\n                  return account.address === signerAddress;\n                });\n\n                if (accountFromSigner) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Failed to retrieve account from signer\");\n\n              case 7:\n                pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n                txBodyEncodeObject = {\n                  typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                  value: {\n                    messages: messages,\n                    memo: memo\n                  }\n                };\n                txBodyBytes = this.registry.encode(txBodyEncodeObject);\n                gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n                authInfoBytes = proto_signing_1.makeAuthInfoBytes([{\n                  pubkey: pubkey,\n                  sequence: sequence\n                }], fee.amount, gasLimit);\n                signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n                _context9.next = 15;\n                return this.signer.signDirect(signerAddress, signDoc);\n\n              case 15:\n                _yield$this$signer$si2 = _context9.sent;\n                signature = _yield$this$signer$si2.signature;\n                signed = _yield$this$signer$si2.signed;\n                return _context9.abrupt(\"return\", tx_5.TxRaw.fromPartial({\n                  bodyBytes: signed.bodyBytes,\n                  authInfoBytes: signed.authInfoBytes,\n                  signatures: [encoding_1.fromBase64(signature.signature)]\n                }));\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function signDirect(_x37, _x38, _x39, _x40, _x41) {\n        return _signDirect.apply(this, arguments);\n      }\n\n      return signDirect;\n    }()\n  }], [{\n    key: \"connectWithSigner\",\n    value: function () {\n      var _connectWithSigner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(endpoint, signer) {\n        var options,\n            tmClient,\n            _args10 = arguments;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : {};\n                _context10.next = 3;\n                return tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n\n              case 3:\n                tmClient = _context10.sent;\n                return _context10.abrupt(\"return\", new SigningStargateClient(tmClient, signer, options));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function connectWithSigner(_x42, _x43) {\n        return _connectWithSigner.apply(this, arguments);\n      }\n\n      return connectWithSigner;\n    }()\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n\n  }, {\n    key: \"offline\",\n    value: function () {\n      var _offline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signer) {\n        var options,\n            _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n                return _context11.abrupt(\"return\", new SigningStargateClient(undefined, signer, options));\n\n              case 2:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function offline(_x44) {\n        return _offline.apply(this, arguments);\n      }\n\n      return offline;\n    }()\n  }]);\n\n  return SigningStargateClient;\n}(stargateclient_1.StargateClient);\n\nexports.SigningStargateClient = SigningStargateClient;","map":null,"metadata":{},"sourceType":"script"}