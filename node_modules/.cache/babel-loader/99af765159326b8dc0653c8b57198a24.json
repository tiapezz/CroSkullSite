{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecNumber} CodecNumber */\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar varint = require('varint');\n\nvar intTable = require('./int-table');\n\nvar codecNameToCodeVarint = require('./varint-table');\n\nvar util = require('./util');\n\nvar uint8ArrayConcat = require('uint8arrays/concat');\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction addPrefix(multicodecStrOrCode, data) {\n  var prefix;\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\n\n\nfunction rmPrefix(data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n}\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\n\n\nfunction getCodec(prefixedData) {\n  var code = varint.decode(prefixedData);\n  var codecName = intTable.get(code);\n\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n\n  return codecName;\n}\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\n\n\nfunction getName(codec) {\n  return intTable.get(codec);\n}\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\n\n\nfunction getNumber(name) {\n  var code = codecNameToCodeVarint[name];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n\n  return varint.decode(code);\n}\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\n\n\nfunction getCode(prefixedData) {\n  return varint.decode(prefixedData);\n}\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\n\n\nfunction getCodeVarint(codecName) {\n  var code = codecNameToCodeVarint[codecName];\n\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n\n  return code;\n}\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\n\n\nfunction getVarint(code) {\n  return varint.encode(code);\n} // Make the constants top-level constants\n\n\nvar constants = require('./constants'); // Human friendly names for printing, e.g. in error messages\n\n\nvar print = require('./print');\n\nmodule.exports = _objectSpread({\n  addPrefix: addPrefix,\n  rmPrefix: rmPrefix,\n  getCodec: getCodec,\n  getName: getName,\n  getNumber: getNumber,\n  getCode: getCode,\n  getCodeVarint: getCodeVarint,\n  getVarint: getVarint,\n  print: print\n}, constants);","map":null,"metadata":{},"sourceType":"script"}