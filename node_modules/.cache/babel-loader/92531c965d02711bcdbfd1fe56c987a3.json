{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction toHex(data) {\n  var out = \"\";\n\n  var _iterator = _createForOfIteratorHelper(data),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      out += (\"0\" + byte.toString(16)).slice(-2);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return out;\n}\n\nexports.toHex = toHex;\n\nfunction fromHex(hexstring) {\n  if (hexstring.length % 2 !== 0) {\n    throw new Error(\"hex string length must be a multiple of 2\");\n  } // tslint:disable-next-line:readonly-array\n\n\n  var listOfInts = [];\n\n  for (var i = 0; i < hexstring.length; i += 2) {\n    var hexByteAsString = hexstring.substr(i, 2);\n\n    if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n      throw new Error(\"hex string contains invalid characters\");\n    }\n\n    listOfInts.push(parseInt(hexByteAsString, 16));\n  }\n\n  return new Uint8Array(listOfInts);\n}\n\nexports.fromHex = fromHex;\n\nfunction toAscii(input) {\n  var toNums = function toNums(str) {\n    return str.split(\"\").map(function (x) {\n      var charCode = x.charCodeAt(0); // 0x00–0x1F control characters\n      // 0x20–0x7E printable characters\n      // 0x7F delete character\n      // 0x80–0xFF out of 7 bit ascii range\n\n      if (charCode < 0x20 || charCode > 0x7e) {\n        throw new Error(\"Cannot encode character that is out of printable ASCII range: \" + charCode);\n      }\n\n      return charCode;\n    });\n  };\n\n  return Uint8Array.from(toNums(input));\n}\n\nexports.toAscii = toAscii;\n\nfunction fromAscii(data) {\n  var fromNums = function fromNums(listOfNumbers) {\n    return listOfNumbers.map(function (x) {\n      // 0x00–0x1F control characters\n      // 0x20–0x7E printable characters\n      // 0x7F delete character\n      // 0x80–0xFF out of 7 bit ascii range\n      if (x < 0x20 || x > 0x7e) {\n        throw new Error(\"Cannot decode character that is out of printable ASCII range: \" + x);\n      }\n\n      return String.fromCharCode(x);\n    });\n  };\n\n  return fromNums(Array.from(data)).join(\"\");\n}\n\nexports.fromAscii = fromAscii;","map":null,"metadata":{},"sourceType":"script"}