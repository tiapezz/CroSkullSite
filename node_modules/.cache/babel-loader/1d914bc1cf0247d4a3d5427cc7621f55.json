{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingSocket = void 0;\n\nvar xstream_1 = require(\"xstream\");\n\nvar socketwrapper_1 = require(\"./socketwrapper\");\n/**\n * A WebSocket wrapper that exposes all events as a stream.\n *\n * This underlying socket will not be closed when the stream has no listeners\n */\n\n\nvar StreamingSocket = /*#__PURE__*/function () {\n  function StreamingSocket(url) {\n    var _this = this;\n\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n\n    _classCallCheck(this, StreamingSocket);\n\n    this.socket = new socketwrapper_1.SocketWrapper(url, function (event) {\n      if (_this.eventProducerListener) {\n        _this.eventProducerListener.next(event);\n      }\n    }, function (errorEvent) {\n      if (_this.eventProducerListener) {\n        _this.eventProducerListener.error(errorEvent);\n      }\n    }, function () {// socket opened\n    }, function (closeEvent) {\n      if (_this.eventProducerListener) {\n        if (closeEvent.wasClean) {\n          _this.eventProducerListener.complete();\n        } else {\n          _this.eventProducerListener.error(\"Socket was closed unclean\");\n        }\n      }\n    }, timeout);\n    this.connected = this.socket.connected;\n    var eventProducer = {\n      start: function start(listener) {\n        return _this.eventProducerListener = listener;\n      },\n      stop: function stop() {\n        return _this.eventProducerListener = undefined;\n      }\n    };\n    this.events = xstream_1.Stream.create(eventProducer);\n  }\n\n  _createClass(StreamingSocket, [{\n    key: \"connect\",\n    value: function connect() {\n      this.socket.connect();\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.socket.send(data));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }]);\n\n  return StreamingSocket;\n}();\n\nexports.StreamingSocket = StreamingSocket;","map":null,"metadata":{},"sourceType":"script"}