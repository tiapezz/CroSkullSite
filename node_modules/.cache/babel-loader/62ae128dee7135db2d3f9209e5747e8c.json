{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebsocketClient = void 0;\n\nvar json_rpc_1 = require(\"@cosmjs/json-rpc\");\n\nvar socket_1 = require(\"@cosmjs/socket\");\n\nvar stream_1 = require(\"@cosmjs/stream\");\n\nvar xstream_1 = require(\"xstream\");\n\nvar rpcclient_1 = require(\"./rpcclient\");\n\nfunction defaultErrorHandler(error) {\n  throw error;\n}\n\nfunction toJsonRpcResponse(message) {\n  // this should never happen, but I want an alert if it does\n  if (message.type !== \"message\") {\n    throw new Error(\"Unexcepted message type on websocket: \".concat(message.type));\n  }\n\n  var jsonRpcEvent = json_rpc_1.parseJsonRpcResponse(JSON.parse(message.data));\n  return jsonRpcEvent;\n}\n\nvar RpcEventProducer = /*#__PURE__*/function () {\n  function RpcEventProducer(request, socket) {\n    _classCallCheck(this, RpcEventProducer);\n\n    this.running = false;\n    this.subscriptions = [];\n    this.request = request;\n    this.socket = socket;\n  }\n  /**\n   * Implementation of Producer.start\n   */\n\n\n  _createClass(RpcEventProducer, [{\n    key: \"start\",\n    value: function start(listener) {\n      if (this.running) {\n        throw Error(\"Already started. Please stop first before restarting.\");\n      }\n\n      this.running = true;\n      this.connectToClient(listener);\n      this.socket.queueRequest(JSON.stringify(this.request));\n    }\n    /**\n     * Implementation of Producer.stop\n     *\n     * Called by the stream when the stream's last listener stopped listening\n     * or when the producer completed.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false; // Tell the server we are done in order to save resources. We cannot wait for the result.\n      // This may fail when socket connection is not open, thus ignore errors in queueRequest\n\n      var endRequest = Object.assign(Object.assign({}, this.request), {\n        method: \"unsubscribe\"\n      });\n\n      try {\n        this.socket.queueRequest(JSON.stringify(endRequest));\n      } catch (error) {\n        if (error instanceof Error && error.message.match(/socket has disconnected/i)) {// ignore\n        } else {\n          throw error;\n        }\n      }\n    }\n  }, {\n    key: \"connectToClient\",\n    value: function connectToClient(listener) {\n      var _this = this;\n\n      var responseStream = this.socket.events.map(toJsonRpcResponse); // this should unsubscribe itself, so doesn't need to be removed explicitly\n\n      var idSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if (json_rpc_1.isJsonRpcErrorResponse(response)) {\n            _this.closeSubscriptions();\n\n            listener.error(JSON.stringify(response.error));\n          }\n\n          idSubscription.unsubscribe();\n        }\n      }); // this will fire on a response (success or error)\n      // Tendermint adds an \"#event\" suffix for events that follow a previous subscription\n      // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107\n\n      var idEventSubscription = responseStream.filter(function (response) {\n        return response.id === _this.request.id;\n      }).subscribe({\n        next: function next(response) {\n          if (json_rpc_1.isJsonRpcErrorResponse(response)) {\n            _this.closeSubscriptions();\n\n            listener.error(JSON.stringify(response.error));\n          } else {\n            listener.next(response.result);\n          }\n        }\n      }); // this will fire in case the websocket disconnects cleanly\n\n      var nonResponseSubscription = responseStream.subscribe({\n        error: function error(_error) {\n          _this.closeSubscriptions();\n\n          listener.error(_error);\n        },\n        complete: function complete() {\n          _this.closeSubscriptions();\n\n          listener.complete();\n        }\n      });\n      this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);\n    }\n  }, {\n    key: \"closeSubscriptions\",\n    value: function closeSubscriptions() {\n      var _iterator = _createForOfIteratorHelper(this.subscriptions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var subscription = _step.value;\n          subscription.unsubscribe();\n        } // clear unused subscriptions\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.subscriptions = [];\n    }\n  }]);\n\n  return RpcEventProducer;\n}();\n\nvar WebsocketClient = /*#__PURE__*/function () {\n  function WebsocketClient() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:46657\";\n    var onError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultErrorHandler;\n\n    _classCallCheck(this, WebsocketClient);\n\n    // Lazily create streams and use the same stream when listening to the same query twice.\n    //\n    // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this\n    // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!\n    this.subscriptionStreams = new Map(); // accept host.name:port and assume ws protocol\n    // make sure we don't end up with ...//websocket\n\n    var path = baseUrl.endsWith(\"/\") ? \"websocket\" : \"/websocket\";\n    var cleanBaseUrl = rpcclient_1.hasProtocol(baseUrl) ? baseUrl : \"ws://\" + baseUrl;\n    this.url = cleanBaseUrl + path;\n    this.socket = new socket_1.ReconnectingSocket(this.url);\n    var errorSubscription = this.socket.events.subscribe({\n      error: function error(_error2) {\n        onError(_error2);\n        errorSubscription.unsubscribe();\n      }\n    });\n    this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);\n    this.socket.connect();\n  }\n\n  _createClass(WebsocketClient, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n        var pendingResponse, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                pendingResponse = this.responseForRequestId(request.id);\n                this.socket.queueRequest(JSON.stringify(request));\n                _context.next = 4;\n                return pendingResponse;\n\n              case 4:\n                response = _context.sent;\n\n                if (!json_rpc_1.isJsonRpcErrorResponse(response)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(JSON.stringify(response.error));\n\n              case 7:\n                return _context.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"listen\",\n    value: function listen(request) {\n      if (request.method !== \"subscribe\") {\n        throw new Error(\"Request method must be \\\"subscribe\\\" to start event listening\");\n      }\n\n      var query = request.params.query;\n\n      if (typeof query !== \"string\") {\n        throw new Error(\"request.params.query must be a string\");\n      }\n\n      if (!this.subscriptionStreams.has(query)) {\n        var producer = new RpcEventProducer(request, this.socket);\n        var stream = xstream_1.Stream.create(producer);\n        this.subscriptionStreams.set(query, stream);\n      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n      return this.subscriptionStreams.get(query).filter(function (response) {\n        return response.query !== undefined;\n      });\n    }\n    /**\n     * Resolves as soon as websocket is connected. execute() queues requests automatically,\n     * so this should be required for testing purposes only.\n     */\n\n  }, {\n    key: \"connected\",\n    value: function () {\n      var _connected = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function connected() {\n        return _connected.apply(this, arguments);\n      }\n\n      return connected;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.socket.disconnect();\n    }\n  }, {\n    key: \"responseForRequestId\",\n    value: function () {\n      var _responseForRequestId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", stream_1.firstEvent(this.jsonRpcResponseStream.filter(function (r) {\n                  return r.id === id;\n                })));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function responseForRequestId(_x2) {\n        return _responseForRequestId.apply(this, arguments);\n      }\n\n      return responseForRequestId;\n    }()\n  }]);\n\n  return WebsocketClient;\n}();\n\nexports.WebsocketClient = WebsocketClient;","map":null,"metadata":{},"sourceType":"script"}