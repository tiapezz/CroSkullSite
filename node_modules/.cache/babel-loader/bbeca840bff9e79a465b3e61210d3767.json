{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\ProjectCroSkull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CID = require('cids');\n\nvar util = require('./util');\n/**\n * Resolves a path within a PB block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\n\n\nexports.resolve = function (binaryBlob, path) {\n  var node = util.deserialize(binaryBlob);\n  var parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    var key = parts.shift();\n\n    if (node[key] === undefined) {\n      // There might be a matching named link\n      var _iterator = _createForOfIteratorHelper(node.Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n\n          if (link.Name === key) {\n            return {\n              value: link.Hash,\n              remainderPath: parts.join('/')\n            };\n          }\n        } // There wasn't even a matching named link\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      throw new Error(\"Object has no property '\".concat(key, \"'\"));\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\n\n\nexports.tree = /*#__PURE__*/_regeneratorRuntime.mark(function _callee(binaryBlob) {\n  var node, ii;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          node = util.deserialize(binaryBlob); // There is always a `Data` and `Links` property\n\n          _context.next = 3;\n          return 'Data';\n\n        case 3:\n          _context.next = 5;\n          return 'Links';\n\n        case 5:\n          ii = 0;\n\n        case 6:\n          if (!(ii < node.Links.length)) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 9;\n          return \"Links/\".concat(ii);\n\n        case 9:\n          _context.next = 11;\n          return \"Links/\".concat(ii, \"/Name\");\n\n        case 11:\n          _context.next = 13;\n          return \"Links/\".concat(ii, \"/Tsize\");\n\n        case 13:\n          _context.next = 15;\n          return \"Links/\".concat(ii, \"/Hash\");\n\n        case 15:\n          ii++;\n          _context.next = 6;\n          break;\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n});","map":null,"metadata":{},"sourceType":"script"}