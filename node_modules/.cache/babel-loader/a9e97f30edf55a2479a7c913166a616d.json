{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Client = require('../../lib/core');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @implements {API}\n */\n\n\nvar Service = /*#__PURE__*/function () {\n  /**\n   * @param {ClientOptions} options\n   */\n  function Service(options) {\n    _classCallCheck(this, Service);\n\n    /** @private */\n    this.client = new Client(options);\n  }\n  /**\n   * @param {Client} client\n   * @param {string} name\n   * @param {Credentials & AbortOptions & HttpOptions} options\n   */\n\n\n  _createClass(Service, [{\n    key: \"add\",\n\n    /**\n     * Registers remote pinning service with a given name. Errors if service\n     * with the given name is already registered.\n     *\n     * @param {string} name\n     * @param {Credentials & AbortOptions & HttpOptions} options\n     */\n    value: function add(name, options) {\n      return Service.add(this.client, name, options);\n    }\n    /**\n     * Unregisteres remote pinning service with a given name. If service with such\n     * name isn't registerede this is a noop.\n     *\n     * @param {string} name\n     * @param {AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"rm\",\n    value: function rm(name, options) {\n      return Service.rm(this.client, name, options);\n    }\n    /**\n     * List registered remote pinning services.\n     *\n     * @param {{ stat?: true } & AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"ls\",\n    value: function ls(options) {\n      return Service.ls(this.client, options);\n    }\n  }], [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(client, name, options) {\n        var endpoint, key, headers, timeout, signal;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endpoint = options.endpoint, key = options.key, headers = options.headers, timeout = options.timeout, signal = options.signal;\n                _context.next = 3;\n                return client.post('pin/remote/service/add', {\n                  timeout: timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams({\n                    arg: [name, Service.encodeEndpoint(endpoint), key]\n                  }),\n                  headers: headers\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * @param {URL} url\n     */\n\n  }, {\n    key: \"encodeEndpoint\",\n    value: function encodeEndpoint(url) {\n      var href = String(url);\n\n      if (href === 'undefined') {\n        throw Error('endpoint is required');\n      } // Workaround trailing `/` issue in go-ipfs\n      // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n      return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n    }\n    /**\n     * @param {Client} client\n     * @param {string} name\n     * @param {AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"rm\",\n    value: function () {\n      var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(client, name) {\n        var _ref,\n            timeout,\n            signal,\n            headers,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, timeout = _ref.timeout, signal = _ref.signal, headers = _ref.headers;\n                _context2.next = 3;\n                return client.post('pin/remote/service/rm', {\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers,\n                  searchParams: toUrlSearchParams({\n                    arg: name\n                  })\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function rm(_x4, _x5) {\n        return _rm.apply(this, arguments);\n      }\n\n      return rm;\n    }()\n    /**\n     * @template {true} Stat\n     * @param {Client} client\n     * @param {{ stat?: Stat } & AbortOptions & HttpOptions} [options]\n     */\n\n  }, {\n    key: \"ls\",\n    value: function () {\n      var _ls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(client) {\n        var _ref2,\n            stat,\n            timeout,\n            signal,\n            headers,\n            response,\n            _yield$response$json,\n            RemoteServices,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref2 = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, stat = _ref2.stat, timeout = _ref2.timeout, signal = _ref2.signal, headers = _ref2.headers;\n                _context3.next = 3;\n                return client.post('pin/remote/service/ls', {\n                  searchParams: stat === true ? toUrlSearchParams({\n                    stat: stat\n                  }) : undefined,\n                  timeout: timeout,\n                  signal: signal,\n                  headers: headers\n                });\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return response.json();\n\n              case 6:\n                _yield$response$json = _context3.sent;\n                RemoteServices = _yield$response$json.RemoteServices;\n                return _context3.abrupt(\"return\", RemoteServices.map(Service.decodeRemoteService));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function ls(_x6) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n    /**\n     * @param {Object} json\n     * @returns {RemotePinServiceWithStat}\n     */\n\n  }, {\n    key: \"decodeRemoteService\",\n    value: function decodeRemoteService(json) {\n      return _objectSpread({\n        service: json.Service,\n        endpoint: new URL(json.ApiEndpoint)\n      }, json.Stat && {\n        stat: Service.decodeStat(json.Stat)\n      });\n    }\n    /**\n     * @param {Object} json\n     * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n     */\n\n  }, {\n    key: \"decodeStat\",\n    value: function decodeStat(json) {\n      switch (json.Status) {\n        case 'valid':\n          {\n            var _json$PinCount = json.PinCount,\n                Pinning = _json$PinCount.Pinning,\n                Pinned = _json$PinCount.Pinned,\n                Queued = _json$PinCount.Queued,\n                Failed = _json$PinCount.Failed;\n            return {\n              status: 'valid',\n              pinCount: {\n                queued: Queued,\n                pinning: Pinning,\n                pinned: Pinned,\n                failed: Failed\n              }\n            };\n          }\n\n        case 'invalid':\n          {\n            return {\n              status: 'invalid'\n            };\n          }\n\n        default:\n          {\n            return {\n              status: json.Status\n            };\n          }\n      }\n    }\n  }]);\n\n  return Service;\n}();\n\nmodule.exports = Service;","map":null,"metadata":{},"sourceType":"script"}