{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\src\\\\components\\\\Merchant\\\\Merchant.jsx\";\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport store from \"../../redux/store\";\nimport './merchant.css';\nimport { sendNotification, getStakingData } from \"../../redux/data/dataActions\";\nimport MerchantAvatar from \"./merchant-avatar.png\";\nimport MerchantEmpty from \"./merchant-empty.png\";\nvar MAX_APPROVE = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\";\n\nvar Merchant = function Merchant() {\n  var dispatch = useDispatch();\n\n  var _store$getState = store.getState(),\n      blockchain = _store$getState.blockchain,\n      data = _store$getState.data;\n\n  var petEggsSupply = data.petEggsSupply,\n      petEggsMaxSupply = data.petEggsMaxSupply,\n      petEggsLimit = data.petEggsLimit,\n      petEggsMintedByUser = data.petEggsMintedByUser,\n      petEggsCost = data.petEggsCost,\n      userGraveBalance = data.userGraveBalance,\n      approvedEggs = data.approvedEggs;\n  var croSkullsGrave = blockchain.croSkullsGrave,\n      croSkullsPetEggs = blockchain.croSkullsPetEggs,\n      accountAddress = blockchain.accountAddress,\n      formatEther = blockchain.formatEther;\n\n  var purchaseEgg = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var purchaseTx;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              purchaseTx = croSkullsPetEggs.purchaseEgg(accountAddress);\n              _context2.next = 3;\n              return purchaseTx.then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"default\"\n                          }));\n                          _context.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Egg Purchased!\",\n                            message: \"Successful purchased 1 pet's egg.\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getStakingData());\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function purchaseEgg() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var approveEggs = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var allowanceTx;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              allowanceTx = croSkullsGrave.approve(croSkullsPetEggs.address, MAX_APPROVE);\n              _context4.next = 3;\n              return allowanceTx.then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx) {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          dispatch(sendNotification({\n                            title: \"Transaction Sent\",\n                            message: 'Waiting for confirmation...',\n                            tx: tx,\n                            type: \"default\"\n                          }));\n                          _context3.next = 3;\n                          return tx.wait(2);\n\n                        case 3:\n                          dispatch(sendNotification({\n                            title: \"Approved Successful!\",\n                            message: \"Now you can purchase your pet's egg.\",\n                            tx: tx,\n                            type: \"success\"\n                          }));\n                          dispatch(getStakingData());\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function approveEggs() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var canMint = petEggsMintedByUser < petEggsLimit;\n  var hasBalance = parseInt(petEggsCost) <= parseInt(userGraveBalance);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-flex sk-row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \"Merchant\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, \"Minted\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"highlight\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 29\n    }\n  }, petEggsSupply, \" of \", petEggsMaxSupply)), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, \"Burn your \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 41\n    }\n  }, \"GRAVE\"), \" to receive a limited and super-rare Pet Eggs.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-box-content sk-column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"Cost: \", formatEther(petEggsCost), \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 70\n    }\n  }, \"GRAVE\")), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, \"Limit: Max 2 Eggs per Address\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, \"Max Supply: \", petEggsMaxSupply, \" EGGS\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }, \"Your Limit: \".concat(petEggsMintedByUser, \"/\").concat(petEggsLimit))), !approvedEggs ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sk-purchase-btn \".concat(accountAddress ? '' : 'disabled'),\n    disabled: accountAddress ? false : true,\n    onClick: function onClick() {\n      approveEggs();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 33\n    }\n  }, \"Approve\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sk-purchase-btn\",\n    disabled: canMint && hasBalance ? false : true,\n    onClick: function onClick() {\n      canMint && hasBalance ? purchaseEgg() : window.open('https://mm.finance/swap?outputCurrency=0x9885488cD6864DF90eeBa6C5d07B35f08CEb05e9');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 33\n    }\n  }, !canMint ? 'Limit Reached' : !hasBalance ? 'You need more Grave' : 'Purchase'))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sk-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: petEggsMintedByUser ? MerchantAvatar : MerchantEmpty,\n    className: \"\".concat(approvedEggs ? \"merchant-egg\" : \"merchant-egg trip\"),\n    alt: \"Pet's Egg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default Merchant;","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/components/Merchant/Merchant.jsx"],"names":["React","useDispatch","store","sendNotification","getStakingData","MerchantAvatar","MerchantEmpty","MAX_APPROVE","Merchant","dispatch","getState","blockchain","data","petEggsSupply","petEggsMaxSupply","petEggsLimit","petEggsMintedByUser","petEggsCost","userGraveBalance","approvedEggs","croSkullsGrave","croSkullsPetEggs","accountAddress","formatEther","purchaseEgg","purchaseTx","then","tx","title","message","type","wait","approveEggs","allowanceTx","approve","address","canMint","hasBalance","parseInt","window","open"],"mappings":"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","sourcesContent":["import React  from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport store from \"../../redux/store\";\r\nimport './merchant.css';\r\nimport { sendNotification, getStakingData } from \"../../redux/data/dataActions\";\r\nimport MerchantAvatar from \"./merchant-avatar.png\";\r\nimport MerchantEmpty from \"./merchant-empty.png\";\r\n\r\nconst MAX_APPROVE = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\r\nconst Merchant = () => {\r\n    const dispatch = useDispatch();\r\n    let { blockchain, data } = store.getState();\r\n    let { petEggsSupply, petEggsMaxSupply, petEggsLimit, petEggsMintedByUser, petEggsCost, userGraveBalance, approvedEggs } = data\r\n    let { croSkullsGrave, croSkullsPetEggs, accountAddress, formatEther } = blockchain\r\n\r\n\r\n    const purchaseEgg = async () => {\r\n        let purchaseTx = croSkullsPetEggs.purchaseEgg(\r\n            accountAddress\r\n        )\r\n        await purchaseTx.then( async ( tx ) => {\r\n            dispatch(sendNotification({\r\n                title: `Transaction Sent`,\r\n                message: 'Waiting for confirmation...',\r\n                tx,\r\n                type: \"default\"\r\n            }))\r\n            await tx.wait(2)\r\n            dispatch(sendNotification({\r\n                title: `Egg Purchased!`,\r\n                message: `Successful purchased 1 pet's egg.`,\r\n                tx,\r\n                type: \"success\"\r\n            }))\r\n            dispatch(getStakingData())\r\n        })\r\n    }\r\n\r\n    const approveEggs = async () => {\r\n        let allowanceTx = croSkullsGrave.approve(\r\n            croSkullsPetEggs.address,\r\n            MAX_APPROVE\r\n        )\r\n        await allowanceTx.then( async ( tx ) => {\r\n            dispatch(sendNotification({\r\n                title: `Transaction Sent`,\r\n                message: 'Waiting for confirmation...',\r\n                tx,\r\n                type: \"default\"\r\n            }))\r\n            await tx.wait(2)\r\n            dispatch(sendNotification({\r\n                title: `Approved Successful!`,\r\n                message: `Now you can purchase your pet's egg.`,\r\n                tx,\r\n                type: \"success\"\r\n            }))\r\n            dispatch( getStakingData() )\r\n        })\r\n    }\r\n\r\n    let canMint = petEggsMintedByUser < petEggsLimit\r\n    let hasBalance = parseInt(petEggsCost) <= parseInt(userGraveBalance)\r\n    return (\r\n        <>\r\n            <div className=\"sk-flex sk-row\">\r\n                <div className=\"sk-container\">\r\n                    <div className={`sk-box`}>\r\n                        <h2>Merchant</h2>\r\n                        <div className=\"sk-box-content sk-column\">\r\n                            <span>Minted</span>\r\n                            <span className=\"highlight\">{petEggsSupply} of {petEggsMaxSupply}</span>\r\n                        </div>\r\n                        <span>Burn your <b>GRAVE</b> to receive a limited and super-rare Pet Eggs.</span>\r\n                        <div className=\"sk-box-content sk-column\">\r\n                            <span>Cost: { formatEther(petEggsCost) } <b>GRAVE</b></span>\r\n                            <span>Limit: Max 2 Eggs per Address</span>\r\n                            <span>Max Supply: {petEggsMaxSupply} EGGS</span>\r\n                            <span>{ `Your Limit: ${petEggsMintedByUser}/${petEggsLimit}` }</span>\r\n                        </div>\r\n                        {\r\n                            ! approvedEggs ? \r\n                            (\r\n                                <button\r\n                                    className={`sk-purchase-btn ${ accountAddress ? '' : 'disabled'}`}\r\n                                    disabled={ accountAddress ? false : true}\r\n                                    onClick={\r\n                                        () => {\r\n                                            approveEggs()\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    Approve\r\n                                </button>\r\n                            ) : (\r\n                                <button \r\n                                    className=\"sk-purchase-btn\"\r\n                                    disabled={ canMint && hasBalance ? false : true }\r\n                                    onClick={ \r\n                                        () => {\r\n                                            canMint && hasBalance ?\r\n                                                purchaseEgg() :\r\n                                                window.open('https://mm.finance/swap?outputCurrency=0x9885488cD6864DF90eeBa6C5d07B35f08CEb05e9')\r\n                                        }\r\n                                    }\r\n                                >\r\n                                    {\r\n                                        ! canMint ?\r\n                                        'Limit Reached' : \r\n                                            ! hasBalance ?\r\n                                            'You need more Grave' :\r\n                                        'Purchase'\r\n                                    }\r\n                                </button>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"sk-container\">\r\n                    <img \r\n                        src={ petEggsMintedByUser ? MerchantAvatar : MerchantEmpty }\r\n                        className={ `${approvedEggs ? `merchant-egg` : `merchant-egg trip`}` }\r\n                        alt=\"Pet's Egg\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\nexport default Merchant;\r\n"]},"metadata":{},"sourceType":"module"}