{"ast":null,"code":"var _classCallCheck = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar cacheUtils = require('./cache-utils.js');\n\nvar createAsyncMiddleware = require('json-rpc-engine/src/createAsyncMiddleware'); // `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\n\n\nvar emptyValues = [undefined, null, \"<nil>\"];\nmodule.exports = createBlockCacheMiddleware;\n\nfunction createBlockCacheMiddleware() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // validate options\n  var blockTracker = opts.blockTracker;\n  if (!blockTracker) throw new Error('createBlockCacheMiddleware - No BlockTracker specified'); // create caching strategies\n\n  var blockCache = new BlockCacheStrategy();\n  var strategies = {\n    perma: blockCache,\n    block: blockCache,\n    fork: blockCache\n  };\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {\n      var type, strategy, blockTag, requestedBlockNumber, latestBlockNumber, cacheResult;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!req.skipCache) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 2:\n              // check type and matching strategy\n              type = cacheUtils.cacheTypeForPayload(req);\n              strategy = strategies[type]; // If there's no strategy in place, pass it down the chain.\n\n              if (strategy) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 6:\n              if (strategy.canCacheRequest(req)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 8:\n              // get block reference (number or keyword)\n              blockTag = cacheUtils.blockTagForPayload(req);\n              if (!blockTag) blockTag = 'latest'; // get exact block number\n\n              if (!(blockTag === 'earliest')) {\n                _context.next = 14;\n                break;\n              }\n\n              // this just exists for symmetry with \"latest\"\n              requestedBlockNumber = '0x00';\n              _context.next = 23;\n              break;\n\n            case 14:\n              if (!(blockTag === 'latest')) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 17;\n              return blockTracker.getLatestBlock();\n\n            case 17:\n              latestBlockNumber = _context.sent;\n              // clear all cache before latest block\n              blockCache.clearBefore(latestBlockNumber);\n              requestedBlockNumber = latestBlockNumber;\n              _context.next = 23;\n              break;\n\n            case 22:\n              // We have a hex number\n              requestedBlockNumber = blockTag;\n\n            case 23:\n              _context.next = 25;\n              return strategy.get(req, requestedBlockNumber);\n\n            case 25:\n              cacheResult = _context.sent;\n\n              if (!(cacheResult === undefined)) {\n                _context.next = 33;\n                break;\n              }\n\n              _context.next = 29;\n              return next();\n\n            case 29:\n              _context.next = 31;\n              return strategy.set(req, requestedBlockNumber, res.result);\n\n            case 31:\n              _context.next = 34;\n              break;\n\n            case 33:\n              // fill in result from cache\n              res.result = cacheResult;\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} //\n// Cache Strategies\n//\n\n\nvar BlockCacheStrategy = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function BlockCacheStrategy() {\n    _classCallCheck(this, BlockCacheStrategy);\n\n    this.cache = {};\n  }\n\n  _createClass(BlockCacheStrategy, [{\n    key: \"getBlockCacheForPayload\",\n    value: function getBlockCacheForPayload(payload, blockNumberHex) {\n      var blockNumber = Number.parseInt(blockNumberHex, 16);\n      var blockCache = this.cache[blockNumber]; // create new cache if necesary\n\n      if (!blockCache) {\n        var newCache = {};\n        this.cache[blockNumber] = newCache;\n        blockCache = newCache;\n      }\n\n      return blockCache;\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload, requestedBlockNumber) {\n        var blockCache, identifier, cached;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // lookup block cache\n                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n\n                if (blockCache) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                // lookup payload in block cache\n                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n                cached = blockCache[identifier]; // may be undefined\n\n                return _context2.abrupt(\"return\", cached);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x4, _x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload, requestedBlockNumber, result) {\n        var canCache, blockCache, identifier;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // check if we can cached this result\n                canCache = this.canCacheResult(payload, result);\n\n                if (canCache) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                // set the value in the cache\n                blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n                identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n                blockCache[identifier] = result;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set(_x6, _x7, _x8) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"canCacheRequest\",\n    value: function canCacheRequest(payload) {\n      // check request method\n      if (!cacheUtils.canCache(payload)) {\n        return false;\n      } // check blockTag\n\n\n      var blockTag = cacheUtils.blockTagForPayload(payload);\n\n      if (blockTag === 'pending') {\n        return false;\n      } // can be cached\n\n\n      return true;\n    }\n  }, {\n    key: \"canCacheResult\",\n    value: function canCacheResult(payload, result) {\n      // never cache empty values (e.g. undefined)\n      if (emptyValues.includes(result)) return; // check if transactions have block reference before caching\n\n      if (['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n        if (!result || !result.blockHash || result.blockHash === '0x0000000000000000000000000000000000000000000000000000000000000000') {\n          return false;\n        }\n      } // otherwise true\n\n\n      return true;\n    } // removes all block caches with block number lower than `oldBlockHex`\n\n  }, {\n    key: \"clearBefore\",\n    value: function clearBefore(oldBlockHex) {\n      var self = this;\n      var oldBlockNumber = Number.parseInt(oldBlockHex, 16); // clear old caches\n\n      Object.keys(self.cache).map(Number).filter(function (num) {\n        return num < oldBlockNumber;\n      }).forEach(function (num) {\n        return delete self.cache[num];\n      });\n    }\n  }]);\n\n  return BlockCacheStrategy;\n}();","map":null,"metadata":{},"sourceType":"script"}