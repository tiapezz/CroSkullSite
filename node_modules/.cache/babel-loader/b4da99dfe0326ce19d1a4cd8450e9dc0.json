{"ast":null,"code":"import _regeneratorRuntime from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"F:\\\\Mattia\\\\Visual studio\\\\AppCroskull\\\\croskull-nft-marketplace\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from \"ethers\";\nimport store from \"../store\";\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\n\nvar fetchDexRequest = function fetchDexRequest() {\n  return {\n    type: \"FETCH_DEX_REQUEST\"\n  };\n};\n\nvar fetchDexSuccess = function fetchDexSuccess(payload) {\n  return {\n    type: \"FETCH_DEX_SUCCESS\",\n    payload: payload\n  };\n};\n\nvar updateState = function updateState(payload) {\n  return {\n    type: \"UPDATE_STATE\",\n    payload: payload\n  };\n};\n\nexport var loadDexData = function loadDexData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var rawDexData, dexData, graveInCro, graveInUsd, croInUsd, liquidityUsd, liquidityCro;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchDexRequest());\n              _context.next = 3;\n              return fetch('https://api.dexscreener.io/latest/dex/pairs/cronos/0x4672D3D945700cc3BDf4a2b6704e429d567DC52c');\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              rawDexData = _context.sent;\n\n              if (rawDexData.pair && rawDexData.pair.fdv) {\n                dexData = rawDexData.pair;\n                graveInCro = dexData.priceNative;\n                graveInUsd = dexData.priceUsd;\n                croInUsd = (graveInUsd / graveInCro).toFixed(2);\n                liquidityUsd = dexData.liquidity.usd.toFixed(2);\n                liquidityCro = dexData.liquidity.quote;\n                dispatch(fetchDexSuccess({\n                  croInUsd: croInUsd,\n                  graveInUsd: graveInUsd,\n                  graveInCro: graveInCro,\n                  liquidityUsd: liquidityUsd,\n                  liquidityCro: liquidityCro\n                }));\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["F:/Mattia/Visual studio/AppCroskull/croskull-nft-marketplace/src/redux/dexscreener/dexscreenerActions.js"],"names":["ethers","store","sendNotification","getSkullsData","fetchDexRequest","type","fetchDexSuccess","payload","updateState","loadDexData","dispatch","fetch","json","rawDexData","pair","fdv","dexData","graveInCro","priceNative","graveInUsd","priceUsd","croInUsd","toFixed","liquidityUsd","liquidity","usd","liquidityCro","quote"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAAgD,qBAAhD;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACjC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAIH,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACD,OAAD,EAAa;AAC7B,SAAO;AACHF,IAAAA,IAAI,EAAE,cADH;AAEHE,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACHA,cAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AADG;AAAA,qBAE2BO,KAAK,CAAC,+FAAD,CAFhC;;AAAA;AAAA;AAAA,mCAEmIC,IAFnI;;AAAA;AAECC,cAAAA,UAFD;;AAIH,kBAAIA,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACC,IAAX,CAAgBC,GAAvC,EAA4C;AACpCC,gBAAAA,OADoC,GAC1BH,UAAU,CAACC,IADe;AAEpCG,gBAAAA,UAFoC,GAEvBD,OAAO,CAACE,WAFe;AAGpCC,gBAAAA,UAHoC,GAGvBH,OAAO,CAACI,QAHe;AAIpCC,gBAAAA,QAJoC,GAIzB,CAACF,UAAU,GAAGF,UAAd,EAA0BK,OAA1B,CAAkC,CAAlC,CAJyB;AAKpCC,gBAAAA,YALoC,GAKrBP,OAAO,CAACQ,SAAR,CAAkBC,GAAlB,CAAsBH,OAAtB,CAA8B,CAA9B,CALqB;AAMpCI,gBAAAA,YANoC,GAMrBV,OAAO,CAACQ,SAAR,CAAkBG,KANG;AAOxCjB,gBAAAA,QAAQ,CAACJ,eAAe,CAAC;AACrBe,kBAAAA,QAAQ,EAARA,QADqB;AAErBF,kBAAAA,UAAU,EAAVA,UAFqB;AAGrBF,kBAAAA,UAAU,EAAVA,UAHqB;AAIrBM,kBAAAA,YAAY,EAAZA,YAJqB;AAKrBG,kBAAAA,YAAY,EAAZA;AALqB,iBAAD,CAAhB,CAAR;AAOH;;AAlBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAoBH,CArBM","sourcesContent":["import { ethers } from \"ethers\";\r\nimport store from \"../store\";\r\nimport { sendNotification, getSkullsData } from \"../data/dataActions\";\r\n\r\nconst fetchDexRequest = () => {\r\n  return {\r\n    type: \"FETCH_DEX_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDexSuccess = (payload) => {\r\n    return {\r\n      type: \"FETCH_DEX_SUCCESS\",\r\n      payload: payload\r\n    }\r\n}\r\n\r\nconst updateState = (payload) => {\r\n    return {\r\n        type: \"UPDATE_STATE\",\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const loadDexData = () => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchDexRequest())\r\n        let rawDexData = await (await fetch('https://api.dexscreener.io/latest/dex/pairs/cronos/0x4672D3D945700cc3BDf4a2b6704e429d567DC52c')).json();\r\n        \r\n        if( rawDexData.pair && rawDexData.pair.fdv ){\r\n            let dexData = rawDexData.pair\r\n            let graveInCro = dexData.priceNative\r\n            let graveInUsd = dexData.priceUsd\r\n            let croInUsd = (graveInUsd / graveInCro).toFixed(2)\r\n            let liquidityUsd = dexData.liquidity.usd.toFixed(2)\r\n            let liquidityCro = dexData.liquidity.quote\r\n            dispatch(fetchDexSuccess({\r\n                croInUsd,\r\n                graveInUsd,\r\n                graveInCro,\r\n                liquidityUsd,\r\n                liquidityCro,\r\n            }))\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}